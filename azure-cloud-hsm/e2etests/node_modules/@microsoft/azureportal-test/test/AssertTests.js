"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TestSupport_1 = require("./TestSupport");
const testFx = require("../src/Index");
var assert = testFx.Utils.Assert;
const assertTimeout = testFx.Utils.DefaultTimeouts.assertTimeout;
describe("Assert Tests", function () {
    this.timeout(0);
    const testSupport = new TestSupport_1.default(this);
    this.retries(1);
    const msToS = (ms) => ms / 1000;
    const timeout = 4000;
    const delayMs = 6000;
    const delay = async (val, ms = delayMs) => {
        let delayed = false;
        setTimeout(() => {
            delayed = true;
        }, ms);
        return await testFx.portal.wait(async () => {
            return delayed && (typeof val === "function" ? await val() : val);
        }, ms + 500, `Intentional fail after ${msToS(ms)} second(s)`, `Delay for ${msToS(ms)} second(s)`);
    };
    const checkError = async (assertCb, expectedError) => {
        let didNotFail = true;
        let err = "";
        try {
            await assertCb();
        }
        catch (e) {
            didNotFail = false;
            err = e;
        }
        finally {
            if (didNotFail) {
                // eslint-disable-next-line no-unsafe-finally
                throw new Error(`This should have failed:\n${assertCb.toString()}`);
            }
            const errString = err.toString();
            if (errString !== expectedError) {
                // eslint-disable-next-line no-unsafe-finally
                throw new Error(`The caught error message did not match to the expected.\nCaught: ${errString}\nExpected: ${expectedError}`);
            }
        }
    };
    before(() => {
        testFx.Logger.startLogCapture();
        if (testFx.PortalConfigurationManager.default.portalContext.browserAutomation ===
            testFx.BrowserAutomationType.WebDriver) {
            this.ctx.skip();
        }
    });
    it("Testing assert.deepEqual with all possible signatures", async () => {
        console.log("\nTesting assert.deepEqual with all possible signatures");
        await assert.deepEqual({ n: 1 }, { n: 1 }, "Should pass", timeout);
        await assert.deepEqual({ n: 1 }, { n: true }, null, timeout);
        await assert.deepEqual(async () => await delay({ n: 1 }), { n: 1 }, `Should pass after ${msToS(delayMs)} second(s)`);
        await assert.deepEqual({ n: 1 }, { n: "1" });
        await checkError(async () => await assert.deepEqual({ n: 1 }, { n: 2 }, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.deepEqual()\n\tShould fail after ${msToS(timeout)} second(s)`);
        await checkError(async () => await assert.deepEqual({ n: 1 }, { m: 1 }, `Should fail after ${msToS(assertTimeout)} second(s)`), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.deepEqual()\n\tShould fail after ${msToS(assertTimeout)} second(s)`);
        await checkError(async () => await assert.deepEqual(async () => await delay(true), false, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.deepEqual()\n\tShould fail after ${msToS(timeout)} second(s)`);
    });
    it("Testing assert.deepStrictEqual with all possible signatures", async () => {
        console.log("\nTesting assert.deepStrictEqual with all possible signatures");
        await assert.deepStrictEqual(true, true, "Should pass", timeout);
        await assert.deepStrictEqual({ n: 1 }, { n: 1 }, null, timeout);
        await assert.deepStrictEqual(async () => delay({ n: 1 }), { n: 1 }, `Should pass after ${msToS(delayMs)} second(s)`);
        await assert.deepStrictEqual(1, 1);
        await checkError(async () => await assert.deepStrictEqual({ n: 1 }, { n: "1" }, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.deepStrictEqual()\n\tShould fail after ${msToS(timeout)} second(s)`);
        await checkError(async () => await assert.deepStrictEqual(true, false, `Should fail after ${msToS(assertTimeout)} second(s)`), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.deepStrictEqual()\n\tShould fail after ${msToS(assertTimeout)} second(s)`);
        await checkError(async () => await assert.deepStrictEqual(async () => await delay("hello"), "hello", `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.deepStrictEqual()\n\tShould fail after ${msToS(timeout)} second(s)`);
    });
    it("Testing assert.doesNotMatch with all possible signatures", async () => {
        console.log("\nTesting assert.doesNotMatch with all possible signatures");
        await assert.doesNotMatch("hello", /helo/, "Should pass", timeout);
        await assert.doesNotMatch("hello", /hl*o/, null, timeout);
        await assert.doesNotMatch(async () => await delay("hello"), /hllo/, `Should pass after ${msToS(delayMs)} second(s)`);
        await assert.doesNotMatch("hello", /ha*lo/);
        await checkError(async () => await assert.doesNotMatch("hello", /hello/, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.doesNotMatch(): Should fail after ${msToS(timeout)} second(s)\n\tRegExp: /hello/\n\tInput: hello`);
        await checkError(async () => await assert.doesNotMatch("heloo", /h*loo/, `Should fail after ${msToS(assertTimeout)} second(s)`), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.doesNotMatch(): Should fail after ${msToS(assertTimeout)} second(s)\n\tRegExp: /h*loo/\n\tInput: heloo`);
        await checkError(async () => await assert.doesNotMatch(async () => await delay("hello"), /helo/, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.doesNotMatch(): Should fail after ${msToS(timeout)} second(s)\n\tRegExp: /helo/\n\tInput: UNDEFINED`);
    });
    it("Testing assert.doesNotReject with all possible signatures", async () => {
        console.log("\nTesting assert.doesNotReject with all possible signatures");
        await assert.doesNotReject(async () => await Promise.resolve("Passing"), /some error/, "Should pass", timeout);
        await assert.doesNotReject(async () => await delay(true), /some error/, `Should pass after ${msToS(delayMs)} second(s)`);
        await assert.doesNotReject(async () => await Promise.resolve("Passing"), /some error/, null, timeout);
        await assert.doesNotReject(async () => await Promise.resolve(), "Should pass", timeout);
        await assert.doesNotReject(async () => await delay(true), /some error/);
        await assert.doesNotReject(async () => await delay(true), `Should pass ${msToS(delayMs)} second(s)`);
        await assert.doesNotReject(async () => await Promise.resolve(), null, timeout);
        await checkError(async () => await assert.doesNotReject(() => Promise.reject("expected error"), /expected error/, `Should fail after ${msToS(delayMs)} second(s)`), `AssertionError [ERR_ASSERTION]: Got unwanted rejection: Should fail after ${msToS(delayMs)} second(s)\nActual message: "undefined"\n\tAssertion failed in assert.doesNotReject()`);
        await checkError(async () => await assert.doesNotReject(async () => await delay(true), `Should fail after ${msToS(timeout)} second(s)`, timeout), `PlaywrightTimeoutError: Wait timeout after ${timeout} ms\n\tAssertion failed in assert.doesNotReject()`);
        await checkError(async () => await assert.doesNotReject(async () => await delay(false), `Should fail after ${msToS(assertTimeout)} second(s)`), `AssertionError [ERR_ASSERTION]: Got unwanted rejection: Should fail after ${msToS(assertTimeout)} second(s)\nActual message: "Wait timeout after ${delayMs + 500} ms\n\tIntentional fail after ${msToS(delayMs)} second(s)"\n\tAssertion failed in assert.doesNotReject()`);
    });
    it("Testing assert.doesNotThrow with all possible signatures", async () => {
        console.log("\nTesting assert.doesNotThrow with all possible signatures");
        await assert.doesNotThrow(() => true, /some error/, "Should pass", timeout);
        await assert.doesNotThrow(() => true, /some error/, "Should pass");
        await assert.doesNotThrow(() => true, /some error/, null, timeout);
        await assert.doesNotThrow(() => true, "Should pass", timeout);
        await assert.doesNotThrow(() => true, /some error/);
        await assert.doesNotThrow(() => true, "Should pass");
        await assert.doesNotThrow(() => true, null, timeout);
        await checkError(async () => await assert.doesNotThrow(() => {
            throw new Error("Intentional error");
        }, /Intentional error/, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Got unwanted exception: Should fail after ${msToS(timeout)} second(s)\nActual message: "Intentional error"\n\tAssertion failed in assert.doesNotThrow()`);
        await checkError(async () => await assert.doesNotThrow(() => {
            throw new Error("Intentional error");
        }, /intentional errors/, `Should fail after ${msToS(assertTimeout)} second(s)`), "Error: Intentional error\n\tAssertion failed in assert.doesNotThrow()");
    });
    it("Testing assert.equal with all possible signatures", async () => {
        console.log("\nTesting assert.equal with all possible signatures");
        await assert.equal(1, 1, "Should pass", timeout);
        await assert.equal(false, false, null, timeout);
        await assert.equal(async () => await delay("hello"), "hello", `Should pass after ${msToS(delayMs)} second(s)`);
        await assert.equal(() => "hello", "hello");
        await checkError(async () => await assert.equal({ n: 1 }, { n: 1 }, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.equal()\n\tShould fail after ${msToS(timeout)} second(s)`);
        await checkError(async () => await assert.equal(async () => await delay(false), false, `Should fail after ${msToS(assertTimeout)} second(s)`), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.equal()\n\tShould fail after ${msToS(assertTimeout)} second(s)`);
        await checkError(async () => await assert.equal(async () => await delay(1), 1, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.equal()\n\tShould fail after ${msToS(timeout)} second(s)`);
    });
    it("Testing assert.fail with all possible signatures", async () => {
        console.log("\nTesting assert.fail with all possible signatures");
        await checkError(async () => {
            await delay(true);
            assert.fail(`Should fail after ${msToS(delayMs)} second(s)`);
        }, `AssertionError [ERR_ASSERTION]: Should fail after ${msToS(delayMs)} second(s)`);
    });
    it("Testing assert.ifError with all possible signatures", async () => {
        console.log("\nTesting assert.ifError with all possible signatures");
        await assert.ifError(async () => {
            await delay(true);
            return undefined;
        });
        await assert.ifError(null, timeout);
        await checkError(async () => await assert.ifError(async () => {
            await delay(true);
            return undefined;
        }, timeout), `PlaywrightTimeoutError: Wait timeout after ${timeout} ms\n\tAssertion failed in assert.ifError()`);
        await checkError(async () => await assert.ifError("Some string"), `AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 'Some string'\n\tAssertion failed in assert.ifError()`);
    });
    it("Testing assert.match with all possible signatures", async () => {
        console.log("\nTesting assert.match with all possible signatures");
        await assert.match("hello", /hello/, "Should pass", timeout);
        await assert.match("hello", /h*o/, null, timeout);
        await assert.match(async () => await delay("hello"), /hello/, `Should pass after ${msToS(delayMs)} second(s)`);
        await assert.match("hello", /h*lo/);
        await checkError(() => assert.match("hllo", /he*lo/, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.match(): Should fail after ${msToS(timeout)} second(s)\n\tRegExp: /he*lo/\n\tInput: hllo`);
        await checkError(() => assert.match("hello", /he*loo/, `Should fail after ${msToS(assertTimeout)} second(s)`), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.match(): Should fail after ${msToS(assertTimeout)} second(s)\n\tRegExp: /he*loo/\n\tInput: hello`);
        await checkError(() => assert.match(async () => await delay("hello"), /hello/, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.match(): Should fail after ${msToS(timeout)} second(s)\n\tRegExp: /hello/\n\tInput: UNDEFINED`);
    });
    it("Testing assert.notDeepEqual with all possible signatures", async () => {
        console.log("\nTesting assert.notDeepEqual with all possible signatures");
        const obj1 = { n: 1 };
        const obj2 = { n: 2 };
        const obj3 = { n: 1 };
        const obj4 = Object.create(obj1);
        const obj5 = { n: "1" };
        await assert.notDeepEqual(obj1, obj2, "Should pass", timeout);
        await assert.notDeepEqual(obj2, obj4, null, timeout);
        await assert.notDeepEqual(async () => await delay(obj1), obj4, `Should pass after ${msToS(delayMs)} second(s)`);
        await assert.notDeepEqual(obj3, obj4);
        await checkError(async () => await assert.notDeepEqual(obj1, obj5, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.notDeepEqual()\n\tShould fail after ${msToS(timeout)} second(s)`);
        await checkError(async () => await assert.notDeepEqual(obj1, obj3, `Should fail after ${msToS(assertTimeout)} second(s)`), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.notDeepEqual()\n\tShould fail after ${msToS(assertTimeout)} second(s)`);
        await checkError(async () => await assert.notDeepEqual(async () => await delay(obj4), obj4, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.notDeepEqual()\n\tShould fail after ${msToS(timeout)} second(s)`);
    });
    it("Testing assert.notDeepStrictEqual with all possible signatures", async () => {
        console.log("\nTesting assert.notDeepStrictEqual with all possible signatures");
        await assert.notDeepStrictEqual(true, "true", "Should pass", timeout);
        await assert.notDeepStrictEqual({ n: 1 }, { n: "1" }, null, timeout);
        await assert.notDeepStrictEqual(async () => delay({ n: true }), { n: 1 }, `Should pass after ${msToS(delayMs)} second(s)`);
        await assert.notDeepStrictEqual(1, 2);
        await checkError(async () => await assert.notDeepStrictEqual({ n: 1 }, { n: 1 }, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.notDeepStrictEqual()\n\tShould fail after ${msToS(timeout)} second(s)`);
        await checkError(async () => await assert.notDeepStrictEqual(true, true, `Should fail after ${msToS(assertTimeout)} second(s)`), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.notDeepStrictEqual()\n\tShould fail after ${msToS(assertTimeout)} second(s)`);
        await checkError(async () => await assert.notDeepStrictEqual(async () => await delay("hello"), "helo", `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.notDeepStrictEqual()\n\tShould fail after ${msToS(timeout)} second(s)`);
    });
    it("Testing assert.notEqual with all possible signatures", async () => {
        console.log("\nTesting assert.notEqual with all possible signatures");
        await assert.notEqual(1, 2, "Should pass", timeout);
        await assert.notEqual({ n: 1 }, { n: 1 }, null, timeout);
        await assert.notEqual(async () => await delay("helo"), "hello", `Should pass after ${msToS(delayMs)} second(s)`);
        await assert.notEqual(() => "helloo", "hello");
        await checkError(async () => await assert.notEqual(1, 1, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.notEqual()\n\tShould fail after ${msToS(timeout)} second(s)`);
        await checkError(async () => await assert.notEqual(async () => await delay(true), true, `Should fail after ${msToS(assertTimeout)} second(s)`), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.notEqual()\n\tShould fail after ${msToS(assertTimeout)} second(s)`);
        await checkError(async () => await assert.notEqual(async () => await delay(1), 2, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.notEqual()\n\tShould fail after ${msToS(timeout)} second(s)`);
    });
    it("Testing assert.notStrictEqual with all possible signatures", async () => {
        console.log("\nTesting assert.notStrictEqual with all possible signatures");
        await assert.notStrictEqual(1, "1", "Should pass", timeout);
        await assert.notStrictEqual({ n: 1 }, { n: 1 }, null, timeout);
        await assert.notStrictEqual(async () => await delay("helo"), "hello", `Should pass after ${msToS(delayMs)} second(s)`);
        await assert.notStrictEqual(() => true, "true");
        await checkError(async () => await assert.notStrictEqual(1, 1, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.notStrictEqual()\n\tShould fail after ${msToS(timeout)} second(s)`);
        await checkError(async () => await assert.notStrictEqual(async () => await delay(true), true, `Should fail after ${msToS(assertTimeout)} second(s)`), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.notStrictEqual()\n\tShould fail after ${msToS(assertTimeout)} second(s)`);
        await checkError(async () => await assert.notStrictEqual(async () => await delay(1), 2, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.notStrictEqual()\n\tShould fail after ${msToS(timeout)} second(s)`);
    });
    it("Testing assert.ok with all possible signatures", async () => {
        console.log("\nTesting assert.ok with all possible signatures");
        await assert.ok(1, "Should pass", timeout);
        await assert.ok({ n: 1 }, null, timeout);
        await assert.ok(async () => await delay("helo"), `Should pass after ${msToS(delayMs)} second(s)`);
        await assert.ok(() => true);
        await checkError(async () => await assert.ok(null, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Should fail after ${msToS(timeout)} second(s)\n\tAssertion failed in assert.ok()`);
        await checkError(async () => await assert.ok(undefined, `Should fail after ${msToS(assertTimeout)} second(s)`), `AssertionError [ERR_ASSERTION]: Should fail after ${msToS(assertTimeout)} second(s)\n\tAssertion failed in assert.ok()`);
        await checkError(async () => await assert.ok(async () => await delay(true), `Should fail after ${msToS(timeout)} second(s)`, timeout), `PlaywrightTimeoutError: Wait timeout after ${timeout} ms\n\tAssertion failed in assert.ok()`);
    });
    it("Testing assert.rejects with all possible signatures", async () => {
        console.log("\nTesting assert.rejects with all possible signatures");
        await assert.rejects(() => Promise.reject("Some error"), /Some error/, "Should pass", timeout);
        await assert.rejects(async () => {
            await delay(true);
            return Promise.reject(new Error("Some error"));
        }, new Error("Some error"), `Should pass after ${msToS(delayMs)} second(s)`);
        await assert.rejects(async () => Promise.reject(new Error("Some error")), new Error("Some error"), null, timeout);
        await assert.rejects(async () => Promise.reject("Some error"), new Error("Should fail"), timeout);
        await assert.rejects(async () => Promise.reject("Some error"), /Some error/);
        await assert.rejects(async () => await delay(false), `Should pass ${msToS(delayMs)} second(s)`);
        await assert.rejects(async () => await Promise.reject(), null, timeout);
        await assert.rejects(async () => await Promise.reject());
        await checkError(async () => await assert.rejects(async () => {
            await delay(true);
            Promise.resolve("expected error");
        }, /expected error/, `Should fail after ${msToS(assertTimeout)} second(s)`), `AssertionError [ERR_ASSERTION]: Missing expected rejection: Should fail after ${msToS(assertTimeout)} second(s)\n\tAssertion failed in assert.rejects()`);
        await checkError(async () => await assert.rejects(() => Promise.reject("Some error"), /Some other error/, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Should fail after ${msToS(timeout)} second(s)\n\tAssertion failed in assert.rejects()`);
        await checkError(async () => await assert.rejects(async () => await delay(true), `Should fail after ${msToS(assertTimeout)} second(s)`), `AssertionError [ERR_ASSERTION]: Missing expected rejection: Should fail after ${msToS(assertTimeout)} second(s)\n\tAssertion failed in assert.rejects()`);
    });
    it("Testing assert.strictEqual with all possible signatures", async () => {
        console.log("\nTesting assert.strictEqual with all possible signatures");
        await assert.strictEqual(true, true, "Should pass", timeout);
        await assert.strictEqual(1, 1, null, timeout);
        await assert.strictEqual(async () => delay(2), 2, `Should pass after ${msToS(delayMs)} second(s)`);
        await assert.strictEqual("Hello", "Hello");
        await checkError(async () => await assert.strictEqual({ n: 1 }, { n: "1" }, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.strictEqual()\n\tShould fail after ${msToS(timeout)} second(s)`);
        await checkError(async () => await assert.strictEqual(true, false, `Should fail after ${msToS(assertTimeout)} second(s)`), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.strictEqual()\n\tShould fail after ${msToS(assertTimeout)} second(s)`);
        await checkError(async () => await assert.strictEqual(async () => await delay("hello"), "hello", `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Assertion failed in assert.strictEqual()\n\tShould fail after ${msToS(timeout)} second(s)`);
    });
    it("Testing assert.throws with all possible signatures", async () => {
        console.log("\nTesting assert.throws with all possible signatures");
        await assert.throws(() => {
            throw new Error("Some error");
        }, /Some error/, "Should pass", timeout);
        await assert.throws(() => {
            throw new Error("Some error");
        }, new Error("Some error"), `Should pass`);
        await assert.throws(() => {
            throw new Error("Some error");
        }, new Error("Some error"), null, timeout);
        await assert.throws(() => {
            throw new Error("Some error");
        }, new Error("Some error"), timeout);
        await assert.throws(() => {
            throw new Error("Some error");
        }, /Some error/);
        await assert.throws(() => {
            throw new Error("Some error");
        }, `Should pass`);
        await assert.throws(() => {
            throw new Error("Some error");
        }, null, timeout);
        await assert.throws(() => {
            throw new Error("Some error");
        });
        await checkError(async () => await assert.throws(() => true, `Should fail after ${msToS(assertTimeout)} second(s)`), `AssertionError [ERR_ASSERTION]: Missing expected exception: Should fail after ${msToS(assertTimeout)} second(s)\n\tAssertion failed in assert.throws()`);
        await checkError(async () => await assert.throws(() => {
            throw new Error("Some error");
        }, /Some other error/, `Should fail after ${msToS(timeout)} second(s)`, timeout), `AssertionError [ERR_ASSERTION]: Should fail after ${msToS(timeout)} second(s)\n\tAssertion failed in assert.throws()`);
    });
    afterEach(async function () {
        const currentTest = this.currentTest;
        testSupport.LogRetry(currentTest);
        if (currentTest.state === "failed") {
            await testSupport.GatherTestFailureDetails(currentTest, __filename);
        }
    });
});
//# sourceMappingURL=AssertTests.js.map