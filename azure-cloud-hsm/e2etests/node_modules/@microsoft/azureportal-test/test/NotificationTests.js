"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testFx = require("../src/Index");
const TestSupport_1 = require("./TestSupport");
var assert = testFx.Utils.Assert;
var String = testFx.Utils.String;
const testNotification = 'FxImpl.Hubs.Notifications.InternalClientNotification.internalPublish({ timestamp: 1642120757530, title: "{0}", description: "{1}", descriptionAsHtml: true, status: 0 });';
const expectedTitle = "A Test Notification";
const expectedDescription = "This notification is for testing";
// Creates a barebones client-side notification for testing. Make sure you navigated to the portal before using this.
async function generateTestNotification(title, description) {
    const testNotificationFormatted = String.format(testNotification, title, description);
    await testFx.portal.executeScript(testNotificationFormatted);
}
describe("Notification Tests", function () {
    this.timeout(0);
    const testSupport = new TestSupport_1.default(this);
    before(() => {
        testSupport.initializePortalContext();
        testFx.portal.portalContext.testExtensions = null;
    });
    it("Can Wait For A Notification by Title", async () => {
        await testFx.portal.goHome();
        const notificationsPane = await testFx.portal.openNotificationsPane();
        await testFx.portal.wait(() => !!notificationsPane);
        await generateTestNotification(expectedTitle, expectedDescription);
        await notificationsPane.waitForNewNotification(expectedTitle, null, 10000);
        await testFx.portal.element(testFx.TopBar).clickNotifications();
    });
    it("Can Wait For A Notification By Description", async () => {
        await testFx.portal.goHome();
        const notificationsPane = await testFx.portal.openNotificationsPane();
        await testFx.portal.wait(() => !!notificationsPane);
        await generateTestNotification(expectedTitle, expectedDescription);
        await notificationsPane.waitForNewNotification(null, expectedDescription, 10000);
        await testFx.portal.element(testFx.TopBar).clickNotifications();
    });
    it("Can Wait For A Notification By Title and Description", async () => {
        await testFx.portal.goHome();
        const notificationsPane = await testFx.portal.openNotificationsPane();
        await testFx.portal.wait(() => !!notificationsPane);
        await generateTestNotification(expectedTitle, expectedDescription);
        const notification = await notificationsPane.waitForNewNotification(expectedTitle, expectedDescription, 10000);
        const notificationInfo = await Promise.all([notification.title.getText(), notification.description.getText()]);
        const title = notificationInfo[0];
        const description = notificationInfo[1];
        await assert.strictEqual(title, expectedTitle, "Title does not match.");
        await assert.strictEqual(description, expectedDescription, "Description does not match.");
        await testFx.portal.element(testFx.TopBar).clickNotifications();
    });
    afterEach(async function () {
        const currentTest = this.currentTest;
        testSupport.LogRetry(currentTest);
        if (currentTest.state === "failed") {
            await testSupport.GatherTestFailureDetails(currentTest, __filename);
        }
        await testFx.portal.quit();
    });
});
//# sourceMappingURL=NotificationTests.js.map