"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TestSupport_1 = require("./TestSupport");
const testFx = require("../src/Index");
const extensionResources = require("./ExtensionResources");
var assert = testFx.Utils.Assert;
describe("Collection Summary Part Tests", function () {
    const testSupport = new TestSupport_1.default(this);
    this.timeout(0);
    before(() => {
        testSupport.initializePortalContext();
    });
    //parts#collectionSummaryPart
    it("Can get summary title", async () => {
        const collectionSummaryBlade = testFx.portal.blade({ title: "Collection summary" });
        await testFx.portal.navigateToUriFragment("blade/SamplesExtension/CollectionSummaryPartIntrinsicInstructions");
        await testFx.portal.wait(() => collectionSummaryBlade.waitUntilBladeAndAllTilesLoaded());
        const collectionSummaryPart = collectionSummaryBlade.element(testFx.Parts.CollectionSummaryPart);
        await assert.equal(async () => await collectionSummaryPart.getTitle(), extensionResources.samplesExtensionStrings.Robots, "expected title is Robots");
    }); //parts#collectionSummaryPart
    afterEach(async function () {
        const currentTest = this.currentTest;
        testSupport.LogRetry(currentTest);
        if (currentTest.state === "failed") {
            await testSupport.GatherTestFailureDetails(currentTest, __filename);
        }
        await testFx.portal.quit();
    });
});
//# sourceMappingURL=CollectionSummaryPartTests.js.map