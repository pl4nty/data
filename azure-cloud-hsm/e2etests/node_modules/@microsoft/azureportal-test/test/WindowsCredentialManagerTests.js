"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nconf = require("nconf");
const testFx = require("../src/Index");
const TestSupport_1 = require("./TestSupport");
var assert = testFx.Utils.Assert;
describe("Windows Credential Manager Tests", function () {
    this.timeout(0);
    const testSupport = new TestSupport_1.default(this);
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    const spawn = require("child_process").spawnSync;
    const targetNames = new Array();
    before(() => {
        testSupport.initializePortalContext();
    });
    beforeEach(async function () {
        await testFx.portal.openBrowser();
    });
    it("Can read from Windows Credential Manager", async () => {
        const targetName = Date.now();
        const uname = targetName + 1;
        const pwd = uname + 1;
        targetNames.push(targetName.toString());
        const cmdkeyAddResult = spawn("cmdkey", [`/generic:${targetName}`, `/user:${uname}`, `/pass:${pwd}`]);
        if (!cmdkeyAddResult.error) {
            const getResult = testFx.Utils.WindowsCredentialManager.getWindowsCredentialSync(targetName.toString());
            await assert.equal(getResult.TargetName, targetName, `targetName returned from Windows Credential Manager not as expected: ${getResult.TargetName} vs ${targetName}`);
            await assert.equal(getResult.UserName, uname, `userName returned from Windows Credential Manager not as expected: ${getResult.UserName} vs ${uname}`);
            await assert.equal(getResult.CredentialBlob, pwd, `credentialBlob returned from Windows Credential Manager not as expected: ${getResult.CredentialBlob} vs ${pwd}`);
        }
        else {
            await assert.ok(false, "unable to set key error " + JSON.stringify(cmdkeyAddResult.error));
        }
    });
    it("Can read from Windows Credential Manager asynchronously", async () => {
        const targetName = Date.now();
        const uname = targetName + 1;
        const pwd = uname + 1;
        targetNames.push(targetName.toString());
        const cmdkeyAddResult = spawn("cmdkey", [`/generic:${targetName}`, `/user:${uname}`, `/pass:${pwd}`]);
        if (!cmdkeyAddResult.error) {
            const getResult = await testFx.Utils.WindowsCredentialManager.getWindowsCredential(targetName.toString());
            await assert.equal(getResult.TargetName, targetName, `targetName returned from Windows Credential Manager not as expected: ${getResult.TargetName} vs ${targetName}`);
            await assert.equal(getResult.UserName, uname, `userName returned from Windows Credential Manager not as expected: ${getResult.UserName} vs ${uname}`);
            await assert.equal(getResult.CredentialBlob, pwd, `credentialBlob returned from Windows Credential Manager not as expected: ${getResult.CredentialBlob} vs ${pwd}`);
        }
        else {
            await assert.ok(false, "unable to set key error " + JSON.stringify(cmdkeyAddResult.error));
        }
    });
    it("Can read from Windows Credential Manager via NConfWindowsCredentialManager", async () => {
        //standard configuration for nconf argv fallback to env fallback to file
        nconf
            .argv()
            .env()
            .file(__dirname + "/config.json");
        //now specify next fallback to windows crendential manager
        nconf[testFx.Utils.NConfWindowsCredentialManager.ProviderName] = testFx.Utils.NConfWindowsCredentialManager;
        nconf.use(testFx.Utils.NConfWindowsCredentialManager.ProviderName);
        //set a value in credential manager with targetName
        const targetName = Date.now().toString();
        targetNames.push(targetName);
        const uname = "CredentialManagerUserName";
        const pwd = "CredentialManagerPassword";
        const cmdkeyAddResult = spawn("cmdkey", [`/generic:${targetName}`, `/user:${uname}`, `/pass:${pwd}`]);
        if (!cmdkeyAddResult.error) {
            await assert.equal(nconf.get(targetName), pwd, "expected nconf.get returns the targetName from windows credential manager");
        }
        else {
            await assert.ok(false, "unable to set key error " + JSON.stringify(cmdkeyAddResult.error));
        }
    });
    afterEach(async function () {
        const currentTest = this.currentTest;
        testSupport.LogRetry(currentTest);
        if (currentTest.state === "failed") {
            await testSupport.GatherTestFailureDetails(currentTest, __filename);
        }
        await testFx.portal.quit();
    });
    after(() => {
        targetNames.forEach((targetName) => {
            spawn("cmdkey", [`/delete:${targetName}`]);
        });
    });
});
//# sourceMappingURL=WindowsCredentialManagerTests.js.map