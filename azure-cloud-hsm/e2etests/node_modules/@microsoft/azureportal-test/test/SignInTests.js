"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TestSupport_1 = require("./TestSupport");
const testFx = require("../src/Index");
var assert = testFx.Utils.Assert;
describe("SignIn Tests", function () {
    this.timeout(0);
    const testSupport = new TestSupport_1.default(this);
    before(() => {
        testSupport.initializePortalContext();
        testFx.portal.portalContext.testExtensions = null;
    });
    it(`Regular signin and signin silent auth`, async () => {
        // Setting useSilentAuthLogin to "true" so test framework saves authentication token
        // during the first sign in with credentials and uses that token to authenticate
        // into Portal during the second sign in.
        testFx.portal.portalContext.useSilentAuthLogin = true;
        console.log("Signing into Portal using test credentials to retrieve auth token...");
        await testFx.portal.goHome();
        await testFx.portal.quit();
        testFx.portal.portalContext.signInEmail = null;
        testFx.portal.portalContext.signInPassword = null;
        console.log("Signing into Portal via silent auth...");
        try {
            await testFx.portal.goHome();
        }
        catch (e) {
            const errorMessage = e?.message ?? "";
            const isAutoSignInFailed = /The portalContext\.signIn(?:Email|Password) must be provided!/.test(errorMessage);
            const isManualSignInFailed = errorMessage.includes(`Splash screen did not appear after ${testFx.portal.portalContext.manualSignInTimeout} ms.`);
            const isSilentAuthFailed = isAutoSignInFailed || isManualSignInFailed;
            if (isSilentAuthFailed) {
                throw new Error(`Couldn't perform silent auth and tried falling back to regular sign-in.\n
                                Please, make sure that silent auth flow performs as expected on the Portal side.`);
            }
            else {
                throw e;
            }
        }
        await assert.ok(!!testFx.portal.portalContext.silentAuthConfig, "Silent auth configuration is not set");
        await assert.ok(!!testFx.portal.portalContext.silentAuthConfig.portalAuthUrl, "Silent auth configuration portalAuthUrl is not set");
        await assert.ok(!!testFx.portal.portalContext.silentAuthConfig.portalId, "Silent auth configuration portalId is not set");
    });
    afterEach(async function () {
        testFx.portal.portalContext.silentAuthConfig = null;
        const currentTest = this.currentTest;
        testSupport.LogRetry(currentTest);
        if (currentTest.state === "failed") {
            await testSupport.GatherTestFailureDetails(currentTest, __filename);
        }
        await testFx.portal.quit();
    });
});
//# sourceMappingURL=SignInTests.js.map