"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testFx = require("../../src/Index");
var By = testFx.Locators.By;
const resources = require("../ExtensionResources");
var TextField = testFx.Controls.TextField;
var GroupDropDown = testFx.Controls.GroupDropDownField;
var ResourceGroupDropDown = testFx.Controls.ResourceGroupDropDownField;
const Controls_1 = require("../../src/Controls");
const BrowserAutomation_1 = require("../../src/BrowserAutomation");
var assert = testFx.Utils.Assert;
const buttonClass = "fxc-simplebutton";
const tabClass = "fxc-tabs-menu-content";
class CreateEngineBlade extends testFx.Blades.Blade {
    get displacement() {
        return this.field(GroupDropDown, { label: resources.samplesExtensionStrings.Engine.displacement });
    }
    get resourceGroup() {
        return this.field(ResourceGroupDropDown, { label: resources.resourceGroup });
    }
    get subscription() {
        return this.field(GroupDropDown, { label: resources.subscription });
    }
    get location() {
        return this.field(GroupDropDown, { label: resources.locationLabel });
    }
    get specPicker() {
        return this.field(GroupDropDown, { label: resources.samplesExtensionStrings.Engine.pricingTier });
    }
    get primaryEngine() {
        return this.field(TextField, { label: resources.samplesExtensionStrings.Engine.primaryEngineName });
    }
    get secondaryEngine() {
        return this.field(TextField, { label: resources.samplesExtensionStrings.Engine.secondaryEngineName });
    }
    get backupEngine() {
        return this.field(TextField, { label: resources.samplesExtensionStrings.Engine.backupEngineName });
    }
    get password() {
        return this.field(Controls_1.PasswordField, { label: resources.samplesExtensionStrings.Engine.password });
    }
    /**
     * Button to review and create the resource
     */
    get reviewAndCreateButton() {
        return this.element(By.chained(By.className(buttonClass), By.textContains("Review +")));
    }
    /**
     * Button to create the resource
     */
    get createButton() {
        return this.element(By.chained(By.className(buttonClass), By.textContains("Create")));
    }
    /**
     * Button to go to previous step
     */
    get previousButton() {
        return this.element(By.chained(By.className(buttonClass), By.textContains("Previous :")));
    }
    /**
     * Button to go to next step
     */
    get nextButton() {
        return this.element(By.chained(By.className(buttonClass), By.textContains("Next :")));
    }
    /**
     * Locator to find the blade
     */
    get locator() {
        return By.content(super.buildLocator({ title: resources.samplesExtensionStrings.Engine.createEngine }));
    }
    async checkFieldValidation() {
        await this.waitUntilBladeAndAllTilesLoaded();
        await testFx.portal.wait(async () => {
            const options = await this.location.getOptions();
            return options.length;
        });
        //create#getValidationState
        //click the createButton on the create blade to fire validation
        await this.createButton.click();
        //get the validation state of the control
        this.element(By.chained(By.className("fxs-blade-statusbg"), By.className("fxs-bg-error")));
        await this.element(By.className(tabClass)).click();
        //assert state matches expected
        await assert.equal(async () => await this.primaryEngine.getValidationState(), testFx.Constants.ControlValidationState.invalid, "name should have invalid state");
        //create#getValidationState
    }
    async fillRequiredFields(nameTxt, displacement, model, subscription, resourceGroup, location) {
        console.log("Filling in the required fields to Create and Engine");
        await this.waitUntilBladeAndAllTilesLoaded();
        //create#waitOnValidationState
        //change the value to initiate validation
        await this.element(By.className(tabClass)).click();
        const tabKey = (0, BrowserAutomation_1.getBrowser)().Key.TAB;
        await this.primaryEngine.sendKeys(nameTxt, tabKey);
        //wait for the control to reach the valid state
        await this.primaryEngine.waitOnValidationState(testFx.Constants.ControlValidationState.valid); //create#waitOnValidationState
        await this.displacement.selectOptionByText(displacement);
        await this.subscription.selectOptionByText(subscription);
        await this.resourceGroup.setNewResourceGroup(resourceGroup);
        await this.location.selectOptionByText(location);
        await this.specPicker.selectOptionByText("B2 (2 Cores, 3.5 GB RAM)");
        await this.nextButton.click();
        await this.secondaryEngine.sendKeys("stuff");
        await this.backupEngine.sendKeys("stuffAgain");
        await this.password.sendKeys("otherStuffAgain");
        return this;
    }
}
exports.default = CreateEngineBlade;
//# sourceMappingURL=CreateEngineBlade.js.map