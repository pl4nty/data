"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testFx = require("../src/Index");
const TestSupport_1 = require("./TestSupport");
const ExtensionResources_1 = require("./ExtensionResources");
var By = testFx.Locators.By;
var Part = testFx.Parts.Part;
var ReactView = testFx.Views.ReactView;
var executeInActiveReactView = testFx.Utils.ReactView.executeInActiveReactView;
var assert = testFx.Utils.Assert;
const createCustomRobotReactViewStrings = ExtensionResources_1.samplesExtensionStrings.CreateCustomRobotReactView;
const createExperienceReactViewStrings = ExtensionResources_1.samplesExtensionStrings.CreateExperienceReactView;
const helloWorldReactViewStrings = ExtensionResources_1.samplesExtensionStrings.HelloWorldReactView;
const notFoundReactViewStrings = ExtensionResources_1.samplesExtensionStrings.NotFoundReactView;
const opensViewReactViewStrings = ExtensionResources_1.samplesExtensionStrings.OpensViewReactView;
const opensContextPaneReactViewStrings = ExtensionResources_1.samplesExtensionStrings.OpensContextPaneReactView;
const pinnableReactViewStrings = ExtensionResources_1.samplesExtensionStrings.PinnableReactView;
describe("ReactView Tests", function () {
    this.timeout(0);
    const testSupport = new TestSupport_1.default(this);
    before(() => {
        testSupport.initializePortalContext();
    });
    describe("executeInActiveReactView tests", () => {
        it("Can execute function within active ReactView", async () => {
            await testFx.portal.openView("blade/SamplesExtension/HelloWorld.ReactView", helloWorldReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            await executeInActiveReactView(async () => {
                await assert.strictEqual(await testFx.portal.element(By.id("root")).getText(), helloWorldReactViewStrings.root);
            });
        });
        it("Can execute function within active ReactView when there are multiple ReactViews", async () => {
            await testFx.portal.openView("blade/SamplesExtension/OpensView.ReactView", opensViewReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            await executeInActiveReactView(async () => {
                const linkElem = testFx.portal.element(By.linkText(opensViewReactViewStrings.helloWorldLink));
                await linkElem.click();
            });
            await testFx.portal
                .view({ title: helloWorldReactViewStrings.title, viewType: ReactView })
                .waitUntilLoaded();
            await executeInActiveReactView(async () => {
                await assert.strictEqual(await testFx.portal.element(By.id("root")).getText(), helloWorldReactViewStrings.root);
            });
        });
        it("Can execute function within active ReactView context pane", async () => {
            await testFx.portal.openView("blade/SamplesExtension/OpensContextPane.ReactView", opensContextPaneReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            await executeInActiveReactView(async () => {
                const linkElem = testFx.portal.element(By.linkText(opensContextPaneReactViewStrings.contextPaneLink));
                await linkElem.click();
            });
            await testFx.portal
                .view({ title: helloWorldReactViewStrings.title, viewType: ReactView })
                .waitUntilLoaded();
            await executeInActiveReactView(async () => {
                await assert.strictEqual(await testFx.portal.element(By.id("root")).getText(), helloWorldReactViewStrings.root);
            });
        });
    });
    describe("Element tests", () => {
        it("Can apply action on ReactView elements", async () => {
            const reactView = await testFx.portal.openView("blade/SamplesExtension/HelloWorld.ReactView", helloWorldReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            const elem = await reactView.find(By.id("root"));
            await assert.strictEqual(await elem.getText(), helloWorldReactViewStrings.root);
        });
        it("Can apply action on elements from multiple ReactViews", async () => {
            const rootLocator = By.id("root");
            const reactView = await testFx.portal.openView("blade/SamplesExtension/OpensView.ReactView", opensViewReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            const linkElem = await reactView.find(By.linkText(opensViewReactViewStrings.helloWorldLink));
            await linkElem.click();
            const childReactView = testFx.portal.view({ title: helloWorldReactViewStrings.title, viewType: ReactView });
            await childReactView.waitUntilLoaded();
            const childRootElem = await childReactView.find(rootLocator);
            await assert.strictEqual(await childRootElem.getText(), helloWorldReactViewStrings.root);
        });
        it("Can click", async () => {
            const reactView = await testFx.portal.openView("blade/SamplesExtension/OpensView.ReactView", opensViewReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            const linkElem = await reactView.find(By.linkText(opensViewReactViewStrings.helloWorldLink));
            await linkElem.click();
            const childReactView = testFx.portal.view({ title: helloWorldReactViewStrings.title, viewType: ReactView });
            await childReactView.waitUntilLoaded();
        });
        it("Can get tag name", async () => {
            const reactView = await testFx.portal.openView("blade/SamplesExtension/OpensView.ReactView", opensViewReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            const rootElem = await reactView.find(By.id("root"));
            const linkElem = await reactView.find(By.linkText(opensViewReactViewStrings.helloWorldLink));
            await assert.strictEqual(await rootElem.getTagName(), "div");
            await assert.strictEqual(await linkElem.getTagName(), "a");
        });
        it("Can perform attribute related actions", async () => {
            const portalUrl = new URL(testFx.portal.portalContext.portalUrl).origin;
            const reactView = await testFx.portal.openView("blade/SamplesExtension/OpensView.ReactView", opensViewReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            const linkTextElem = await reactView.find(By.linkText(opensViewReactViewStrings.helloWorldLink));
            await assert.strictEqual(await linkTextElem.getAttribute("href"), `${portalUrl}/#blade/SamplesExtension/HelloWorld.ReactView`);
            await assert.strictEqual(await linkTextElem.hasAttributeValue("class", "ms-Link"), true);
            await assert.strictEqual(await linkTextElem.hasAttributeValue("class", "not-found"), false);
            await assert.strictEqual(await linkTextElem.doesNotHaveAttributeValue("class", "not-found"), true);
            await assert.strictEqual(await linkTextElem.doesNotHaveAttributeValue("class", "ms-Link"), false);
        });
        it("Can perform has class checks", async () => {
            const reactView = await testFx.portal.openView("blade/SamplesExtension/OpensView.ReactView", opensViewReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            const linkElem = await reactView.find(By.linkText(opensViewReactViewStrings.helloWorldLink));
            await assert.strictEqual(await linkElem.hasClass("ms-Link"), true);
            await assert.strictEqual(await linkElem.hasClass("not-found"), false);
        });
        it("Can sendKey and clear", async () => {
            const reactView = await testFx.portal.openView("blade/SamplesExtension/CreateCustomRobot.ReactView", createCustomRobotReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            const nameTextField = await reactView.find(By.className("ms-TextField"));
            const nameTextFieldInput = nameTextField.element(By.tagName("input"));
            await nameTextFieldInput.sendKeys("test");
            await assert.strictEqual(await nameTextFieldInput.getAttribute("value"), "test");
            const Key = testFx.BrowserAutomation.getBrowser().Key;
            await nameTextFieldInput.sendKeys(Key.CONTROL, "a", Key.DELETE);
            await assert.strictEqual(await nameTextFieldInput.getAttribute("value"), "");
        });
        it("Can get web elements", async () => {
            const reactView = await testFx.portal.openView("blade/SamplesExtension/OpensView.ReactView", opensViewReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            const linkElem = await reactView.find(By.linkText(opensViewReactViewStrings.helloWorldLink));
            await assert.ok(await linkElem.getWebElements());
        });
        it("Can perform presence checks", async () => {
            const reactView = await testFx.portal.openView("blade/SamplesExtension/OpensView.ReactView", opensViewReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            const rootElem = await reactView.find(By.id("root"));
            const linkElem = await reactView.find(By.linkText(opensViewReactViewStrings.helloWorldLink));
            const notFoundElem = await reactView.find(By.id("not-found"));
            await assert.strictEqual(await linkElem.isPresent(), true);
            await assert.strictEqual(await notFoundElem.isPresent(), false);
            await assert.strictEqual(await linkElem.isNotPresent(), false);
            await assert.strictEqual(await notFoundElem.isNotPresent(), true);
            await assert.strictEqual(await rootElem.isElementPresent(By.linkText(opensViewReactViewStrings.helloWorldLink)), true);
            await assert.strictEqual(await rootElem.isElementPresent(By.id("__bladeCommandBar")), false);
        });
        it("Can perform displayed checks", async () => {
            const reactView = await testFx.portal.openView("blade/SamplesExtension/OpensView.ReactView", opensViewReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            const devtoolsElem = await reactView.find(By.id("react-perftools"));
            const linkElem = await reactView.find(By.linkText(opensViewReactViewStrings.helloWorldLink));
            await assert.strictEqual(await linkElem.isDisplayed(), true);
            await assert.strictEqual(await devtoolsElem.isDisplayed(), false);
            await assert.strictEqual(await linkElem.isNotDisplayed(), false);
            await assert.strictEqual(await devtoolsElem.isNotDisplayed(), true);
        });
        it("Can get ancestor", async () => {
            const reactView = await testFx.portal.openView("blade/SamplesExtension/OpensView.ReactView", opensViewReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            const linkElem = await reactView.find(By.linkText(opensViewReactViewStrings.helloWorldLink));
            const skipLevelElem = await linkElem.getAncestor(async (element) => (await element.getAttribute("id")) === "root");
            await assert.strictEqual(await skipLevelElem.getTagName(), "div");
            await assert.strictEqual(await skipLevelElem.hasAttributeValue("id", "root"), true);
        });
        it("Can try find element", async () => {
            const reactView = await testFx.portal.openView("blade/SamplesExtension/OpensView.ReactView", opensViewReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            const rootElem = await reactView.find(By.id("root"));
            const linkElem = rootElem.tryFindElement(By.linkText(opensViewReactViewStrings.helloWorldLink));
            await assert.strictEqual(await linkElem.hasClass("ms-Link"), true);
        });
    });
    describe("View tests", () => {
        it("Can find all React elements", async () => {
            const reactView = await testFx.portal.openView("blade/SamplesExtension/CreateCustomRobot.ReactView", createCustomRobotReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            const textFields = await reactView.findAll(By.className("ms-TextField"));
            await assert.strictEqual(textFields.length, 3);
        });
        it("Can get title", async () => {
            const reactView = await testFx.portal.openView("blade/SamplesExtension/HelloWorld.ReactView", helloWorldReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            await assert.strictEqual(await reactView.getTitle(), helloWorldReactViewStrings.title);
        });
        it("Can get subtitle", async () => {
            const reactView = await testFx.portal.openView("blade/SamplesExtension/CreateExperience.ReactView", createExperienceReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            await assert.strictEqual(await reactView.getSubtitle(), createExperienceReactViewStrings.subtitle);
        });
        it("Can perform error checks and retrieve error text", async () => {
            const defaultReactView = await testFx.portal.openView("blade/SamplesExtension/HelloWorld.ReactView", helloWorldReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            await assert.strictEqual(await defaultReactView.hasError(), false);
            await assert.strictEqual(await defaultReactView.getErrorText(), null);
            const notFoundReactView = await testFx.portal.openView("blade/SamplesExtension/NotFound.ReactView", notFoundReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            await assert.strictEqual(await notFoundReactView.hasError(), true);
            await assert.strictEqual(await notFoundReactView.getErrorText(), notFoundReactViewStrings.error);
        });
        it("Can reference ReactView by subtitle", async () => {
            await testFx.portal.openView("blade/SamplesExtension/CreateExperience.ReactView", createExperienceReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            const reactView = testFx.portal.view({
                subTitle: createExperienceReactViewStrings.subtitle,
                viewType: ReactView,
            });
            await assert.ok(reactView);
            await assert.strictEqual(await reactView.getTitle(), createExperienceReactViewStrings.title);
        });
        it("Can close", async () => {
            const reactView = await testFx.portal.openView("blade/SamplesExtension/HelloWorld.ReactView", helloWorldReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            await reactView.clickClose();
            await testFx.portal.wait(async () => !(await reactView.isPresent()), null, "The view didn't close");
        });
        it("Can pin to dashboard", async () => {
            testFx.portal.portalContext.features.push({
                name: "exp.AzurePortal_DashboardSaveExperience",
                value: "false",
            });
            testFx.portal.portalContext.features.push({ name: "exp.ReactViewPinningV1", value: "false" }); // TODO 28024347: Update test to use new ReactView pinning
            testFx.portal.portalContext.features.push({ name: "exp.ReactViewPinningV2", value: "false" });
            const dashboard = await testFx.portal.openDashboard();
            await dashboard.reset();
            const reactView = await testFx.portal.openView("blade/SamplesExtension/Pinnable.ReactView", pinnableReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            await reactView.pinToDashboard();
            await reactView.clickClose();
            await dashboard.findSinglePartByTitle(Part, pinnableReactViewStrings.pinTitle);
            await dashboard.reset();
        });
        it("Can run accessibility check", async () => {
            const reactView = await testFx.portal.openView("blade/SamplesExtension/OpensView.ReactView", opensViewReactViewStrings.title, ReactView, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
            await reactView.ensureAccessibilityIsAxeCoreClean();
        });
    });
    afterEach(async function () {
        const currentTest = this.currentTest;
        testSupport.LogRetry(currentTest);
        if (currentTest.state === "failed") {
            await testSupport.GatherTestFailureDetails(currentTest, __filename);
        }
        await testFx.portal.quit();
    });
});
//# sourceMappingURL=ReactViewTests.js.map