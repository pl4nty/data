"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testFx = require("../src/Index");
const TestSupport_1 = require("./TestSupport");
var assert = testFx.Utils.Assert;
var MultiLineTextBox = testFx.Controls.MultiLineTextField;
describe("MultiLineTextBox Tests", function () {
    this.timeout(0);
    const testSupport = new TestSupport_1.default(this);
    before(() => {
        testSupport.initializePortalContext();
    });
    it("Can Find MultiLineTextBox", async () => {
        await testFx.portal.navigateToUriFragment("blade/SamplesExtension/MultiLineTextBoxBlade", 70000);
        const multiLineTextBoxBlade = testFx.portal.blade({ title: "MultiLineTextBox" });
        await multiLineTextBoxBlade.waitUntilBladeAndAllTilesLoaded();
        const sampleMultiLineTextBox = multiLineTextBoxBlade.element(MultiLineTextBox);
        //MultiLineTextBox#locator
        const locator = sampleMultiLineTextBox.locator;
        const placeHolderText = "PlaceHolder text goes here";
        const sampleValue = "sample value works";
        const placeholderValueOnInit = await testFx.portal.wait(async () => {
            //MultiLineTextBox#placeholder
            const placeholder = await sampleMultiLineTextBox.placeholderValue();
            return placeholder;
        });
        await sampleMultiLineTextBox.setText(sampleValue);
        const updatedValue = await testFx.portal.wait(async () => {
            //MultiLineTextBox#value
            const sampleMultiLineTextBoxValueNow = await sampleMultiLineTextBox.value();
            return sampleMultiLineTextBoxValueNow;
        });
        await assert.ok(!!locator, "locator works");
        await assert.ok(placeHolderText === placeholderValueOnInit, "sample multiLineTextBox placeholder value matches expectations on blade init");
        await assert.ok(sampleValue === updatedValue, "multiLineTextBox value can be correctly updated");
    });
    afterEach(async function () {
        const currentTest = this.currentTest;
        testSupport.LogRetry(currentTest);
        if (currentTest.state === "failed") {
            await testSupport.GatherTestFailureDetails(currentTest, __filename);
        }
        await testFx.portal.quit();
    });
});
//# sourceMappingURL=MultiLineTextBoxTests.js.map