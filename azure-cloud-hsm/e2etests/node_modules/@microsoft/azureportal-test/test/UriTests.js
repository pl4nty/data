"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TestSupport_1 = require("./TestSupport");
const testFx = require("../src/Index");
const UriBuilder = require("../src/Utils/UriBuilder");
var assert = testFx.Utils.Assert;
describe("Uri Tests", function () {
    this.timeout(0);
    const testSupport = new TestSupport_1.default(this);
    before(() => {
        testSupport.initializePortalContext();
        testFx.portal.portalContext.testExtensions = null;
    });
    it("Re-navigating home doesn't break the url", async () => {
        await testFx.portal.goHome();
        const initialUrl = await testFx.portal.getCurrentUrl();
        console.log("Navigating home again to check that UriBuilder generated url correctly.");
        await testFx.portal.goHome();
        const currentUrl = await testFx.portal.getCurrentUrl();
        await assert.ok(currentUrl === initialUrl, `Urls didn't match. Inital url: '${initialUrl}'. Current url: '${currentUrl}'.`);
    });
    it("Can add and remove query parameters", async () => {
        const expectedUrl = (query) => {
            let queryString = "";
            Object.keys(query).forEach((key) => (queryString += `&${key}=${query[key]}`));
            queryString = queryString.slice(1);
            return `${portalUrl}?${queryString}`;
        };
        console.log("Creating uri builder object using portal url set in portal configuration manager");
        const portalUrl = testFx.PortalConfigurationManager.default.portalContext.portalUrl;
        const uriBuilder = new UriBuilder.UriBuilder(portalUrl);
        let generatedUrl = uriBuilder.toString();
        await testFx.portal.openBrowser();
        await assert.strictEqual(generatedUrl, portalUrl, `Url generated by uri builder did not match the original portal url.`);
        let testParameters = {
            querykey1: "queryvalue1",
            querykey2: "queryvalue2",
            querykey3: "queryvalue3",
        };
        console.log("Trying to get non-existent parameters from uri query");
        let currentParameters = uriBuilder.query.getParameters();
        await assert.ok(!Object.keys(currentParameters).some((currParam) => Object.keys(testParameters).some((testParam) => currParam === testParam)), `Found non-existent parameters in uri query.`);
        console.log("Adding new parameters to uri query");
        uriBuilder.query.setParameters(testParameters);
        currentParameters = uriBuilder.query.getParameters();
        await assert.strictEqual(JSON.stringify(currentParameters), JSON.stringify(testParameters), `Actual query didn't match expected after adding new query parameters.`);
        generatedUrl = uriBuilder.toString();
        await assert.strictEqual(generatedUrl, expectedUrl(testParameters), `Url generated by uri builder did not match the expected url after adding new query parameters.`);
        console.log("Removing some of the parameters from uri query");
        uriBuilder.query.removeParameters(["querykey1", "querykey3"]);
        testParameters = { querykey2: "queryvalue2" };
        currentParameters = uriBuilder.query.getParameters();
        await assert.strictEqual(JSON.stringify(currentParameters), JSON.stringify(testParameters), `Actual query didn't match expected after removing some query parameters.`);
        generatedUrl = uriBuilder.toString();
        await assert.strictEqual(generatedUrl, expectedUrl(testParameters), `Url generated by uri builder did not match the expected url after removing some query parameters.`);
    });
    afterEach(async function () {
        const currentTest = this.currentTest;
        testSupport.LogRetry(currentTest);
        if (currentTest.state === "failed") {
            await testSupport.GatherTestFailureDetails(currentTest, __filename);
        }
        await testFx.portal.quit();
    });
});
//# sourceMappingURL=UriTests.js.map