"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const QuickStartBlade_1 = require("../src/Blades/QuickStartBlade");
const ExpectedConditions = require("../src/ExpectedConditions");
const testFx = require("../src/Index");
const guid = require("../src/Utils/Guid");
const TestSupport_1 = require("./TestSupport");
describe("Part Tests", function () {
    this.timeout(0);
    const testSupport = new TestSupport_1.default(this);
    const config = testFx.PortalConfigurationManager.default.portalContext;
    const locationId = config.locationId;
    const resourcePrefix = testSupport.testResourcePrefix;
    const resourceGroupName = resourcePrefix + guid.newGuid();
    const resourceProvider = "Providers.Test";
    const resourceType = "statefulIbizaEngines";
    const resourceProviderApiVersion = "2014-04-01"; //"2015-06-01";
    before(async () => {
        testSupport.initializePortalContext();
        await testSupport.initializeArmClient();
        await testSupport.armClient.createResourceGroup(resourceGroupName, locationId);
    });
    // Bug 28233868: Quarantined test: msportalfx-test "Can deep link to the QuickStart Blade"
    it.skip("Can deep link to the QuickStart Blade", async () => {
        //blades#deepLinkQSBlade
        const resourceName = resourcePrefix + guid.newGuid();
        const createOptions = {
            name: resourceName,
            resourceGroup: resourceGroupName,
            location: locationId,
            resourceProvider: resourceProvider,
            resourceType: resourceType,
            resourceProviderApiVersion: resourceProviderApiVersion,
            properties: {
                displacement: "600cc",
                model: "type1",
                status: 0,
            },
        };
        const resourceId = await testSupport.armClient.createResource(createOptions);
        //form deep link to the quickstart blade
        await testFx.portal.navigateToUriFragment(`blade/SamplesExtension/EngineQuickStartBlade/id/${encodeURIComponent(resourceId)}`, testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout);
        return testFx.portal.wait(ExpectedConditions.isPresent(testFx.portal.blade({ title: resourceId, bladeType: QuickStartBlade_1.default })), testFx.PortalConfigurationManager.default.portalContext.timeouts.longTimeout, "Quickstart blade was not found.");
        //blades#deepLinkQSBlade
    });
    afterEach(async function () {
        const currentTest = this.currentTest;
        testSupport.LogRetry(currentTest);
        if (currentTest.state === "failed") {
            await testSupport.GatherTestFailureDetails(currentTest, __filename);
        }
    });
    after(() => {
        return testFx.portal.quit().finally(() => {
            return testSupport.armClient.deleteResourceGroup(resourceGroupName);
        });
    });
});
//# sourceMappingURL=PartTests.js.map