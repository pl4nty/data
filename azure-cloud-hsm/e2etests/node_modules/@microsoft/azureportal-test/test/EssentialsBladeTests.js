"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TestSupport_1 = require("./TestSupport");
const testFx = require("../src/Index");
const BladeOpener_1 = require("../src/Utils/BladeOpener");
const EssentialsBlade_1 = require("./Blades/EssentialsBlade");
const resources = require("./ExtensionResources");
var assert = testFx.Utils.Assert;
const essentialsBladeTitle = resources.samplesExtensionStrings.EssentialsBlade.title;
const essentialsUriFragment = "DefaultEssentials";
const waitTime = 70000;
describe("Essentials Blade Tests", function () {
    this.timeout(0);
    const testSupport = new TestSupport_1.default(this);
    before(() => {
        testSupport.initializePortalContext();
    });
    it("Can render basic properties", async () => {
        //Essentials#checkEssentials
        try {
            const blade = await BladeOpener_1.default.openSamplesExtensionBlade(essentialsBladeTitle, essentialsUriFragment, EssentialsBlade_1.default, waitTime);
            await blade.waitUntilLoaded(waitTime);
            // Expand the essentials control if it was collapsed in a previous session.
            const essentialVal = await Promise.all([
                blade.essentials.getExpandedState(),
                blade.essentials.getExpander(),
            ]);
            let expandedState = essentialVal[0];
            const expander = essentialVal[1];
            if (!expandedState) {
                await testFx.portal.delay(200);
                await expander.click();
            }
            const essentials = blade.essentials;
            const essentialsInfo = await Promise.all([
                essentials.countItems(),
                essentials.getExpandedState(),
                essentials.hasViewAll(),
            ]);
            const countItems = essentialsInfo[0];
            expandedState = essentialsInfo[1];
            const hasViewAll = essentialsInfo[2];
            // Essentials item count, expanded state and viewAll button state check
            await assert.equal(countItems, 10, "Essentials should have 10 items at the beginning, found " + countItems);
            await assert.ok(expandedState, "Essentials should be expanded");
            await assert.ok(hasViewAll, "Essentials has the ViewAll button at the beginning");
            //Essentials#checkEssentials
        }
        catch (error) {
            console.log("Error:");
            console.log(error);
            console.log(error && error.stack);
            throw error;
        }
    });
    it("Can render dynamic properties", async () => {
        try {
            const blade = await BladeOpener_1.default.openSamplesExtensionBlade(essentialsBladeTitle, essentialsUriFragment, EssentialsBlade_1.default, waitTime);
            await blade.waitUntilLoaded(waitTime);
            // Expand the essentials control if it was collapsed in a previous session.
            const essentialVal = await Promise.all([
                blade.essentials.getExpandedState(),
                blade.essentials.getExpander(),
            ]);
            let expandedState = essentialVal[0];
            const expander = essentialVal[1];
            if (!expandedState) {
                await testFx.portal.delay(200);
                await expander.click();
            }
            const essentials = blade.essentials;
            const essentialsInfo = await Promise.all([
                essentials.countItems(),
                essentials.getExpandedState(),
                essentials.hasViewAll(),
            ]);
            expandedState = essentialsInfo[1];
            const hasViewAll = essentialsInfo[2];
            await assert.ok(hasViewAll, "Essentials has the ViewAll button at the beginning");
            await essentials.getViewAllButton().click();
            const count = await essentials.countItems();
            // Essentials item count after click ViewAll button
            await assert.equal(count, 12, "Essentials should have 12 items after adding dynamic properties, found " + count);
        }
        catch (error) {
            console.log("Error:");
            console.log(error);
            console.log(error && error.stack);
            throw error;
        }
        //Essentials#checkEssentials
    });
    afterEach(async function () {
        const currentTest = this.currentTest;
        testSupport.LogRetry(currentTest);
        if (currentTest.state === "failed") {
            await testSupport.GatherTestFailureDetails(currentTest, __filename);
        }
        await testFx.portal.quit();
    });
});
//# sourceMappingURL=EssentialsBladeTests.js.map