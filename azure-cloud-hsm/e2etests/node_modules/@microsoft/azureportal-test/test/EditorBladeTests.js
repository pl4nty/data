"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const By_1 = require("../src/Locators/By");
const TestSupport_1 = require("./TestSupport");
const testFx = require("../src/Index");
const BladeOpener_1 = require("../src/Utils/BladeOpener");
const EditorBlade_1 = require("./Blades/EditorBlade");
const resources = require("./ExtensionResources");
var assert = testFx.Utils.Assert;
const editorBladeTitle = resources.samplesExtensionStrings.EditorBlade.title;
const editorUriFragment = "EditorInstructions";
const expectedContent = [
    "function test1(name, job) {",
    "    alert('Welcome ' + name + ', the ' + job);",
    "}",
    "",
    "function test2() {",
    "    var x = '', i = 0;",
    "    for (i = 0; i < 10; i++) {",
    "        if (i == 3) {",
    "            continue;",
    "        }",
    "        x = x + 'The number is ' + i;",
    "    }",
    "    document.getElementById('demo').innerHTML = x;",
    "}",
].join("\n");
describe("Editor Blade Tests", function () {
    this.timeout(0);
    const testSupport = new TestSupport_1.default(this);
    before(() => {
        testSupport.initializePortalContext();
    });
    it("Can read and write content", async () => {
        //Editor#readWriteContent
        const editorBlade = await BladeOpener_1.default.openSamplesExtensionBlade(editorBladeTitle, editorUriFragment, EditorBlade_1.default, 70000);
        const editor = editorBlade.editor;
        editor.viewModelName = "editorVM";
        await testFx.portal.wait(async () => {
            const content = await editor.read();
            return content === expectedContent;
        }, null, "expectedContent is not matching");
        await editor.empty();
        await editor.sendKeys("document.");
        await testFx.portal.wait(async () => {
            return await editor.isIntellisenseUp();
        });
        const saveButton = By_1.default.css(`.fxc-simplebutton[data-bind="pcControl: saveButton"]`);
        await editorBlade.element(saveButton).click();
        await testFx.portal.wait(async () => {
            const content = await editor.read();
            return content === "document.";
        });
        const count = await editor.workerIFramesCount();
        await assert.strictEqual(count, 0, "We did not find the expected number of iframes in the portal.  It is likely that the editor is failing to start web workers and is falling back to creating new iframes");
        //Editor#readWriteContent
    });
    afterEach(async function () {
        const currentTest = this.currentTest;
        testSupport.LogRetry(currentTest);
        if (currentTest.state === "failed") {
            await testSupport.GatherTestFailureDetails(currentTest, __filename);
        }
        await testFx.portal.quit();
    });
});
//# sourceMappingURL=EditorBladeTests.js.map