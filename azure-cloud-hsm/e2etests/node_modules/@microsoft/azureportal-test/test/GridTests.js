"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testFx = require("../src/Index");
const TestSupport_1 = require("./TestSupport");
var assert = testFx.Utils.Assert;
var Grid = testFx.Controls.Grid;
describe("Grid Tests", function () {
    this.timeout(0);
    const testSupport = new TestSupport_1.default(this);
    const resourceGroups = new Array();
    before(() => {
        testSupport.initializePortalContext();
        return testSupport.initializeArmClient();
    });
    it("Can Find Grid Row", async () => {
        await testFx.portal.navigateToUriFragment("blade/SamplesExtension/BasicGridInstructions", 70000);
        const gridBlade = testFx.portal.blade({ title: "Basic Grid" });
        await gridBlade.waitUntilBladeAndAllTilesLoaded();
        const grid = gridBlade.element(Grid);
        const value = await testFx.portal.wait(async () => {
            //grid#findrow
            const row = await grid.findRow({ text: "John", cellIndex: 0 });
            const texts = await row.cells.getText();
            return texts.length > 2 && texts[0] === "John" && texts[1] === "333";
            //grid#findrow
        }, 20000);
        await assert.ok(value, "Cell text found");
    });
    afterEach(async function () {
        const currentTest = this.currentTest;
        testSupport.LogRetry(currentTest);
        if (currentTest.state === "failed") {
            await testSupport.GatherTestFailureDetails(currentTest, __filename);
        }
    });
    after(() => {
        const promises = resourceGroups.map((resourceGroup) => testSupport.armClient.deleteResourceGroup(resourceGroup).catch((error) => {
            const log = (error.reason || "").includes("NotFound") ? console.info : console.error;
            log(`Failed to delete resource group "${resourceGroup}" with error: ${JSON.stringify(error)}`);
        }));
        return testFx.portal.quit().finally(() => {
            return Promise.allSettled(promises);
        });
    });
});
//# sourceMappingURL=GridTests.js.map