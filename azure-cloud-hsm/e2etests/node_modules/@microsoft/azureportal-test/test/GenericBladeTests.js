"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TestSupport_1 = require("./TestSupport");
const testFx = require("../src/Index");
const extensionResources = require("./ExtensionResources");
var assert = testFx.Utils.Assert;
describe("Generic Blade Tests", function () {
    this.timeout(0);
    const testSupport = new TestSupport_1.default(this);
    before(() => {
        testSupport.initializePortalContext();
    });
    // Notify v-chtho5@microsoft.com if this is broken.
    it("Can tell if a generic blade has an error", async () => {
        // This goes to a non-existent resource
        try {
            await testFx.portal.navigateToUriFragment("blade/Microsoft_Azure_Media/AssetOverviewBlade/assetId/subscriptions/b582c1ce-ffff-4a1b-aebc-514b4f1196b7/resourceGroups/aff-infr-0-res-media-1-1/providers/microsoft.media/mediaservices/amsuswe1bvatste2erunner/assets/EncodingE2ERunnerV3-Out-200316112255", 15000);
        }
        catch (e) {
            // continue regardless of error
        }
        const blade = testFx.portal.blade({ bladeType: testFx.Blades.Blade });
        await blade.waitUntilLoaded();
        await testFx.portal.wait(async () => (await blade.hasError()) === true, null, "Expected Blade.hasError() to return true in this test.");
        const errorMessage = await blade.getErrorText();
        await assert.ok(errorMessage !== null, "Expected error text from Blade.getErrorText() not to be null in this test, got null.");
        await assert.ok(typeof errorMessage === "string", `Blade.getErrorText() should return a string, got "${typeof errorMessage}" instead.`);
        await assert.ok(errorMessage === "Error displaying your content", `Expected Blade.getErrorText() to return "Error displaying your content" in this test, got "${errorMessage}" instead.`);
    });
    it("Can Use Blade Dialog Forms", async () => {
        //blades#dialog
        await testFx.portal.navigateToUriFragment("blade/InternalSamplesExtension/BladeWithToolbar");
        let blade = testFx.portal.blade({
            title: extensionResources.samplesExtensionStrings.SamplesBlade.bladeWithToolbar,
        });
        await blade.waitUntilBladeAndAllTilesLoaded();
        blade = await blade.clickCommand("Form");
        //get a reference to a dialog by title
        const dialog = blade.dialog({ title: "Form" });
        //sending keys to a field in a dialog
        await dialog.field(testFx.Controls.TextField, { label: "Form" }).sendKeys("Something goes here");
        //clicking a button within a dialog
        await dialog.clickButton(extensionResources.ok);
        //blades#dialog
    });
    it("Can Use CheckBox field locator and click right away", async () => {
        //blades#checkbox
        await testFx.portal.navigateToUriFragment("blade/SamplesExtension/CheckBoxIndexBlade/StandardCheckboxBlade/selectedItem/CheckBoxIndexBlade/selectedValue/CheckBoxIndexBlade");
        const blade = testFx.portal.blade({
            title: extensionResources.samplesExtensionStrings.SamplesBlade.checkBoxBladeTitle,
        });
        await blade.waitUntilBladeAndAllTilesLoaded();
        const checkBox = blade.field(testFx.Controls.CheckBoxField, {
            label: "My checkbox",
            contains: true,
        });
        await checkBox.waitUntilEnabled();
        const isInitiallyChecked = await checkBox.isChecked();
        await assert.ok(isInitiallyChecked === true, "The checkbox should be ticked upon init.");
        await checkBox.click();
        const isFinallyUnChecked = await testFx.portal.wait(async () => {
            //CheckBox#isChecked false
            const checkBoxCheckedAfterOneClick = await checkBox.isChecked();
            return !checkBoxCheckedAfterOneClick;
        }, 20000);
        await assert.ok(isFinallyUnChecked === true, "The checkbox should now be unticked after one click.");
        //blades#checkbox
    });
    afterEach(async function () {
        const currentTest = this.currentTest;
        testSupport.LogRetry(currentTest);
        if (currentTest.state === "failed") {
            await testSupport.GatherTestFailureDetails(currentTest, __filename);
        }
        await testFx.portal.quit();
    });
});
//# sourceMappingURL=GenericBladeTests.js.map