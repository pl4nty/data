"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BrowserAutomation_1 = require("../BrowserAutomation");
const By_1 = require("../Locators/By");
const PortalElement_1 = require("../PortalElement");
const Constants = require("../Constants");
var ClassNames = Constants.CssClassNames;
const DropMenu_1 = require("../Controls/DropMenu");
/**
 * Represents the Avatar Menu.
 */
class AvatarMenu extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.tenantDisplayNameClassName = "fxs-avatarmenu-tenant";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(ClassNames.AvatarMenu.avatarMenu);
    }
    /**
     * Clicks SwitchDirectory button on avatar menu.
     */
    async clickSwitchDirectory() {
        const switchDirectoryBtn = await (0, BrowserAutomation_1.getBrowser)().wait(() => this.element(By_1.default.className("fxs-avatarmenu-switchdirectory")), null, "Expected the switch directory option to be displayed in the avatar menu dropdown");
        await switchDirectoryBtn.click();
    }
    /**
     * Gets the directory display name.
     *
     * @returns A promise that resolves with the name.
     */
    async getDirectoryDisplayName() {
        return await this.element(By_1.default.className(this.tenantDisplayNameClassName)).getText();
    }
    /**
     * Gets a value indicating whether the Avatar menu is opened.
     */
    async isOpen() {
        return await (await this.getDropMenu()).isOpened();
    }
    async getDropMenu() {
        return (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const allDropMenu = this.all(DropMenu_1.DropMenu);
            const filteredDropMenu = allDropMenu.filter((dropMenu) => {
                return isDropMenuDisplayed(dropMenu);
            });
            if ((await filteredDropMenu.count()) > 0) {
                return filteredDropMenu.first();
            }
            else {
                return false;
            }
            async function isDropMenuDisplayed(dropMenu) {
                return await dropMenu.isDisplayed();
            }
        }, null, `Unable to find DropMenu.`);
    }
}
exports.default = AvatarMenu;
//# sourceMappingURL=AvatarMenu.js.map