"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const By_1 = require("../Locators/By");
const BrowserAutomation_1 = require("../BrowserAutomation");
const FormElement_1 = require("./FormElement");
const OptionsGroupFieldOption_1 = require("./OptionsGroupFieldOption");
const FilterComboField_1 = require("./FilterComboField");
const Constants = require("../Constants");
const TextField_1 = require("./TextField");
const OptionsGroupClassName = Constants.CssClassNames.Controls.optionsGroupField;
const SectionClassName = "fxc-section";
/**
 * Represents an CreatorComboBoxField field.
 */
class CreateComboBoxField extends FormElement_1.default {
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.xpath(`//*[contains(concat(' ', @class, ' '), ' ${OptionsGroupClassName} ')][following-sibling::*[contains(concat(' ', @class, ' '), ' ${SectionClassName} ') and not(following-sibling::*)]]/ancestor::*[contains(concat(' ', @class, ' '), ' ${SectionClassName} ')][1]`);
    }
    /**
     * Selects the specified option.
     *
     * @param {string} optionText The text of the option to select.
     * @returns A promise that resolves when the option has been selected.
     */
    async selectOption(optionText, timeout) {
        let input;
        const filterCombo = await this.filterCombo(timeout);
        await (input = filterCombo.element(By_1.default.tagName("input"))).clear();
        await input.sendKeys(optionText);
        return await filterCombo.selectOption(optionText);
    }
    /**
     * Sets the first text field in the create section
     *
     * @param {string} value the value of the text to input in the text control
     * @param {number} [timeout] optional timeout to wait for the CreateComboBoxField to be displayed
     * @returns {Promise<void>} A promise that resolves when the value has been set
     */
    async setCreateValue(value, timeout) {
        const section = await this.createSection(timeout);
        const textField = section.all(TextField_1.default).first().asType(TextField_1.default);
        await (0, BrowserAutomation_1.getBrowser)().wait(() => textField.isDisplayed(), timeout, "timed out waiting for the TextField in CreateComboBoxField to be displayed");
        // Have to use ctrl+a because the control autopopulates the textbox if it is empty
        const ctrlKey = (0, BrowserAutomation_1.getBrowser)().Key.CONTROL;
        textField.sendKeys(ctrlKey, "a").then(() => textField.sendKeys(value));
    }
    /**
     * Gets the first text fields value in the create section
     *
     * @param {number} [timeout] optional timeout to wait for the CreateComboBoxField to be displayed
     * @returns {Promise<string>} the value of the text from the create field
     */
    async getCreateValue(timeout) {
        const section = await this.createSection(timeout);
        const textField = section.all(TextField_1.default).first().asType(TextField_1.default);
        await (0, BrowserAutomation_1.getBrowser)().wait(() => textField.isDisplayed(), timeout);
        return await textField.value();
    }
    /**
     * Gets the dropdown fields value in the use existing section
     *
     * @param {number} [timeout] optional timeout to wait for the CreateComboBoxField to be displayed
     * @returns {Promise<string>} the value of the text from the create field
     */
    async getDropdownValue(timeout) {
        const filterCombo = await this.filterCombo(timeout);
        return await filterCombo.element(By_1.default.tagName("input")).getAttribute("value");
    }
    async createSection(wait) {
        const options = await this.all(OptionsGroupFieldOption_1.default);
        const selected = await options[0].isSelected();
        await (!selected && options[0].click());
        const formSection = this.element(By_1.default.className(SectionClassName)).asType(FormElement_1.default);
        await (0, BrowserAutomation_1.getBrowser)().wait(() => formSection.isDisplayed(), wait, `Timed out waiting for ${SectionClassName} to be displayed`);
        return formSection;
    }
    async filterCombo(wait) {
        const options = await this.all(OptionsGroupFieldOption_1.default);
        const selected = await options[1].isSelected();
        await (!selected && options[1].click());
        const field = this.element(FilterComboField_1.default);
        await (0, BrowserAutomation_1.getBrowser)().wait(() => field.isDisplayed(), wait);
        return field;
    }
}
exports.default = CreateComboBoxField;
//# sourceMappingURL=CreateComboBoxField.js.map