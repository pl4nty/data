"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PortalElement_1 = require("../../PortalElement");
const By_1 = require("../../Locators/By");
const ToolbarItem_1 = require("./ToolbarItem");
const Logger_1 = require("../../Logger");
const diagnosticsLog = Logger_1.default.diagnostics.extend("blade");
/**
 * Driver class for the Toolbar portal control
 */
class Toolbar extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "fxc-toolbar";
        this.overflowClassName = "azc-toolbar-item-overflow";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(this.rootClassName);
    }
    /**
     * Gets all of toolbar items.
     */
    get items() {
        return async () => {
            const list = await this.all(ToolbarItem_1.default);
            const results = await Promise.all(list.map(async (item) => {
                const hasClass = await item.hasClass(this.overflowClassName);
                if (!hasClass) {
                    return item;
                }
            }));
            return results.filter((item) => !!item);
        };
    }
    /**
     * Find the toolbar item with specified text
     *
     * @param text the item to find.
     */
    async findToolbarItem(text) {
        const items = await this.items();
        diagnosticsLog(`Searching for toolbar item matching text ${text}`);
        for (const item of items) {
            const itemText = await item.text();
            if (itemText === text) {
                return item;
            }
        }
        return null;
    }
}
exports.default = Toolbar;
//# sourceMappingURL=Toolbar.js.map