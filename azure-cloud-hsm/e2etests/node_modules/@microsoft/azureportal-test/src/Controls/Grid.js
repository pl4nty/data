"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GridBase = require("./GridBase");
const By_1 = require("../Locators/By");
const BrowserAutomation_1 = require("../BrowserAutomation");
/**
 * Generic Grid test harness that that works against Grid1 and Grid2 grids.
 */
class Grid extends GridBase.BaseGrid {
    constructor(elementArrayFinder) {
        super(Grid.Row, Grid.Cell, Grid.ColumnHeader, elementArrayFinder);
    }
    /**
     * Selects all rows checkbox.
     *
     * @returns the selectAllRows checkbox.
     */
    get selectAllRowsCheckbox() {
        return this.element(By_1.default.css(".fxs-grid-selection-selectAll,.fxc-gc-margincolumnheader-selection"));
    }
    /**
     * Gets selected rows.
     *
     * @returns the selected rows.
     */
    async selectedRows() {
        const rows = await this.rows;
        const selectedRows = [];
        for (const row of rows) {
            if (await row.isSelected()) {
                selectedRows.push(row);
            }
        }
        return selectedRows;
    }
}
(function (Grid) {
    /**
     * Represents a Grid column header.
     */
    class ColumnHeader extends GridBase.BaseColumnHeader {
    }
    Grid.ColumnHeader = ColumnHeader;
    /**
     * Represents a Grid cell.
     */
    class Cell extends GridBase.BaseCell {
    }
    Grid.Cell = Cell;
    /**
     * Represents a Grid row.
     */
    class Row extends GridBase.BaseRow {
        constructor(elementArrayFinder) {
            super(Grid.Cell, elementArrayFinder);
            this.selectionCheckboxSelector = ".azc-grid-selectableRow-selectionCell,.fxs-grid-selection-cell,.fxc-gc-selectioncheckbox";
            this.contextMenuButtonSelector = ".fxc-grid-contextMenuShortcut-cell,.fxc-gc-margincell-contextmenu";
            this.Grid1RowClass = "azc-grid-row";
        }
        /**
         * Selects the row.
         */
        async select() {
            const wasSelected = await this.isSelected();
            // verify the row is not selected
            if (wasSelected) {
                throw new Error("The row is already selected.");
            }
            const selectionCheckBox = this.selectionCheckBox;
            if (selectionCheckBox !== null && !(await this.hasClass(this.Grid1RowClass))) {
                await selectionCheckBox.click();
            }
            await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
                return await this.isSelected();
            }, null, "The row did not get selected.");
        }
        /**
         * Unselects the row.
         */
        async unSelect() {
            const isSelected = await this.isSelected();
            // verify the row is not selected
            if (!isSelected) {
                throw new Error("The row is already unselected.");
            }
            const selectionCheckBox = this.selectionCheckBox;
            if (selectionCheckBox) {
                await selectionCheckBox.click();
            }
            await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
                return !(await this.isSelected());
            }, null, "The row did not get unselected.");
        }
        /**
         * Row checkbox
         */
        get selectionCheckBox() {
            return this.element(By_1.default.css(this.selectionCheckboxSelector));
        }
        /**
         * Button displayed as triple dots -> ... at the end of the row
         */
        get contextMenuButton() {
            return this.element(By_1.default.css(this.contextMenuButtonSelector));
        }
    }
    Grid.Row = Row;
})(Grid || (Grid = {}));
exports.default = Grid;
//# sourceMappingURL=Grid.js.map