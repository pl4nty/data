"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const By_1 = require("../Locators/By");
const PortalElement_1 = require("../PortalElement");
const BrowserAutomation_1 = require("../BrowserAutomation");
const EditableGrid_1 = require("./EditableGrid");
const InfoBox_1 = require("./InfoBox");
const TextField_1 = require("./TextField");
const GroupDropDownField_1 = require("./GroupDropDownField");
const Logger_1 = require("../Logger");
const Controls_1 = require("../Controls");
/**
 * Represents the TagsByResource control.
 */
class TagsByResource extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "fxc-tagsbyresource";
        this.errorInfoBoxClassName = "fxt-tagsbyresource-errorinfobox";
        this.infoBoxClassName = "fxt-tagsbyresource-infobox";
        this.dropDownSelectAllValue = "*";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns By locator used to identify elements of this class.
     */
    get locator() {
        return By_1.default.className(this.rootClassName);
    }
    /**
     * Get get tags for control
     *
     * @returns tags shown in the TagsByResource control.
     */
    async tags() {
        const tagsString = await (0, BrowserAutomation_1.runAutomation)(async (wd) => await wd.executeScript("return ko.toJSON(ko.dataFor(arguments[0]).data.items());", this.editableGrid), async () => await (await this.editableGrid.getWebElements())[0].executeScript("(htmlElem) => ko.toJSON(ko.dataFor(htmlElem).data.items())"));
        return JSON.parse(tagsString);
    }
    /**
     * Get errors for control
     *
     * @returns errors shown in the errors InfoBox control shown in the TagsByResource control.
     */
    errorMessages() {
        const errorBox = this.tryFindElement(By_1.default.className(this.errorInfoBoxClassName)).tryFindElement(InfoBox_1.default);
        return errorBox.infoBoxTextContent();
    }
    /**
     * Get info message for control
     *
     * @returns content of the informational InfoBox control shown in the TagsByResource control.
     */
    async infoMessages() {
        return await this.tryFindElement(By_1.default.className(this.infoBoxClassName))
            .tryFindElement(InfoBox_1.default)
            .infoBoxTextContent();
    }
    /**
     * Adds a tag to the TagsByResource grid.
     *
     * @param key The tag name.
     * @param value The tag value.
     * @param resources The resources to apply the tag to.
     */
    async addTag(key, value = null, resources = null) {
        const enabledTimeout = 5000;
        const grid = this.editableGrid;
        let [..._rows] = await grid.rows;
        let lastRow = _rows[_rows.length - 1];
        const nameField = await TagsByResource.getNameField(lastRow);
        await nameField.waitUntilEnabled(enabledTimeout);
        await nameField.click();
        Logger_1.default.information(`Setting Tag Name to ${key} for row ${_rows.length}...`);
        let inputValue;
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            await nameField.setText(key || "");
            return (inputValue = await nameField.element(By_1.default.tagName("input")).getInputValue()) === (key || "");
        }, null, `Failed to set Tag Name to ${key}, for row ${_rows.length}. Name is ${inputValue}.`);
        // avoid throttling of input
        await (0, PortalElement_1.delay)();
        const valueField = await TagsByResource.getValueField(lastRow);
        await valueField.waitUntilEnabled(enabledTimeout);
        await valueField.click();
        Logger_1.default.information(`Setting Tag Value to ${value} for row ${_rows.length}...`);
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            await valueField.setText(value || "");
            return (inputValue = await valueField.element(By_1.default.tagName("input")).getInputValue()) === (value || "");
        }, null, `Failed to set Tag Value to ${value} for row ${_rows.length}. Value is ${inputValue}.`);
        // avoid throttling of input
        await (0, PortalElement_1.delay)();
        const [firstResource] = resources || [];
        if (resources !== null && !(resources.length === 1 && firstResource === this.dropDownSelectAllValue)) {
            // Only change the dropdown if the dropdown is visible and the caller has specified options to select other than *.
            const resourcesDropDown = await TagsByResource.getResourcesDropDown(lastRow);
            // Select the provided items.
            await resourcesDropDown.selectOptionsByText(resources, false, true);
        }
        await lastRow.element(Controls_1.ToolbarItem).rightClick();
        [..._rows] = await grid.rows;
        lastRow = _rows[_rows.length - 1];
        await lastRow.click();
    }
    /**
     * Attempt to remove a tag from the TagsByResource grid. This method will throw an <see cref="InvalidOperationException"/> if more than a single row matches the inputs provided.
     *
     * @param name The name of the tag to be removed.
     * @param value The value of the tag to be removed. Optional if there is only a single tag with the name provided.
     * @param resources The resources of the tag to be removed. Optional if the resource column is not shown or a single tag matches the name and value provided.
     */
    async removeTag(name, value = null, resources = null) {
        const defaultedValue = value || "";
        const defaultedResources = (resources ?? [this.dropDownSelectAllValue]).sort();
        const matchingRowNumbers = (await this.tags())
            .map((tag, idx) => {
            return { tag, idx };
        })
            .filter((r) => {
            return (r.tag.key.toLowerCase() === name.toLowerCase() &&
                (value === null || r.tag.value.toLowerCase() === defaultedValue.toLowerCase()) &&
                (resources === null ||
                    JSON.stringify(defaultedResources.sort()).toLowerCase() ===
                        JSON.stringify(r.tag.resources.sort()).toLowerCase()));
        })
            .map((t) => t.idx);
        if (!matchingRowNumbers) {
            throw `Tag with name '${name}', value '${defaultedValue}', and resources '${defaultedResources.join(", ")}' could not be found.`;
        }
        if (matchingRowNumbers.length > 1) {
            throw "Multiple tags found with the properties provided.";
        }
        const rows = await this.editableGrid.rows;
        await TagsByResource.deleteRow(rows[matchingRowNumbers[0]]);
    }
    /**
     * Returns the validation state of the control.
     *
     * @returns if control is valid
     */
    async isValid() {
        return await (0, BrowserAutomation_1.runAutomation)(async (wd) => await wd.executeScript("return (ko.dataFor(arguments[0]).tagsControl || ko.dataFor(arguments[0]).__control_vm__).valid()", this), async () => await (await this.getWebElements())[0].executeScript("(htmlElem) => (ko.dataFor(htmlElem).tagsControl || ko.dataFor(htmlElem).__control_vm__).valid()"));
    }
    static async getTagNameCell(row) {
        return (await row.cells)[0];
    }
    static async getTagValueCell(row) {
        return (await row.cells)[2];
    }
    static async getTagResourcesCell(row) {
        if ((await row.cells).length < 4) {
            throw "Resources column is not visible.";
        }
        return (await row.cells)[3];
    }
    static async getNameField(row) {
        return (await TagsByResource.getTagNameCell(row)).tryFindElement(TextField_1.default);
    }
    static async getValueField(row) {
        return (await TagsByResource.getTagValueCell(row)).tryFindElement(TextField_1.default);
    }
    static async getResourcesDropDown(row) {
        return (await TagsByResource.getTagResourcesCell(row)).tryFindElement(GroupDropDownField_1.default);
    }
    static async deleteRow(row) {
        console.log("Trying to delete tag...");
        const deleteButton = row.all(Controls_1.ToolbarItem).first();
        await deleteButton.click();
        console.log("deleted");
    }
    get editableGrid() {
        return this.tryFindElement(EditableGrid_1.default);
    }
}
exports.default = TagsByResource;
//# sourceMappingURL=TagsByResource.js.map