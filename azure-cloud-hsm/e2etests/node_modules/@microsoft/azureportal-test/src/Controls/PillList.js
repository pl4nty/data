"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PortalElement_1 = require("../PortalElement");
const By_1 = require("../Locators/By");
const Constants_1 = require("../Constants");
const PillListActionButton_1 = require("./PillListActionButton");
const PillListItem_1 = require("./PillListItem");
const PillListOverflowItem_1 = require("./PillListOverflowItem");
const pillListRoot = `.${Constants_1.CssClassNames.Controls.pillList}`;
const pillListContainer = `.${Constants_1.CssClassNames.Controls.pillListContainer}`;
/**
 * Represents a Pill List.
 */
class PillList extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this._container = this.element(By_1.default.css(pillListContainer));
        /**
         * The pill list items.
         */
        this.items = this._container.all(PillListItem_1.default);
        /**
         * The pill list overflow item.
         */
        this.overflowItem = this._container.element(PillListOverflowItem_1.default);
        /**
         * The pill list items.
         */
        this.actionButtons = this._container.all(PillListActionButton_1.default);
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.css(pillListRoot);
    }
    /**
     * Count the number of all items.
     *
     * @returns A promise that resolves with the number of all items in the pill list.
     */
    async countItems() {
        return await this.items.count();
    }
    /**
     * Count the number of all action buttons.
     *
     * @returns A promise that resolves with the number of all items in the pill list.
     */
    async countActionButtons() {
        return await this.actionButtons.count();
    }
    /**
     * Returns an PillListItem that is found by its text.
     *
     * @param value A value of the item.
     * @returns A promise that resolves to found PillListItem.
     */
    async getItemByText(value) {
        const items = await this.items.filter((item) => item
            .asType(PillListItem_1.default)
            .getValueText()
            .then((valueText) => valueText.toLowerCase() === value.toLowerCase()));
        let result = null;
        if (items.length > 0) {
            result = items[0].asType(PillListItem_1.default);
        }
        return result;
    }
    /**
     * Returns an PillListActionButton that is found by its text.
     *
     * @param title A title of the item.
     * @returns A promise that resolves to found PillListActionButton.
     */
    async getActionButtonByText(title) {
        const items = await this.actionButtons.filter((actionButton) => actionButton
            .asType(PillListActionButton_1.default)
            .getTitleText()
            .then((titleText) => titleText.toLowerCase() === title.toLowerCase()));
        let result = null;
        if (items.length > 0) {
            result = items[0].asType(PillListActionButton_1.default);
        }
        return result;
    }
}
exports.default = PillList;
//# sourceMappingURL=PillList.js.map