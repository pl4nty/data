"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const By_1 = require("../Locators/By");
const FormElement_1 = require("./FormElement");
const BrowserAutomation_1 = require("../BrowserAutomation");
/**
 * Represents a TextField.
 */
class OptionPicker extends FormElement_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "fxc-OptionsGroupField";
        this.checkedAttribute = "aria-checked";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(this.rootClassName);
    }
    /**
     * Gets which item is selected in the option picker.
     */
    async getSelectedItem() {
        let filteredElementArray;
        const selectedItem = await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const elementsFound = this.all(By_1.default.tagName("li"));
            const filteredElements = elementsFound.filter((e) => {
                const promise = checkIfElementIsChecked(e, this.checkedAttribute);
                return promise;
            });
            filteredElementArray = await filteredElements.asPortalElements();
            if (filteredElementArray.length === 1) {
                return filteredElementArray[0].getText();
            }
            if (filteredElementArray.length === 0) {
                return null;
            }
            if (filteredElementArray.length > 1) {
                throw new Error("More than one item found.");
            }
        });
        return selectedItem;
        async function checkIfElementIsChecked(element, checkedAttribute) {
            return (await element.getAttribute(checkedAttribute)).toLowerCase() === "true";
        }
    }
    /**
     * Selects the item in the option picker.
     *
     * @param itemValue Value to be set.
     */
    async setSelectedItem(itemValue) {
        let filteredElementArray;
        const itemToBeSelect = await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const elementsFound = this.all(By_1.default.tagName("span"));
            const filteredElements = elementsFound.filter((element) => {
                const promise = checksElementHasTargetText(element, itemValue);
                return promise;
            });
            filteredElementArray = await filteredElements.asPortalElements();
            if (filteredElementArray.length === 1) {
                return filteredElementArray[0];
            }
            if (filteredElementArray.length === 0) {
                return null;
            }
            if (filteredElementArray.length > 1) {
                throw new Error("More than one item found.");
            }
        });
        await itemToBeSelect.click();
        async function checksElementHasTargetText(element, expectedText) {
            return (await element.getText()).toLowerCase() === expectedText.toLowerCase();
        }
    }
}
exports.default = OptionPicker;
//# sourceMappingURL=OptionPicker.js.map