"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BrowserAutomation_1 = require("../BrowserAutomation");
const By_1 = require("../Locators/By");
const FormElement_1 = require("../Controls/FormElement");
const DropDownFieldOption_1 = require("../Controls/DropDownFieldOption");
/**
 * Represents a DropDown field.
 */
class DropDownField extends FormElement_1.default {
    constructor() {
        super(...arguments);
        this.dropDownValueSelector = "azc-input";
        /**
         * The collection of options that belong to this dropdown field.
         */
        this.options = this.all(DropDownFieldOption_1.default);
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className("azc-dropdownField");
    }
    /**
     * Selects the specified option.
     *
     * @param {string} optionText The text of the option to select.
     * @returns A promise that resolves when the option has been selected.
     */
    async selectOption(optionText) {
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const count = await this.options.count();
            return count > 0;
        });
        await this.click();
        const ddOptions = await this.options.filter(async (ddOption) => {
            const text = await ddOption.getText();
            return text === optionText;
        });
        if (ddOptions.length > 0) {
            return ddOptions[0].click();
        }
        return null;
    }
    /**
     * Gets the value of the control via reading out of.
     */
    async getValue() {
        const valueElement = this.element(By_1.default.className(this.dropDownValueSelector));
        return (await valueElement.getAttribute("value")) ?? (await valueElement.getText());
    }
}
exports.default = DropDownField;
//# sourceMappingURL=DropDownField.js.map