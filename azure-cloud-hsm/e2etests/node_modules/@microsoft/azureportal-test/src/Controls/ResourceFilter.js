"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PortalElement_1 = require("../PortalElement");
const GroupDropDownField_1 = require("../Controls/GroupDropDownField");
const By_1 = require("../Locators/By");
const TextField_1 = require("../Controls/TextField");
class ResourceFilter extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "fxc-resourcefilter";
        this.subscriptionFilterClassName = "fxc-resourcefilter-subscriptions";
        this.resourceGroupsFilterClassName = "fxc-resourcefilter-resourceGroups";
        this.resourceTypesFilterClassName = "fxc-resourcefilter-resourcetypes";
        this.textFilterClassName = "fxc-resourcefilter-filter";
        this.locationsFilterClassName = "fxc-resourcefilter-locations";
        this.tagsFilterClassName = "ext-hubs-browse-tagfilter";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(this.rootClassName);
    }
    async getFilteredGroupDropDownField(groupDropDownFilterClass) {
        const allGroupDropDownsInResourceFilter = this.getAllGroupDownsInResourceFilter();
        const resourceFilterGroupDropDown = allGroupDropDownsInResourceFilter.filter((element) => {
            return element.hasClass(groupDropDownFilterClass);
        });
        const resourceFilterGroupDropDownArray = await resourceFilterGroupDropDown.asPortalElements();
        if (resourceFilterGroupDropDownArray.length > 0) {
            return resourceFilterGroupDropDownArray[0];
        }
        else {
            throw new Error(`No groupDropDownField found with class ${groupDropDownFilterClass}`);
        }
    }
    /**
     *  Returns the SubscriptionFilter.
     *
     * @returns A promise that resolves when finds the SubscriptionFilter.
     */
    async getSubscriptionFilter() {
        return await this.getFilteredGroupDropDownField(this.subscriptionFilterClassName);
    }
    /**
     *  Returns the ResourceGroupsFilter.
     *
     * @returns A promise that resolves when finds the ResourceGroupsFilter.
     */
    async getResourceGroupsFilter() {
        return await this.getFilteredGroupDropDownField(this.resourceGroupsFilterClassName);
    }
    /**
     *  Returns the ResourceTypesFilter.
     *
     * @returns A promise that resolves when finds the ResourceTypesFilter.
     */
    async getResourceTypesFilter() {
        return await this.getFilteredGroupDropDownField(this.resourceTypesFilterClassName);
    }
    /**
     *  Returns the LocationsFilter.
     *
     * @returns A promise that resolves when finds the LocationsFilter.
     */
    async getLocationsFilter() {
        return await this.getFilteredGroupDropDownField(this.locationsFilterClassName);
    }
    /**
     *  Returns the Tags Filter.
     *
     * @returns A promise that resolves when it finds the Tags Filter.
     */
    async getTagsFilter() {
        return await this.getFilteredGroupDropDownField(this.tagsFilterClassName);
    }
    getAllGroupDownsInResourceFilter() {
        return this.all(GroupDropDownField_1.default);
    }
    getAllTextFieldsInResourceFilter() {
        return this.all(TextField_1.default);
    }
    /**
     *  Returns the TextFilter.
     *
     * @returns A promise that resolves when finds the TextFilter.
     */
    async getTextFilter() {
        return await this.getTextFieldFilter(this.textFilterClassName);
    }
    async getTextFieldFilter(textFieldFilterClass) {
        const allTextFieldsInResourceFilter = this.getAllTextFieldsInResourceFilter();
        const textFilterTextField = allTextFieldsInResourceFilter.filter((element) => {
            return element.hasClass(textFieldFilterClass);
        });
        const resourceTextFilterTextField = await textFilterTextField.asPortalElements();
        return resourceTextFilterTextField[0];
    }
}
exports.default = ResourceFilter;
//# sourceMappingURL=ResourceFilter.js.map