"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PortalElement_1 = require("../PortalElement");
const By_1 = require("../Locators/By");
const Constants_1 = require("../Constants");
const EssentialsItem_1 = require("./EssentialsItem");
const essentialsCss = `.${Constants_1.CssClassNames.Controls.essentials}`;
const essentialsAccordion = `.${Constants_1.CssClassNames.Controls.essentialsAccordion}`;
const essentialsViewAllContainer = `.${Constants_1.CssClassNames.Controls.essentialsViewAllContainer}`;
const essentialsViewAllButton = `.${Constants_1.CssClassNames.Controls.essentialsViewAllButton}`;
const essentialsItemProperty = `.${Constants_1.CssClassNames.Controls.essentialsValueContainer}`;
/**
 * Represents an Essentials.
 */
class Essentials extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        /**
         * The essentials items.
         */
        this.items = this.all(EssentialsItem_1.default);
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.css(essentialsCss);
    }
    /**
     * Count the number of all items. (MultiLine Item is counted as one)
     *
     * @returns A promise that resolves with the number of all items in the essentials.
     */
    async countItems() {
        return await this.items.count();
    }
    /**
     * Returns a value that determines whether the essentials is disabled.
     *
     * @returns A promise that resolves to a value that determines whether the essentials is disabled.
     */
    async isDisabled() {
        const disabled = await this.element(By_1.default.css(essentialsAccordion)).getAttribute("disabled");
        return disabled === "true";
    }
    /**
     * Returns a value that determines whether the essentials has ViewAll button or not.
     *
     * @returns A promise that resolves to a value that determines whether the essentials has ViewAll button or not.
     */
    async hasViewAll() {
        const count = await this.all(By_1.default.css(essentialsViewAllContainer)).count();
        return count > 0;
    }
    /**
     * Returns a PortalElement of the essentials' viewAll button.
     *
     * @returns A PortalElement of the essentials' viewAll button.
     */
    getViewAllButton() {
        return this.element(By_1.default.css(essentialsViewAllButton));
    }
    /**
     * Returns an EssentialsItem that is found by its label text.
     *
     * @param label A label of the item.
     * @returns A promise that resolves to found EssentialsItem.
     */
    async getItemByLabelText(label) {
        const items = await this.items.filter((item) => item
            .asType(EssentialsItem_1.default)
            .getLabelText()
            .then((labelText) => labelText === label));
        let ret = null;
        if (items.length > 0) {
            ret = items[0].asType(EssentialsItem_1.default);
        }
        return ret;
    }
    /**
     * Returns a PortalElement of matching property value.
     *
     * @param value the string to match property element value.
     * @returns A PortalElement of matching property value.
     */
    async getPropertyElementByValue(value) {
        const items = await this.all(By_1.default.css(`${essentialsItemProperty} a, ${essentialsItemProperty} div, ${essentialsItemProperty} button`)).filter((prop) => prop.getText().then((propText) => propText === value));
        return items.length > 0 ? items[0] : null;
    }
    /**
     * Returns a value that determines the essentials' expanded state.
     *
     * @returns A promise that resolves to a value that determines the essentials' expanded state.
     */
    async getExpandedState() {
        const ariaExpanded = await this.element(By_1.default.css(essentialsAccordion)).getAttribute("aria-expanded");
        return ariaExpanded === "true";
    }
    /**
     * Returns the Expander element.
     *
     * @returns A PortalElement of the expander.
     */
    getExpander() {
        return this.element(By_1.default.css(essentialsAccordion));
    }
}
exports.default = Essentials;
//# sourceMappingURL=Essentials.js.map