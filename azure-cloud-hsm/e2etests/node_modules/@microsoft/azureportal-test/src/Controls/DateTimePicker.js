"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PortalElement_1 = require("../PortalElement");
const By_1 = require("../Locators/By");
const BrowserAutomation_1 = require("../BrowserAutomation");
/**
 * Driver class for the date-time picker control
 */
class DateTimePicker extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = ".azc-dateTimePicker";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(this.rootClassName);
    }
    /**
     * Clears the input.
     *
     * @param input target input element to be cleared without blurring.
     */
    async clearInputWithoutBlur(input) {
        const Key = (0, BrowserAutomation_1.getBrowser)().Key;
        await input.sendKeys(Key.CONTROL, "a");
        await input.sendKeys(Key.DELETE);
    }
    /**
     * Sets the value of the control via typing into/reading out of the inputs.
     *
     * @param value desired control value to be set.
     */
    async setValue(value) {
        const dateInput = this.element(By_1.default.className("azc-datePicker")).element(By_1.default.tagName("input"));
        const timeInput = this.element(By_1.default.className("azc-timePicker")).element(By_1.default.tagName("input"));
        const tabKey = (0, BrowserAutomation_1.getBrowser)().Key.TAB;
        if (await dateInput.isDisplayed()) {
            await this.clearInputWithoutBlur(dateInput);
            const valueText = value.toLocaleDateString();
            await dateInput.sendKeys(valueText, tabKey);
        }
        if (await timeInput.isDisplayed()) {
            await this.clearInputWithoutBlur(timeInput);
            const valueText = value.toLocaleTimeString();
            await timeInput.sendKeys(valueText, tabKey);
        }
    }
}
exports.default = DateTimePicker;
//# sourceMappingURL=DateTimePicker.js.map