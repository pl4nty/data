"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const By_1 = require("../Locators/By");
const BrowserAutomation_1 = require("../BrowserAutomation");
const PortalElement_1 = require("../PortalElement");
/**
 * Gets the By locator used to identify elements of this class.
 */
class TabList extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "fxc-tabs-container";
        this.tabSwitcherMenuButtonSelector = ".fxc-tabs-menu";
        this.tabSwitcherMenuButtonActiveClass = "fxc-tabs-menu-active";
        this.tabSwitcherMenuButtonOpenClass = "fxc-tabs-menu-open";
        this.tabLabelClass = "fxc-tabs-menu-content";
        this.tabSwitcherMenuListSelector = ".fxc-tabs-menu .fxc-tabs-itemslist";
        this.tabSwitcherByHeaderSelector = ".fxc-tabs-itemslist.fxc-tabs-headers";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(this.rootClassName);
    }
    /**
     * Finds the tab item with the specified command label.
     *
     * @param tabLabel Text of the tab.
     */
    async switchToTab(tabLabel) {
        if (await this.isTabSwitcherMenuActive()) {
            // If it is active, use the tab switcher since tabs are overflowing.
            // The tab switcher shows all the tabs in one single menu.
            await this.toggleTabSwitcherMenu(true);
            await this.clickFirstMatchingTabName(this.element(By_1.default.css(this.tabSwitcherMenuListSelector)), tabLabel);
            await this.toggleTabSwitcherMenu(false);
        }
        else {
            // If it isn't active, don't use the tab switcher.
            // All tabs are visible as tab headers
            await this.clickFirstMatchingTabName(this.element(By_1.default.css(this.tabSwitcherByHeaderSelector)), tabLabel);
        }
    }
    get tabSwitcherMenuButton() {
        return this.all(By_1.default.css(this.tabSwitcherMenuButtonSelector)).first();
    }
    async isTabSwitcherMenuActive() {
        return (this.tabSwitcherMenuButton &&
            (await this.tabSwitcherMenuButton.hasClass(this.tabSwitcherMenuButtonActiveClass)));
    }
    async isTabSwitcherMenuOpen() {
        return (this.tabSwitcherMenuButton &&
            (await this.tabSwitcherMenuButton.hasClass(this.tabSwitcherMenuButtonOpenClass)));
    }
    /**
     * Toggles the tabs menu switcher to expanded or collapsed if it is active.
     * Silently returns no error if the switcher menu button isn't active.
     *
     * @param expand Optional flag to indicate if the toggle should instead ensure expand or collapse.
     */
    async toggleTabSwitcherMenu(expand) {
        if (!(await this.isTabSwitcherMenuActive())) {
            return;
        }
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const isMenuOpen = await this.isTabSwitcherMenuOpen();
            const isMenuInDesiredState = isMenuOpen === expand;
            if (!isMenuInDesiredState) {
                await this.tabSwitcherMenuButton.click();
            }
            return isMenuInDesiredState;
        }, null, "Expected the tab switcher menu to be " + (expand ? "visible" : "hidden"));
    }
    async clickFirstMatchingTabName(tabItemContainer, tabLabel) {
        const tab = tabItemContainer
            .all(By_1.default.className(this.tabLabelClass))
            .filter((element) => {
            //  return el.Text.Contains(tabLabel);
            const promise = checkElementHasSpecifiedLabel(element, tabLabel);
            return promise;
        })
            .first();
        await tab.click();
        async function checkElementHasSpecifiedLabel(element, tabLabel) {
            const elementText = await element.getText();
            return elementText.includes(tabLabel);
        }
    }
}
exports.default = TabList;
//# sourceMappingURL=TabList.js.map