"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PortalElement_1 = require("../PortalElement");
const BrowserAutomation_1 = require("../BrowserAutomation");
const Locators_1 = require("../Locators");
const TabMenuBladeItem_1 = require("./MenuBlade/TabMenuBladeItem");
const String = require("../Utils/String");
class TabMenu extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "fxc-tabmenu";
        this.tabMenuSectionClassName = "fxc-section-tabs";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return Locators_1.By.className(this.rootClassName);
    }
    /**
     * Gets the collection of menu items.
     *
     * @returns an array of menu items.
     */
    async getTabMenuItems() {
        const tabMenuItems = this.all(TabMenuBladeItem_1.TabMenuItem);
        const tabMenuItemsAsPortalElements = await tabMenuItems.asPortalElements();
        return tabMenuItemsAsPortalElements;
    }
    /**
     * Gets the specified menu item.
     *
     * @param title The title of the menu item.
     * @param comparer The method used to compare menu items to text, the default behavior is to check whether the menu item text string contains the title string.
     * @returns The menu item.
     */
    async getTabMenuItem(title, comparer = null) {
        // default method to find the item in the menu is if that item "contains" the title
        if (comparer === null) {
            comparer = async (menuItem, value) => {
                const menuItemText = await menuItem.getText();
                return menuItemText.includes(value);
            };
        }
        return (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const menuGrid = await this.getTabList();
            const filteredList = menuGrid.all(TabMenuBladeItem_1.TabMenuItem).filter((tabMenuItem) => {
                return Promise.resolve(comparer(tabMenuItem, title));
            });
            if ((await filteredList.count()) > 0) {
                return (await filteredList.asPortalElements())[0];
            }
            else {
                return false;
            }
        }, null, String.format("Could not find the tab menu item with the title <{0}>", title));
    }
    /**
     * Gets the menu grid.
     *
     * @returns the menu grid elemennt.
     */
    async getTabList() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const tabList = this.element(Locators_1.By.className(this.tabMenuSectionClassName));
            if (await tabList.isDisplayed()) {
                return tabList;
            }
            return null;
        }, null, "TabList not found.");
    }
}
exports.default = TabMenu;
//# sourceMappingURL=TabMenu.js.map