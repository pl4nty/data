"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsFlyout = exports.SettingsViews = void 0;
const By_1 = require("../Locators/By");
const PortalFxResources_1 = require("../PortalFxResources");
const PortalElement_1 = require("../PortalElement");
const Logger_1 = require("../Logger");
/**
 * The views in the settings flyout.
 */
var SettingsViews;
(function (SettingsViews) {
    SettingsViews[SettingsViews["AppearanceAndStartupViews"] = 0] = "AppearanceAndStartupViews";
    SettingsViews[SettingsViews["Directories"] = 1] = "Directories";
    SettingsViews[SettingsViews["Filters"] = 2] = "Filters";
    SettingsViews[SettingsViews["LanguageAndRegion"] = 3] = "LanguageAndRegion";
    SettingsViews[SettingsViews["MoreAzureResources"] = 4] = "MoreAzureResources";
    SettingsViews[SettingsViews["MyInformation"] = 5] = "MyInformation";
    SettingsViews[SettingsViews["Overview"] = 6] = "Overview";
    SettingsViews[SettingsViews["SigningOutAndNotifications"] = 7] = "SigningOutAndNotifications";
})(SettingsViews || (exports.SettingsViews = SettingsViews = {}));
const viewToLabelMap = {
    [SettingsViews.Directories]: PortalFxResources_1.settingsFlyout.directoriesTitle,
    [SettingsViews.Filters]: PortalFxResources_1.settingsFlyout.filtersTitle,
    [SettingsViews.Overview]: PortalFxResources_1.settingsFlyout.overviewTitle,
    [SettingsViews.AppearanceAndStartupViews]: PortalFxResources_1.settingsFlyout.appearanceAndStartupViewsTitle,
    [SettingsViews.LanguageAndRegion]: PortalFxResources_1.settingsFlyout.languageAndRegionTitle,
    [SettingsViews.MyInformation]: PortalFxResources_1.settingsFlyout.myInformationTitle,
    [SettingsViews.SigningOutAndNotifications]: PortalFxResources_1.settingsFlyout.signoutAndNotificationsTitle,
    [SettingsViews.MoreAzureResources]: PortalFxResources_1.settingsFlyout.moreAzureResources,
};
/**
 * A test handle for the new full screen settings page.
 */
class SettingsFlyout extends PortalElement_1.default {
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className("fxs-settings-flyout");
    }
    /**
     * Returns a flag indicating whether or not the settings flyout is still loading.
     */
    async isLoading() {
        if (await this.hasClass("fxs-progress" /* ClassNames.LoadingIndicatorClass */)) {
            return true;
        }
        const items = await this.all(By_1.default.className("fxs-progress" /* ClassNames.LoadingIndicatorClass */)).asPortalElements();
        for (const item of items) {
            if (await item.isDisplayed()) {
                return true;
            }
        }
        return false;
    }
    /**
     * Navigates to the specified area of settings.
     *
     * @param view The tab to navigate to.
     */
    async openSettingsView(view) {
        const expectedLabel = viewToLabelMap[view];
        const viewNavMenuEntries = this.element(By_1.default.className("fxs-settings-menu-list" /* ClassNames.NavMenu */)).all(By_1.default.className("fxs-settings-menu-item" /* ClassNames.NavMenuItem */));
        for (const entry of await viewNavMenuEntries.asPortalElements()) {
            if ((await entry.getText()) === expectedLabel) {
                return await entry.click();
            }
        }
        throw new Error(`Could not locate the left nav item for provided view "${expectedLabel || view}"`);
    }
    /**
     * Navigates to the specified tab of settings.
     *
     * @param linkText The link text that the tab will navigate to.
     */
    async openSettingsViewFromLink(linkText) {
        const menuLinks = this.element(By_1.default.className("fxs-settings-menu-footer" /* ClassNames.MenuFooter */))
            .element(By_1.default.className("fxs-settings-list" /* ClassNames.SettingLinks */))
            .all(By_1.default.className("fxs-fxclick" /* ClassNames.Link */));
        for (const entry of await menuLinks.asPortalElements()) {
            const actualLinkText = await entry.getText();
            if (actualLinkText === linkText) {
                return await entry.click();
            }
            else {
                Logger_1.default.diagnostics(`Adding custom url '${actualLinkText}' to list of setting links`);
            }
        }
        throw new Error(`Could not locate the menu link for provided link text "${linkText}"`);
    }
}
exports.SettingsFlyout = SettingsFlyout;
//# sourceMappingURL=SettingsFlyout.js.map