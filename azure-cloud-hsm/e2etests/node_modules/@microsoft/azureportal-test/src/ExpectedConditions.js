"use strict";
/**
 * ------------------------------------------- START OF THIRD PARTY NOTICE -----------------------------------------
 * This file is based on or incorporates material from the projects listed below (Third Party IP).The original copyright notice and the license under which Microsoft received such Third Party IP, are set forth below.Such licenses and notices are provided for informational purposes only.Microsoft licenses the Third Party IP to you under the licensing terms for the Microsoft product.Microsoft reserves all other rights not expressly granted under this agreement, whether by implication, estoppel or otherwise.
 *
 * angular - protractor v3.0
 * Copyright(c) 2010- 2015 Google, Inc.
 *
 * Provided for Informational Purposes Only
 * MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ----------------------------------------------- END OF THIRD PARTY NOTICE ------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.doesNotHaveAttributeValue = exports.hasAttributeValue = exports.isNotDisplayed = exports.isDisplayed = exports.isNotPresent = exports.isPresent = void 0;
/**
 * An expectation for checking that an element is present on the DOM
 * of a page. This does not necessarily mean that the element is visible.
 *
 * @param {PortalElement} portalElement The element to check.
 * @returns A promise representing whether the element is present.
 */
function isPresent(portalElement) {
    const fn = portalElement.isPresent.bind(portalElement);
    return () => Promise.resolve((async () => await fn())());
}
exports.isPresent = isPresent;
/**
 * An expectation for checking that an element is not present on the DOM
 * of a page.
 *
 * @param {PortalElement} portalElement The element to check.
 * @returns A promise representing whether the element is not present.
 */
function isNotPresent(portalElement) {
    const fn = portalElement.isNotPresent.bind(portalElement);
    return () => Promise.resolve((async () => await fn())());
}
exports.isNotPresent = isNotPresent;
/**
 * An expectation for checking that an element is visible
 * of a page.
 *
 * @param {PortalElement} portalElement The element to check.
 * @returns A promise representing whether the element is visible
 */
function isDisplayed(portalElement) {
    const fn = portalElement.isDisplayed.bind(portalElement);
    return () => Promise.resolve((async () => await fn())());
}
exports.isDisplayed = isDisplayed;
/**
 * An expectation for checking that an element is either invisible or not
 * present on the DOM.
 *
 * @param {PortalElement} portalElement The element to check.
 * @returns A promise representing whether the element is invisible.
 */
function isNotDisplayed(portalElement) {
    const fn = portalElement.isNotDisplayed.bind(portalElement);
    return () => Promise.resolve((async () => await fn())());
}
exports.isNotDisplayed = isNotDisplayed;
/**
 * An expectation for checking that the specified attribute has the specified value in an element.
 *
 * @param {PortalElement} portalElement The element to check.
 * @param {string} attributeName The name of the attribute.
 * @param {string} attributeValue The value of the attribute.
 * @returns A promise representing whether the specified attribute has the specified value in the element.
 */
function hasAttributeValue(portalElement, attributeName, attributeValue) {
    const fn = portalElement.hasAttributeValue.bind(portalElement, attributeName, attributeValue);
    return () => Promise.resolve((async () => await fn())());
}
exports.hasAttributeValue = hasAttributeValue;
/**
 * An expectation for checking that the specified attribute does not have the specified value in an element.
 *
 * @param {PortalElement} portalElement The element to check.
 * @param {string} attributeName The name of the attribute.
 * @param {string} attributeValue The value of the attribute.
 * @returns A promise representing whether the specified attribute does not have the specified value in the element.
 */
function doesNotHaveAttributeValue(portalElement, attributeName, attributeValue) {
    const fn = portalElement.doesNotHaveAttributeValue.bind(portalElement, attributeName, attributeValue);
    return () => Promise.resolve((async () => await fn())());
}
exports.doesNotHaveAttributeValue = doesNotHaveAttributeValue;
//# sourceMappingURL=ExpectedConditions.js.map