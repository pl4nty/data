"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const By_1 = require("../Locators/By");
const Part_1 = require("./Part");
const TileSize_1 = require("./TileSize");
/**
 * Represents a PricingTier part.
 */
class PricingTierPart extends Part_1.default {
    constructor() {
        super(...arguments);
        this.specCodeClassName = "msportalfx-pricingTier-specCode";
        this.firstTextClassName = "msportalfx-pricingTier-firstText";
        this.multiSpecClassName = "msportalfx-layoutChildren-child";
        this.iconClassName = "msportalfx-pricingTier-icon";
        this.secondTextClassName = "msportalfx-pricingTier-secondText";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.content(By_1.default.css(this.partCss), By_1.default.className("msportalfx-pricingTier"));
    }
    /**
     * Gets a value indicating whether or not this element is activated.
     */
    async specCode() {
        return await this.getSpecCode();
    }
    async getSpecCode() {
        const speCodeElement = this.element(By_1.default.className(this.specCodeClassName));
        return speCodeElement !== null ? await speCodeElement.getText() : null;
    }
    /**
     * Gets a value of first text.
     */
    async firstText() {
        return await this.getFirstText();
    }
    async getFirstText() {
        if ((await this.partSize()) === TileSize_1.TileSize.Mini) {
            return null;
        }
        return await this.element(By_1.default.className(this.firstTextClassName)).getText();
    }
    async getSecondText() {
        if ((await this.partSize()) === TileSize_1.TileSize.Mini) {
            return null;
        }
        return await this.element(By_1.default.className(this.secondTextClassName)).getText();
    }
    /**
     * Gets a value of spec display.
     */
    async specs() {
        const SpecDisplayArray = [];
        const allSpecclass = await this.all(By_1.default.className(this.multiSpecClassName)).asPortalElements();
        for (const part of allSpecclass) {
            if (!(await part.elementOrDefaultAsync(By_1.default.className(this.iconClassName)))) {
                SpecDisplayArray.push({
                    firstText: await this.getFirstText(),
                    secondText: await this.getSecondText(),
                    specCode: await this.getSpecCode(),
                });
            }
        }
        return SpecDisplayArray;
    }
}
exports.default = PricingTierPart;
//# sourceMappingURL=PricingTierPart.js.map