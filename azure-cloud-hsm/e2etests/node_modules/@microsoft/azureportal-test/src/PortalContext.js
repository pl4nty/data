"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PortalContextPropNames = exports.PortalContextBase = exports.PlaywrightConfiguration = exports.AutomationConfiguration = void 0;
class AutomationConfiguration {
}
exports.AutomationConfiguration = AutomationConfiguration;
class PlaywrightConfiguration {
}
exports.PlaywrightConfiguration = PlaywrightConfiguration;
class PortalContextBase {
    constructor() {
        /**
         * The set of setting for playwright browser automation.
         */
        this.playwright = null;
        /**
         * The set of capabilities enabled in the webdriver session.
         * For a list of available capabilities, see https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities
         */
        this.capabilities = null;
        /**
         * The browserstack url the tests should run on.
         * This field needs to be set if the tests are meant to run on browserstack
         * and should not be set if the tests are meant to run locally.
         */
        this.browserStackUrl = null;
        /**
         * The path to the ChromeDriver binary.
         */
        this.chromeDriverPath = null;
        /**
         * The url of the Portal.
         */
        this.portalUrl = null;
        /**
         * The url of the page where signin is performed.
         */
        this.signInUrl = null;
        /**
         * A timeout for a user to manually sign in to the portal.
         */
        this.manualSignInTimeout = null;
        /**
         * A user's email to manually sign in to the portal.
         */
        this.manualSignInEmail = null;
        /**
         * Email of the user used to sign in to the Portal.
         */
        this.signInEmail = null;
        /**
         * Password of the user used to sign in to the Portal.
         */
        this.signInPassword = null;
        /**
         * Boolean indicating if silent auth should used to sign in to the Portal.
         */
        this.useSilentAuthLogin = false;
        /**
         * Configuration for silent auth
         */
        this.silentAuthConfig = null;
        /**
         * Configuration for cert-based auth
         */
        this.certBasedAuth = false;
        /**
         * The set of features to enable while navigating within the Portal.
         */
        this.features = null;
        /**
         * The list of patch files to load within the Portal.
         */
        this.patches = null;
        /**
         * Flag to enable executing the provided patches in Portal shell in addition to the extensions
         */
        this.patchShell = null;
        /**
         * The set of extensions to side load while navigating within the Portal.
         */
        this.testExtensions = null;
        /**
         * The set of timeouts used to override the default timeouts.
         * e.g.
         * timeouts: {
         *      timeout: 15000  //Overrides the default short timeout of 10000 (10 seconds).
         *      longTimeout: 70000 //Overrides the default long timetout of 60000 (60 seconds).
         * }
         */
        this.timeouts = null;
        /**
         * browser session Id
         */
        this.sessionId = null;
        /**
         * fake user Id
         */
        this.fakeUser = null;
        /**
         * Partner team running the tests.
         */
        this.partnerTeamEmail = null;
        /**
         * Browser automation type to use.
         */
        this.browserAutomation = null;
        /**
         * Tenant id to navigate to.
         */
        this.tenantId = null;
        /**
         * Flag to enable collection of code coverage data (Playwright only)
         */
        this.codeCoverage = null;
        /**
         * Options for code coverage analysis (Playwright only)
         */
        this.codeCoverageOptions = null;
        /**
         * Flag indicating whether to initialize the directLine token during tests.
         */
        this.initializeDirectLine = false;
    }
}
exports.PortalContextBase = PortalContextBase;
/**
 * Represents the set of keys for the default options.
 */
exports.PortalContextPropNames = Object.keys(new PortalContextBase());
//# sourceMappingURL=PortalContext.js.map