"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Locators_1 = require("./Locators");
const PortalElement_1 = require("./PortalElement");
const Utils_1 = require("./Utils");
const BrowserAutomation_1 = require("./BrowserAutomation");
const PortalShell_1 = require("./PortalShell");
const RunScripts_1 = require("./Utils/RunScripts");
/**
 * Represents the Portal Co branding Page.
 */
class CoBrandPage extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "liveId-root";
        this.vsOnlineBackgroundClassName = "liveId-background-vsonline";
        this.portalBackgroundClassName = "liveId-background";
        this.linksContainerClassName = "liveId-signup-link-container";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return Locators_1.By.className(this.rootClassName);
    }
    /**
     * Gets the Try again link.
     */
    async hasVSOnlineBackground() {
        return ((await PortalShell_1.default.getPortalShell().elementOrDefaultAsync(Locators_1.By.className(this.vsOnlineBackgroundClassName))) !== null);
    }
    /**
     * Gets the Get help link.
     */
    async hasPortalBackground() {
        return ((await PortalShell_1.default.getPortalShell().elementOrDefaultAsync(Locators_1.By.className(this.portalBackgroundClassName))) !==
            null);
    }
    /**
     * Gets the Sign out link.
     */
    async linksContainer() {
        return await PortalShell_1.default.getPortalShell().elementOrDefaultAsync(Locators_1.By.className(this.linksContainerClassName));
    }
    /**
     * Navigates to the co branding page
     *
     * @param portalUrl The url to the portal</param>
     * <returns>The Co Brand page</returns>
     */
    static async navigateToCoBrandPage(portalUrl, market = null, callbackContext = null, wait = true) {
        const shellUri = new URL(portalUrl);
        const queryBuilder = new Utils_1.UriBuilder.QueryStringBuilder("id=12");
        if (market) {
            queryBuilder.setParameter("mkt", market);
        }
        if (callbackContext) {
            queryBuilder.setParameter("cbcxt", callbackContext);
        }
        const builder = new Utils_1.UriBuilder.UriBuilder(shellUri.toString() + "/cobrand");
        builder.query = queryBuilder;
        // Get the navigation start time so we can use it later to know when the portal has initiated a reload after resetting desktop settings
        let navStartTime = await CoBrandPage.getNavigationStartTime();
        // If we get an unparsable value then set the start time to -2 so that we don't get stuck waiting later.
        if (navStartTime === -1) {
            navStartTime = -2;
        }
        //Navigate...
        await (0, RunScripts_1.runScript)(`window.location='${builder.toString()}'`);
        if (wait) {
            // Wait for the navigation start time to change so that we know when the portal has refreshed
            await (0, BrowserAutomation_1.getBrowser)().wait(async () => navStartTime !== (await CoBrandPage.getNavigationStartTime()), null, "Cobrand page did not reload after resetting desktop state.");
            return await (0, BrowserAutomation_1.getBrowser)().wait(() => PortalShell_1.default.getPortalShell().element(CoBrandPage), 3000, "Expected to find the cobranding page.");
        }
        else {
            return null;
        }
    }
    static async getNavigationStartTime() {
        let navStartTime = -1;
        const navStartTimeObject = await (0, BrowserAutomation_1.runAutomation)(async (wd) => await wd.executeScript("return performance.timing.navigationStart"), async (pw) => await pw.executeScript("performance.timing.navigationStart"));
        // If performance.timing.navigationStart not supported or we can't parse it, return -1
        if (navStartTimeObject && !parseInt(navStartTimeObject.toString())) {
            navStartTime = -1;
        }
        navStartTime = parseInt(navStartTimeObject.toString());
        return navStartTime;
    }
}
exports.default = CoBrandPage;
//# sourceMappingURL=CoBrandPage.js.map