"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const By_1 = require("./Locators/By");
const PortalElement_1 = require("./PortalElement");
const BrowserAutomation_1 = require("./BrowserAutomation");
const resources = require("./PortalFxResources");
const Constants = require("./Constants");
/**
 * Represents the Portal Splash screen.
 */
class SplashScreen extends PortalElement_1.default {
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className("fxs-splashscreen");
    }
    _getDialogTitle(dialogType) {
        switch (dialogType) {
            case Constants.SplashScreenDialogType.extension:
                return resources.untrustedExtension;
            case Constants.SplashScreenDialogType.patch:
                return resources.untrustedPatch;
            default:
                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                throw new Error(`unknown dialog type: ${dialogType}`);
        }
    }
    async clickUntrustedDialogOkButton(dialogType) {
        const allowDialogTitle = this.element(By_1.default.text(this._getDialogTitle(dialogType)));
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => await allowDialogTitle.isPresent());
        const allowButtonXPath = `${By_1.default.currentNodeXPathPrefix()}descendant::button[text()="${resources.allow}"] | ${By_1.default.currentNodeXPathPrefix()}descendant::span[text()="${resources.allow}"]`;
        return await this.element(By_1.default.xpath(allowButtonXPath)).click();
    }
}
exports.default = SplashScreen;
//# sourceMappingURL=SplashScreen.js.map