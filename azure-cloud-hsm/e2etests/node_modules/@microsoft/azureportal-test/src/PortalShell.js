"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Locators_1 = require("./Locators");
const PortalElement_1 = require("./PortalElement");
const ElementArrayFinder_1 = require("./ElementArrayFinder");
const Blade_1 = require("./Blades/Blade");
/**
 * Internal class that represents the current webpage body and has helper methods to get global portal elemets
 */
class PortalShell extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.portalRootElement = "fxs-portal";
        this.organizeModeClass = "fxs-desktop-organize";
    }
    static getPortalShell() {
        return ElementArrayFinder_1.default.element(PortalShell);
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return Locators_1.By.css("body");
    }
    /**
     * Gets the portal element.
     */
    getPortalElement() {
        return this.element(Locators_1.By.className(this.portalRootElement));
    }
    /**
     * Checks whether portal is in DefaultMode or not
     *
     * @returns A promise that will be resolved when the portal is in DefaultMode.
     */
    async isInDefaultMode() {
        return !(await this.isInOrganizeMode());
    }
    async isInOrganizeMode() {
        // fxs-desktop-organize: the class on portal root when dashboard turns into organize mode
        const portal = this.getPortalElement();
        return await portal.hasClass(this.organizeModeClass);
    }
    /**
     * Gets a Blade object that represents the blade that matches the specified options.
     *
     * @param options The options used to find the blade.
     * @param bladeType The type of blade to return.
     * @returns A Blade object that represents the blade that matches the specified options.
     */
    static blade(options) {
        let locator;
        let blade;
        if (options.bladeType) {
            locator = new options.bladeType().buildLocator(options);
            blade = ElementArrayFinder_1.default.element(locator).asType(options.bladeType);
        }
        else {
            locator = new Blade_1.default().buildLocator(options);
            blade = ElementArrayFinder_1.default.element(locator).asType(Blade_1.default);
        }
        return blade;
    }
}
exports.default = PortalShell;
//# sourceMappingURL=PortalShell.js.map