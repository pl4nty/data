"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.flushLogs = exports.startLogCapture = exports.logIfTrue = exports.enable = exports.bind = void 0;
const debug = require("debug");
const path = require("path");
const util = require("util");
const fs = require("fs");
const html_minifier_terser_1 = require("html-minifier-terser");
const ejs_1 = require("ejs");
const defaultTemplateFullPath = path.join(__dirname, "/../scripts/LogSummaryTemplate.ejs");
let logs = [];
let logCaptureCallback = (_message) => { };
let boundLogCallback = null;
debug.log = (...data) => {
    const message = util.format(...data);
    logCaptureCallback(message);
    boundLogCallback ? boundLogCallback(message) : console.info.apply(this, [message]);
};
const warning = debug("testFx:warning");
const information = debug("testFx:information");
const diagnostics = debug("testFx:diagnostics");
const quarantine = debug("testFx:quarantine"); // The namespace is used for logging skipped/quarantined tests
const trace = debug("testFx:trace"); // The namespace is used for logging test traces
const Log = {
    warning,
    information,
    diagnostics,
    quarantine,
    trace,
};
function logCurrentVersion() {
    information(`Test framework version: ${JSON.parse(fs.readFileSync(path.join(__dirname, "../package.json"), "utf-8")).version}`);
}
/**
 * Re-routes test framework logs to a custom logger.
 *
 * @param {(message: string) => void} func A function the logs will get re-routed to.
 */
function bind(func) {
    boundLogCallback = func;
    warning.useColors = false;
    information.useColors = false;
    diagnostics.useColors = false;
    quarantine.useColors = false;
    trace.useColors = false;
    logCurrentVersion();
}
exports.bind = bind;
/**
 * Enable log namespace.
 *
 * @param namespace A log namespace to enable.
 */
function enable(namespace) {
    debug.enable(namespace);
}
exports.enable = enable;
/**
 * Logs a message to a specified channel if a condition is true.
 *
 * @param {debug.Debugger} logger A log channel to output the message to.
 * @param {boolean} condition A condition to check.
 * @param {string} text A message to log.
 * @returns {boolean} Checked condition.
 */
function logIfTrue(logger, condition, text) {
    if (condition) {
        logger(text);
    }
    return condition;
}
exports.logIfTrue = logIfTrue;
/**
 * Starts capturing logs to flush them into a file later.
 */
function startLogCapture() {
    logs = [];
    logCaptureCallback = (message) => {
        const dateRegex = () => /(\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d)\.\d{3}Z/;
        let timestamp = dateRegex().exec(dateRegex().test(message) ? message : new Date().toISOString())[1];
        timestamp = `${timestamp.replace("T", " ")} UTC`;
        const correctedMsgArr = message
            .replace(dateRegex(), "") // Removing the timestamp at the beginning of the message.
            // eslint-disable-next-line unicorn/prefer-string-replace-all
            .replace(/(testFx(?::\S+)+)/g, "[$1]") // Enclosing testFx log prefix in square brackets.
            // eslint-disable-next-line no-control-regex, regexp/no-control-character, unicorn/prefer-string-replace-all
            .replace(/[\u001b\u009b][[()#;?]*(?:\d{1,4}(?:;\d{0,4})*)?[0-9A-ORZcf-nqry=><]/g, ""); // Removing color coding in ASCII.
        logs.push({ message: correctedMsgArr, timestamp: timestamp });
    };
}
exports.startLogCapture = startLogCapture;
function retrieveLogTemplate(templatePath) {
    const templateFullPath = templatePath && path.resolve(process.cwd(), templatePath);
    if (templateFullPath) {
        if (fs.existsSync(templateFullPath)) {
            return fs.readFileSync(templateFullPath, "utf-8");
        }
        else {
            warning(`Couldn't find the provided log template at: '${templateFullPath}'\nTrying to fall back to the default log template at: '${defaultTemplateFullPath}'`);
        }
    }
    return fs.readFileSync(defaultTemplateFullPath, "utf-8");
}
/**
 * Flushes logs into a file.
 *
 * @param {string} dirPrefix A relative path inside the "Log" directory that will be created inside the current working directory to store the "LogSnippet.md" file.
 * @param {{ [key: string]: string }} testMetadata Information about the test that will be displayed in `Test Case Details` section of the log (when using default template).
 * @param {string} error A message that will be displayed in `Error Message` section of the log (when using default template).
 * @param {string} templatePath A path to a template that will be used by `ejs` module to generate the log file. Inside your own template, you can use objects `metadata`, `error` and `logs`. Visit [https://ejs.co/](https://ejs.co/) for more info about templates.
 */
function flushLogs(dirPrefix, testMetadata, error, templatePath) {
    const logsObj = {
        logs: logs,
        error: error ?? undefined,
        metadata: testMetadata ?? undefined,
    };
    logs = [];
    logCaptureCallback = (_message) => { };
    let template;
    try {
        template = retrieveLogTemplate(templatePath);
    }
    catch (e) {
        warning(`Aborting log flushing, error while retrieving log template: ${e}`);
        return;
    }
    (0, html_minifier_terser_1.minify)((0, ejs_1.render)(template, logsObj), { html5: true, collapseWhitespace: true, removeComments: true, minifyCSS: true })
        .then((html) => {
        // eslint-disable-next-line unicorn/prefer-string-replace-all
        html = html.replace(/&amp;thinsp;/g, "&thinsp;");
        const logsDir = path.join(process.cwd(), "Logs");
        // eslint-disable-next-line unicorn/prefer-string-replace-all
        dirPrefix = `${dirPrefix.replace(/[|&;$%@"<>()+,: ]/g, "_")}_${Date.now().toString()}`;
        const testLogDir = path.join(logsDir, dirPrefix);
        fs.mkdirSync(testLogDir, { recursive: true });
        const fileName = path.join(testLogDir, "LogSnippet.md"); // Use .md extension for CloudTest to recognize the file
        fs.writeFileSync(fileName, html);
    })
        .catch((e) => {
        warning(`Error while flushing logs: ${e}`);
    });
}
exports.flushLogs = flushLogs;
// if DEBUG environment variable isn't set, enable defaults
if (!process.env.DEBUG) {
    // Review debug package readme to enable/disable namespaces via environment variables
    // e.g set DEBUG=*,-not_this
    // https://www.npmjs.com/package/debug#windows-command-prompt-notes
    enable("testFx:warning,testFx:information,-testFx:diagnostics,testFx:quarantine,testFx:trace");
}
logCurrentVersion();
exports.default = Log;
//# sourceMappingURL=Logger.js.map