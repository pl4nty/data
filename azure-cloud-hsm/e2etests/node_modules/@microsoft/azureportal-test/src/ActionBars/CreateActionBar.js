"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const By_1 = require("../Locators/By");
const ActionBar_1 = require("./ActionBar");
const CreateActionBarCheckBoxField_1 = require("./CreateActionBarCheckBoxField");
const resources = require("../PortalFxResources");
const CheckBoxField_1 = require("../Controls/CheckBoxField");
const BrowserAutomation_1 = require("../BrowserAutomation");
/**
 * Represents a CreateActionBar.
 */
class CreateActionBar extends ActionBar_1.default {
    constructor() {
        super(...arguments);
        this.uiShieldClassName = "fxs-bladeActionBar-blockUiShield";
        /**
         * The create button.
         */
        this.createButton = this.button({ locator: By_1.default.css(".fxc-createActionBar-okButton") });
        /**
         * The pin to dashboard button.
         */
        this.pinToDashboardCheckbox = this.field(CreateActionBarCheckBoxField_1.default, { label: resources.pinToDashboard });
        /**
         * Add Startboard Part CheckBox.
         */
        this.addStartboardPartCheckBox = this.all(CheckBoxField_1.default).first();
    }
    /**
     * Gets a field contained in this blade that matches the given options.
     *
     * @param fieldType The type of field.
     * @param options The options used to locate the field.
     * @returns An instance of the field.
     */
    field(fieldType, options) {
        const fieldInstance = new fieldType();
        const locator = fieldInstance.buildLocator(options);
        return this.element(locator).asType(fieldType);
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.css(".fxc-createActionBar");
    }
    /**
     * Clicks the OK button in the create action bar.
     */
    async clickOk(forceChecked = false) {
        if (forceChecked) {
            await this.updateCheckBox(true);
        }
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return await this.createButton.isEnabled();
        }, null, "Can't click the Create Action Bar OK Button because it is not enabled.");
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return await this.isValid();
        }, null, "The form is invalid.  Clicking the ok button will only show the infoballoon and then disable the button.");
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return !(await this.uiShield.isDisplayed());
        }, null, "Can't click the Create Action Bar OK Button because the action bar is covered by its UI shield.");
        await this.createButton.click();
    }
    /**
     * The valid status of the form associated with the create action bar
     */
    async isValid() {
        // Because the action bar vm is not actually bound directly to the action bar, we will need to access it via accessing the viewmodel of something shown.  In this case, we're using the button.
        const valid = await (0, BrowserAutomation_1.runAutomation)(async (wd) => await wd.executeScript("return ko.dataFor(arguments[0]).data.valid()", this.createButton), async () => await (await this.createButton.getWebElements())[0].executeScript("(htmlElem) => ko.dataFor(htmlElem).data.valid()"));
        if (valid) {
            return valid;
        }
        else {
            // if valid is null, then no validations were passed into the action bar.  Return true in this case.
            return true;
        }
    }
    /**
     * Gets the associated UI shield element.
     */
    get uiShield() {
        return this.getParent().element(By_1.default.className(this.uiShieldClassName));
    }
    /**
     * Update the CheckBox.
     *
     * @param {boolean} check whether to update the checkbox or not.
     */
    async updateCheckBox(check) {
        if ((check && !(await this.addStartboardPartCheckBox.isChecked())) ||
            (!check && (await this.addStartboardPartCheckBox.isChecked()))) {
            await this.addStartboardPartCheckBox.click();
        }
    }
}
exports.default = CreateActionBar;
//# sourceMappingURL=CreateActionBar.js.map