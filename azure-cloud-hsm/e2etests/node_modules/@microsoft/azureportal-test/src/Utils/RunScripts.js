"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitUntilScriptsCanExecute = exports.runScript = exports.runAsyncScript = void 0;
const Logger_1 = require("../Logger");
const BrowserAutomation_1 = require("../BrowserAutomation");
const PortalConfigurationManager_1 = require("../PortalConfigurationManager");
async function runAsyncScript(script, { timeout = PortalConfigurationManager_1.default.portalContext.timeouts.timeout, scriptArgs = [], } = {}) {
    return new Promise((resolve, reject) => {
        (0, BrowserAutomation_1.runAutomation)(async (wd) => {
            return wd.executeAsyncScript(script, ...scriptArgs);
        }, async (pw) => {
            return pw.executeAsyncScript(`
            new Promise((resolve, reject) => {
                (async function(){${script}}).apply(null, [${JSON.stringify(scriptArgs)},resolve]);
            });
        `, ...scriptArgs);
        }).then(resolve, reject);
        setTimeout(() => reject(new Error("Script timed out")), timeout);
    });
}
exports.runAsyncScript = runAsyncScript;
function runScript(script, { timeout = PortalConfigurationManager_1.default.portalContext.timeouts.timeout, scriptArgs = [], element, } = {}) {
    return new Promise((resolve, reject) => {
        (0, BrowserAutomation_1.runAutomationSync)(async (wd) => {
            return wd.executeScript(script, ...scriptArgs);
        }, async (pw) => {
            if (element) {
                return element.evaluate(`
                (function(){${script}}).apply(null, ${JSON.stringify(scriptArgs)});
                `, ...scriptArgs);
            }
            return pw.executeScript(`
            (function(){${script}}).apply(null, ${JSON.stringify(scriptArgs)});
            `, ...scriptArgs);
        }).then(resolve, reject);
        setTimeout(() => reject(new Error("Script timed out")), timeout);
    });
}
exports.runScript = runScript;
async function waitUntilScriptsCanExecute(timeout, waitForBootstrap = false) {
    timeout = timeout || PortalConfigurationManager_1.default.portalContext.timeouts.timeout;
    timeout =
        !waitForBootstrap ||
            (waitForBootstrap && timeout > PortalConfigurationManager_1.default.portalContext.timeouts.longTimeout)
            ? timeout
            : PortalConfigurationManager_1.default.portalContext.timeouts.longTimeout;
    return await (0, BrowserAutomation_1.getBrowser)()
        .wait(async () => await runAsyncScript(`
            const [_, resolve] = arguments;${waitForBootstrap
        ? `
            await new Promise((resolve) => {
                const interval = setInterval(() => {
                    if (MsPortalEarly.authBootstrapStatePromise) {
                        clearInterval(interval);
                        MsPortalEarly.authBootstrapStatePromise.then(resolve);
                    }
                }, 100);
            });`
        : ``}
            setTimeout(()=>resolve(true), 1000);
        `, { timeout: timeout }).catch(() => {
        Logger_1.default.diagnostics("Script can't run.");
        return false;
    }), timeout)
        .catch(() => false);
}
exports.waitUntilScriptsCanExecute = waitUntilScriptsCanExecute;
//# sourceMappingURL=RunScripts.js.map