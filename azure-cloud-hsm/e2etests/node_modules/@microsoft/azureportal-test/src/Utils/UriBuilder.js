"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UriBuilder = exports.QueryStringBuilder = void 0;
const Logger_1 = require("../Logger");
const uriBuilderWarning = Logger_1.default.warning.extend("UriBuilder");
const defaultLeadingSeparator = "?";
const parameterSeparator = "&";
const keyValueSeparator = "=";
const fragmentSeparator = "#";
/**
 * Provides basic query string manipulation functions.
 */
class QueryStringBuilder {
    /**
     * Initializes a new instance of the query string builder.
     *
     * @param qs The initial query string.
     * @param leadingSeparator The leading character of the query string. ? by default.
     */
    constructor(qs, leadingSeparator) {
        this._qs = {};
        if (leadingSeparator === undefined) {
            this._leadingSeparator = defaultLeadingSeparator;
        }
        else {
            this._leadingSeparator = leadingSeparator;
        }
        if (qs) {
            let input = qs;
            if (input.startsWith(this._leadingSeparator)) {
                input = input.slice(1);
            }
            const parts = input.split(parameterSeparator);
            parts.forEach((part) => {
                if (part) {
                    const equalsPosition = part.indexOf(keyValueSeparator);
                    const hasEquals = equalsPosition >= 0;
                    let key = hasEquals ? part.slice(0, equalsPosition) : part;
                    let value = hasEquals ? part.slice(equalsPosition + 1) : "";
                    if (key) {
                        key = decodeURIComponent(key);
                        value = decodeURIComponent(value);
                        this.setParameter(key, value);
                    }
                }
            });
        }
    }
    /**
     * Sets multiple parameters in the query string. Overwrites any existing values.
     *
     * @param keys The object that represents the key value pairs.
     * @returns The QueryStringBuilder instance.
     */
    setParameters(keys) {
        for (const v in keys) {
            this.setParameter(v, keys[v]);
        }
        return this;
    }
    /**
     * Sets a parameter in the query string. Overwrites any existing values.
     *
     * @param key The key of the parameter.
     * @param value The value of the parameter.
     * @returns The QueryStringBuilder instance.
     */
    setParameter(key, value) {
        if (value === null || value === undefined || value === "") {
            uriBuilderWarning(`Can't set query parameter to null, undefined or empty string values. If you want to remove a query parameter, please use 'QueryStringBuilder.removeParameter()' function.`);
        }
        else {
            this._qs[key] = value;
        }
        return this;
    }
    /**
     * Gets the value of a parameter in the query string.
     *
     * @param key The key of the parameter.
     * @returns The value of the parameter. Undefined if the value doesn't exist.
     */
    getParameter(key) {
        return this._qs[key];
    }
    /**
     * Gets all values of the query string as a stringmap.
     *
     * @returns StringMap of all query string key/value pairs.
     */
    getParameters() {
        return this._qs;
    }
    /**
     * Removes multiple parameters from the query string.
     *
     * @param keys The keys of the parameter.
     * @returns The QueryStringBuilder instance.
     */
    removeParameters(keys) {
        keys.forEach((key) => {
            this.removeParameter(key);
        });
        return this;
    }
    /**
     * Removes a parameter from the query string.
     *
     * @param key The key of the parameter.
     * @returns The QueryStringBuilder instance.
     */
    removeParameter(key) {
        delete this._qs[key];
        return this;
    }
    /**
     * Returns a string representation of the URI.
     *
     * @param includeLeadingSeparator Whether to emit the leading ?. Defaults to true.
     * @returns A string representation of the URI.
     */
    toString(includeLeadingSeparator = true) {
        let output = "";
        Object.keys(this._qs).forEach((key) => {
            output += `${parameterSeparator}${encodeURIComponent(key)}${keyValueSeparator}${encodeURIComponent(this._qs[key])}`;
        });
        if (output) {
            output = output.slice(1);
            if (includeLeadingSeparator) {
                output = this._leadingSeparator + output;
            }
        }
        return output;
    }
}
exports.QueryStringBuilder = QueryStringBuilder;
/**
 * Provides basic URI manipulation functions.
 */
class UriBuilder {
    /**
     * Initializes a new instance of the URI.
     */
    constructor(uri) {
        const input = uri || "";
        const hashPosition = input.indexOf(fragmentSeparator);
        const hasHash = hashPosition >= 0;
        const uriWithoutHash = hasHash ? input.slice(0, hashPosition) : input;
        const hash = hasHash ? input.slice(hashPosition) : "";
        const qsPosition = uriWithoutHash.indexOf(defaultLeadingSeparator);
        const hasQueryString = qsPosition >= 0;
        const uriPath = hasQueryString ? uriWithoutHash.slice(0, qsPosition) : uriWithoutHash;
        const qs = hasQueryString ? uriWithoutHash.slice(qsPosition) : "";
        this.path = uriPath;
        this.query = new QueryStringBuilder(qs);
        this.fragment = hash;
    }
    /**
     * Returns a string representation of the URI.
     */
    toString() {
        const path = this.path || "";
        const query = (this.query && this.query.toString()) || "";
        let fragment = this.fragment;
        if (!fragment) {
            fragment = "";
        }
        else if (!fragment.startsWith(fragmentSeparator)) {
            fragment = fragmentSeparator + fragment;
        }
        const output = path + query + fragment;
        return output;
    }
}
exports.UriBuilder = UriBuilder;
//# sourceMappingURL=UriBuilder.js.map