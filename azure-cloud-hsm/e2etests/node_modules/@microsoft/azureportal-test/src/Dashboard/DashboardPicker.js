"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PortalElement_1 = require("../PortalElement");
const DropMenu_1 = require("../Controls/DropMenu");
const By_1 = require("../Locators/By");
const BrowserAutomation_1 = require("../BrowserAutomation");
class DashboardPicker extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "fxs-startboard-dropdown";
        this.dashboardTitleClassName = "fxs-startboard-title";
        this.dashboardItemClassName = "fxs-startboard-dropdown-dashboard";
        this.dashboardBrowseAllClassName = "fxs-startboard-button-browse";
    }
    /**
     * @returns A Locator instance for the dashboard picker.
     */
    get locator() {
        return By_1.default.className(this.rootClassName);
    }
    /**
     * @returns A promise that resolves to true when the element is displayed, false otherwise.
     */
    async waitUntilReady() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return await this.isDisplayed();
        }, null, "The dashboard picker is expected to be visible.");
    }
    /**
     * @returns the dashboards list.
     */
    get dashboards() {
        return this.all(By_1.default.className(this.dashboardItemClassName));
    }
    /**
     * Opens the DashboardPicker.
     */
    async open() {
        const dropMenu = this.getDropMenu();
        if (await dropMenu.isOpened()) {
            return;
        }
        await this.click();
        await this.waitTillContentOpen();
    }
    /**
     * Closes the DashboardPicker.
     */
    async close() {
        await this.click();
        await this.waitTillContentClose();
    }
    /**
     * @returns The current dashboard name.
     */
    async displayTitle() {
        return await this.element(By_1.default.className(this.dashboardTitleClassName)).getText();
    }
    /**
     * Selects the dashboard.
     *
     * @param dashboardName The dashboard name.
     */
    async pickDashboard(dashboardName) {
        await this.open();
        const dashboardItem = this.element(By_1.default.chained(By_1.default.className(this.dashboardItemClassName), By_1.default.text(dashboardName)));
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => await dashboardItem.isDisplayed(), null, `No items found matching the name '${dashboardName}' in the dashboard picker.`);
        await dashboardItem.click();
        await this.verifyCurrentDashboardName(dashboardName);
    }
    /**
     * Selects the Browse all dashboards.
     */
    async browseAll() {
        await this.open();
        const browseAllElement = this.element(By_1.default.className(this.dashboardBrowseAllClassName));
        await browseAllElement.click();
    }
    /**
     * Verifies the current dashboard by name.
     *
     * @param expectedDashboardName The expected dashboard name.
     */
    async verifyCurrentDashboardName(expectedDashboardName) {
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return (await this.displayTitle()) === expectedDashboardName;
        }, null, `The current dashboard name is expected to be '${expectedDashboardName}'.`);
    }
    getDropMenu() {
        return this.element(DropMenu_1.DropMenu);
    }
    async waitTillContentOpen() {
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const dropMenu = this.getDropMenu();
            return await dropMenu.isOpened();
        }, 30000, "The dashboard drop menu bar is expected to be open.");
    }
    async waitTillContentClose() {
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const dropMenu = this.getDropMenu();
            return !(await dropMenu.isOpened());
        }, 30000, "The dashboard drop menu bar is expected to be closed.");
    }
}
exports.default = DashboardPicker;
//# sourceMappingURL=DashboardPicker.js.map