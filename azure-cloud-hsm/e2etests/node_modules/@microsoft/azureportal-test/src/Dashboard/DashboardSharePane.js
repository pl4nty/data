"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BrowserAutomation_1 = require("../BrowserAutomation");
const portalFxResources = require("../PortalFxResources");
const ContextPane_1 = require("../ContextPane/ContextPane");
const Controls_1 = require("../Controls");
const By_1 = require("../Locators/By");
class DashboardSharePane extends ContextPane_1.default {
    constructor() {
        super(...arguments);
        this.bodyClassName = "fxs-sharedbpane-body";
        this.footerClassName = "fxs-sharedbpane-footer";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className("fxs-sharedbpane");
    }
    /**
     * Waits until DashboardSharePane is ready.
     */
    async waitUntilReady() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return await this.isDisplayed();
        }, null, "The dashboard share/unshare is expected to be visible.");
    }
    /**
     * Returns the body container of the share/unshare pane.
     */
    async bodyContainer() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return this.element(By_1.default.className(this.bodyClassName));
        }, null, "Could not find the body of the share/unshare pane.");
    }
    /**
     * Returns subscription dropdown field.
     */
    async subscriptionDropDown() {
        let subscriptionDropDown = null;
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const dropDowns = await this.all(Controls_1.GroupDropDownField);
            dropDowns.forEach(async (dropDown) => {
                if ((await dropDown.label.getText()) === portalFxResources.dashboard.sharePane.subscriptionLbl) {
                    subscriptionDropDown = dropDown;
                    return;
                }
            });
            return subscriptionDropDown !== null;
        }, null, "Could not find the subscription dropdown.");
        return subscriptionDropDown;
    }
    /**
     * Returns resourceGroup dropdown field.
     */
    async resourceGroupDropDown() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return this.element(Controls_1.ResourceGroupDropDownField);
        }, null, "Could not find the resourceGroup dropdown.");
    }
    /**
     * Returns default resourceGroup checkbox field.
     */
    async resourceGroupCheckBox() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return this.element(Controls_1.CheckBoxField);
        }, null, "Could not find the default resourceGroup checkbox.");
    }
    /**
     * Returns the publish/unpublish action button.
     */
    async actionButton() {
        const footer = this.element(By_1.default.className(this.footerClassName));
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return (await footer.all(Controls_1.SimpleButton).count()) === 1;
        }, null, "There should be only one action button in the action bar.");
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return footer.element(Controls_1.SimpleButton);
        }, null, "Could not find the action button.");
    }
    /**
     * Returns dashboard name text field.
     */
    async dashboardNameTextBox() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return this.element(Controls_1.TextField);
        }, null, "Could not find the dashboard name textbox.");
    }
    /**
     * Adds tags in share dashboard pane.
     *
     * @param tags The string map of tag names and tag values.
     */
    async addTags(tags) {
        const tagsGrid = this.all(Controls_1.TagsByResource).get(0);
        for (const tagName in tags) {
            await tagsGrid.addTag(tagName, tags[tagName]);
        }
    }
    /**
     * Removes tags from share dashboard pane.
     *
     * @param tags The string map of tag names and tag values.
     */
    async removeTags(tags) {
        const tagsGrid = this.all(Controls_1.TagsByResource).get(0);
        for (const tagName in tags) {
            await tagsGrid.removeTag(tagName, tags[tagName]);
        }
    }
}
exports.default = DashboardSharePane;
//# sourceMappingURL=DashboardSharePane.js.map