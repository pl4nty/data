"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Pill_1 = require("../Controls/Pill");
const GroupDropDownField_1 = require("../Controls/GroupDropDownField");
const BrowserAutomation_1 = require("../BrowserAutomation");
/**
 * Represents a dashboard filter pill.
 */
class DashboardFilterPill extends Pill_1.default {
    constructor() {
        super(...arguments);
        this.filterIdDropdownClass = "ext-startboard-filter-id";
        this.filterValueDropdownClass = "ext-startboard-filter-value";
        this.filterOperatorDropdownClass = "ext-startboard-filter-operation";
    }
    /**
     * Represents the filter id dropdown when the pill is in edit mode.
     */
    async filterIdDropdown() {
        return await this.findDropdownByClass(this.filterIdDropdownClass, "Could not find the filter pill's id dropdown");
    }
    /**
     * Represents the filter value dropdown when the pill is in edit mode.
     */
    async filterValueDropdown() {
        return await this.findDropdownByClass(this.filterValueDropdownClass, "Could not find the filter pill's value dropdown");
    }
    /**
     * Represents the filter operation dropdown when the pill is in edit mode.
     */
    async filterOperationDropdown() {
        return await this.findDropdownByClass(this.filterOperatorDropdownClass, "Could not find the filter pill's operations dropdown");
    }
    async findDropdownByClass(className, errorMessage) {
        let dropdown;
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            try {
                const alldropdown = await this.all(GroupDropDownField_1.default).asPortalElements();
                for (const dd of alldropdown) {
                    if (await dd.hasClass(className)) {
                        dropdown = dd;
                        break;
                    }
                }
                return dropdown !== null && dropdown.options.first();
            }
            catch {
                return false;
            }
        }, null, errorMessage);
        return dropdown;
    }
}
exports.default = DashboardFilterPill;
//# sourceMappingURL=DashboardFilterPill.js.map