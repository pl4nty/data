"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GridBase = require("../Controls/GridBase");
const BrowserAutomation_1 = require("../BrowserAutomation");
const PortalConfigurationManager_1 = require("../PortalConfigurationManager");
/**
 * Represents the related resources grid inside the BrowseResourceBlade.
 */
class BrowseResourceBladeGrid extends GridBase.BaseGrid {
    constructor(elementArrayFinder) {
        super(BrowseResourceBladeGrid.Row, BrowseResourceBladeGrid.Cell, BrowseResourceBladeGrid.ColumnHeader, elementArrayFinder);
    }
}
(function (BrowseResourceBladeGrid) {
    /**
     * Represents a column header in the BrowseResourceBladeGrid.
     */
    class ColumnHeader extends GridBase.BaseColumnHeader {
    }
    BrowseResourceBladeGrid.ColumnHeader = ColumnHeader;
    /**
     * Represents a cell in the BrowseResourceBladeGrid.
     */
    class Cell extends GridBase.BaseCell {
    }
    BrowseResourceBladeGrid.Cell = Cell;
    /**
     * Represents a row in the BrowseResourceBladeGrid.
     */
    class Row extends GridBase.BaseRow {
        constructor(elementArrayFinder) {
            super(BrowseResourceBladeGrid.Cell, elementArrayFinder);
        }
        /**
         * Invokes the click function on the grid row and waits for it to be activated.
         *
         * @returns A promise that resolves when the grid row has been activated.
         */
        async click() {
            await super.click();
            await (0, BrowserAutomation_1.getBrowser)().wait(() => {
                return this.isActivated();
            }, PortalConfigurationManager_1.default.portalContext.timeouts.longTimeout, "Grid row did not appear to be activated.");
            return;
        }
    }
    BrowseResourceBladeGrid.Row = Row;
})(BrowseResourceBladeGrid || (BrowseResourceBladeGrid = {}));
exports.default = BrowseResourceBladeGrid;
//# sourceMappingURL=BrowseResourceBladeGrid.js.map