"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BrowserAutomation_1 = require("../BrowserAutomation");
const Blade_1 = require("./Blade");
const BladeStatusBar_1 = require("./BladeStatusBar");
const CommandBar_1 = require("../Controls/CommandBar");
const Tile_1 = require("../Parts/Tile");
const Lens_1 = require("../Lens");
const DetailBladeContent_1 = require("./DetailBladeContent");
const HeaderBladeContent_1 = require("./HeaderBladeContent");
const DetailBlade_1 = require("../Controls/MenuBlade/DetailBlade");
const Parts_1 = require("../Parts");
/**
 * Represents a Composition Blade.
 */
class CompositionBlade extends Blade_1.default {
    constructor() {
        super(...arguments);
        /**
         * @deprecated detailBlade is deprecated. Use detailBladeContent property instead.
         */
        // eslint-disable-next-line deprecation/deprecation
        this.detailBlade = this.element(DetailBlade_1.default);
    }
    /**
     * Gets the blade status bar.
     */
    get statusBar() {
        return this.getDetailBladeItems(BladeStatusBar_1.default).then((bladeStatusBar) => {
            return bladeStatusBar;
        });
    }
    /**
     * Gets the blade command bar.
     */
    get commandBar() {
        return this.getDetailBladeItems(CommandBar_1.default);
    }
    /**
     * Gets DetailBladeContent.
     */
    async detailBladeContent() {
        const detailBladeContent = await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            async function detailBladeContentIsDisplayed(detailBladeContent) {
                return !(await detailBladeContent.hasClass("fxs-display-none"));
            }
            const detailBladeContent = this.all(DetailBladeContent_1.default).filter((detailBladeContent) => {
                const promise = detailBladeContentIsDisplayed(detailBladeContent);
                return promise;
            });
            if ((await detailBladeContent.count()) > 0) {
                return detailBladeContent.first();
            }
            else {
                return null;
            }
        }, null, "No detail blade content displayed on this menu blade");
        return detailBladeContent;
    }
    /**
     * Gets HeaderBladeContent.
     */
    async headerBladeContent() {
        const headerBladeContent = await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            async function headerBladeContentIsDisplayed(headerBladeContent) {
                return !(await headerBladeContent.hasClass("fxs-display-none"));
            }
            const headerBladeContent = this.all(HeaderBladeContent_1.default).filter((headerBladeContent) => {
                const promise = headerBladeContentIsDisplayed(headerBladeContent);
                return promise;
            });
            if ((await headerBladeContent.count()) > 0) {
                return headerBladeContent.first();
            }
            else {
                return null;
            }
        }, null, "No header blade content displayed on this tab menu blade");
        return headerBladeContent;
    }
    /**
     * Gets the blade's commandbar buttons.
     */
    async commandBarItemsAsync() {
        const commandBar = await this.getDetailBladeItemsAsync(CommandBar_1.default);
        return await commandBar.getItems();
    }
    /**
     * Gets the parts in the opened detail blade.
     */
    async getDetailTiles() {
        return await this.getAllDetailBladeItems(Tile_1.default);
    }
    /**
     * Gets the lenses in the opened detail blade.
     */
    async getDetailLenses() {
        return await this.getAllDetailBladeItems(Lens_1.default);
    }
    /**
     * Gets items of specified type from the detail blade.
     */
    async getDetailBladeItems(elementType) {
        return (await this.detailBladeContent()) && (await this.detailBladeContent()).element(elementType);
    }
    /**
     * Gets items of specified type from the detail blade.
     */
    async getDetailBladeItemsAsync(elementType) {
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return (await this.detailBladeContent()) && !!(await this.detailBladeContent()).element(elementType);
        }, 20000, "Couldn't find the item in the details blade.");
        return (await this.detailBladeContent()).element(elementType);
    }
    /**
     * Gets all the items of specified type from the detail blade.
     */
    async getAllDetailBladeItems(elementType) {
        return (await this.detailBladeContent()) && (await this.detailBladeContent()).all(elementType);
    }
    get title() {
        throw "This property is obsolete. Use titleAsync method instead.";
    }
    get subtitle() {
        throw "This property is obsolete. Use subtitleAsync method instead.";
    }
    get commandBarItems() {
        throw "This property is obsolete. Use commandBarItemsAsync method instead.";
    }
    /**
     * Gets the parts in the opened detail blade.
     */
    async getDetailParts() {
        return await this.getAllDetailBladeItems(Parts_1.Part);
    }
}
exports.default = CompositionBlade;
//# sourceMappingURL=CompositionBlade.js.map