"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ElementArrayFinder_1 = require("../ElementArrayFinder");
const MenuBladeItem_1 = require("../Controls/MenuBlade/MenuBladeItem");
const ListView_1 = require("../Controls/List/ListView");
const SideBar_1 = require("../Controls/SideBar");
const Menu_1 = require("../Controls/Menu");
const Utils_1 = require("../Utils");
const PortalFxResources = require("../PortalFxResources");
const PortalShell_1 = require("../PortalShell");
const CompositionBlade_1 = require("./CompositionBlade");
/**
 * Represents a Resource Menu Blade.
 */
class MenuBlade extends CompositionBlade_1.default {
    constructor() {
        super(...arguments);
        this.bladeClass = "fxs-menublade";
    }
    /**
     * Gets the specified menu item.
     *
     * @param title The title of the menu item.
     * @param comparer The method used to compare menu items to text, the default behavior is to check whether the menu item text string contains the title string.
     * @returns The menu item.
     */
    async getMenuItem(title, comparer = null) {
        await this.waitUntilBladeAndAllTilesLoaded();
        const defaultContentElement = await this.getDefaultBladeContent();
        if (await defaultContentElement.isDisplayed()) {
            const bladeContent = await this.getDefaultBladeContent();
            await bladeContent.waitForAllTilesLoad();
        }
        const menu = await this.getMenu();
        return await menu.getMenuItem(title, comparer);
    }
    /**
     * Gets the menu of the menu blade.
     */
    async getMenu() {
        const defaultContentElement = await this.getDefaultBladeContent();
        if (await defaultContentElement.isDisplayed()) {
            return this.element(Menu_1.default);
        }
        const sideBar = ElementArrayFinder_1.default.element(SideBar_1.default);
        return await sideBar.getBladeMenu();
    }
    /**
     * Checks if the specified menu item is present in menu.
     *
     * @param title {string}: tiltle of Menu Item
     * @returns A promise that resolves when menu item found.
     */
    async hasMenuItem(title) {
        const listView = this.element(ListView_1.default);
        return await listView.hasListViewItem(title);
    }
    /**
     * Opens a menu item in the right contents.
     *
     * @param parentBlade The parent blade associated to the menu blade.
     * @param menuItemTitle The title for the menu item to open.
     * @param waitForTilesToLoad Optional boolean true (default) to wait for the parts to load, else false.
     * @param comparer The method used to compare menu items to text, the default behavior is to check whether the menu item text string contains the title string.
     * @returns the menublade that opens up or null if parentBlade is not provided.
     */
    async openMenuItem(menuItemTitle, parentBlade, waitForTilesToLoad = true, comparer = null) {
        await (await this.getMenuItem(menuItemTitle, comparer)).click();
        if (parentBlade) {
            const newTitle = Utils_1.String.format(PortalFxResources.bladeTitleFormat, parentBlade, menuItemTitle);
            const newBlade = PortalShell_1.default.blade({ title: newTitle, bladeType: MenuBlade });
            if (waitForTilesToLoad) {
                await newBlade.waitUntilBladeAndAllTilesLoaded();
            }
            return newBlade;
        }
        return null;
    }
    get overviewMenuItem() {
        throw "This property is obsolete. Use getMenuItem method instead";
    }
    /**
     * Gets the overview menu item.
     *
     *  @returns The overview menu item.
     */
    async getOverviewItem() {
        await this.waitForAllTilesLoaded();
        return this.element(MenuBladeItem_1.OverviewMenuItem);
    }
    /**
     * Opens the overview item in the right contents
     */
    async openOverviewItem(waitForPartsToLoad = true) {
        await (await this.getOverviewItem()).click();
        if (waitForPartsToLoad) {
            await (await this.detailBladeContent()).waitForAllTilesLoad();
        }
    }
}
exports.default = MenuBlade;
//# sourceMappingURL=MenuBlade.js.map