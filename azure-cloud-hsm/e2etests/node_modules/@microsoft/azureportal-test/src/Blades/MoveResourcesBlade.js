"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resources = require("../PortalFxResources");
const By_1 = require("../Locators/By");
const Blade_1 = require("../Blades/Blade");
const MoveResourcesBladeGrid_1 = require("./MoveResourcesBladeGrid");
const DropDownField_1 = require("../Controls/DropDownField");
const TextField_1 = require("../Controls/TextField");
const CheckBoxField_1 = require("../Controls/CheckBoxField");
const GenericActionBar_1 = require("../ActionBars/GenericActionBar");
const NotificationsPane_1 = require("../Notifications/NotificationsPane");
const ElementArrayFinder_1 = require("../ElementArrayFinder");
const BrowserAutomation_1 = require("../BrowserAutomation");
/**
 * Represents a blade used to move resources to a new resource group.
 */
class MoveResourcesBlade extends Blade_1.default {
    constructor() {
        super(...arguments);
        /**
         * The action bar contained in the blade.
         */
        this.actionBar = this.element(GenericActionBar_1.default);
        this.subscriptionsDropDown = this.field(DropDownField_1.default, { label: resources.subscription });
        this.relatedResourcesGrid = this.element(MoveResourcesBladeGrid_1.default);
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return super.buildLocator({ title: resources.moveResources });
    }
    /**
     * Starts a move operation using the specified options.
     *
     * @param options The options used to populate the blade.
     * @returns A promise that resolves when the move operation has started.
     */
    async startMove(options) {
        const notificationsPane = ElementArrayFinder_1.default.element(NotificationsPane_1.default);
        if (!options.targetResourceGroup) {
            throw new Error("Please provide the target resource group.");
        }
        return await this.waitUntilLoaded(options.timeout)
            .then(() => {
            return this.waitForAllTilesLoaded(options.timeout);
        })
            .then(() => {
            return this.subscriptionsDropDown.isPresent();
        })
            .then(async (isPresent) => {
            if (isPresent) {
                if (!options.subscriptionName) {
                    throw new Error("Please provide a subscription name.");
                }
                await (0, BrowserAutomation_1.getBrowser)().wait(() => {
                    return this.subscriptionsDropDown.options.count().then((count) => {
                        return count > 0;
                    });
                });
                await this.subscriptionsDropDown.click();
                const ddOptions = await this.subscriptionsDropDown.options.filter((ddOption) => {
                    return ddOption.getText().then((text) => {
                        return text.includes(options.subscriptionName);
                    });
                });
                if (ddOptions.length > 0) {
                    return ddOptions[0].click();
                }
                return null;
            }
            return null;
        })
            .then(() => {
            if (options.relatedResources && options.relatedResources.length > 0) {
                const promises = [];
                options.relatedResources.forEach(async (relatedResource) => {
                    await this.relatedResourcesGrid.rows
                        .filter((row) => {
                        return row.resourceCell.itemName.getText().then((text) => {
                            return text === relatedResource;
                        });
                    })
                        .each((row) => {
                        promises.push(row.checkBoxCell.click());
                    });
                });
                return Promise.all(promises);
            }
            return null;
        })
            .then(() => {
            if (options.createNewGroup) {
                const createLink = this.element(By_1.default.linkText(resources.createANewGroup));
                const selectLink = this.element(By_1.default.linkText(resources.selectExistingResourceGroup));
                const resourceGroupTextBox = this.field(TextField_1.default, { label: resources.resourceGroup });
                // The resource group field will change once a subscription has been picked, which
                // presents a race condition here. Wait until we manage to make the resource group
                // textbox appear by clicking in whichever link we find.
                return (0, BrowserAutomation_1.getBrowser)()
                    .wait(async () => {
                    await createLink.click();
                    const isPresent = await resourceGroupTextBox.isPresent();
                    if (!isPresent) {
                        return selectLink.click().then(() => {
                            return resourceGroupTextBox.isPresent();
                        });
                    }
                    return isPresent;
                })
                    .then(() => {
                    return resourceGroupTextBox.sendKeys(options.targetResourceGroup);
                });
            }
            const resourceGroupDropDown = this.field(DropDownField_1.default, { label: resources.resourceGroup });
            return resourceGroupDropDown.selectOption(options.targetResourceGroup);
        })
            .then(() => {
            this.confirmationCheckBox = this.field(CheckBoxField_1.default, { label: resources.moveResourceConfirm });
            return this.confirmationCheckBox.click();
        })
            .then(() => {
            return (0, BrowserAutomation_1.getBrowser)().wait(() => {
                return this.actionBar.actionButton.isEnabled();
            }, options.timeout, "Timed out waiting for actionBar on move resource blade to be enabled");
        })
            .then(() => {
            return this.actionBar.actionButton.click();
        })
            .then(() => {
            return notificationsPane.waitForNewNotification(resources.movingResources, null, options.timeout);
        })
            .then(() => {
            return notificationsPane.close();
        });
    }
}
exports.default = MoveResourcesBlade;
//# sourceMappingURL=MoveResourcesBlade.js.map