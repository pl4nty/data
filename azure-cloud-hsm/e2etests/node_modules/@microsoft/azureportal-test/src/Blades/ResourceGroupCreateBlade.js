"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Constants_1 = require("../Constants");
const By_1 = require("../Locators/By");
const Blade_1 = require("./Blade");
const GroupDropDownField_1 = require("../Controls/GroupDropDownField");
const portalFxResources = require("../PortalFxResources");
const Logger_1 = require("../Logger");
const Controls_1 = require("../Controls");
const BrowserAutomation_1 = require("../BrowserAutomation");
const PortalConfigurationManager_1 = require("../PortalConfigurationManager");
const rgResources = portalFxResources.hubsExtension.resourceGroups;
/**
 * Represents a blade that allows creating a resource group.
 */
class ResourceGroupCreateBlade extends Blade_1.default {
    /**
     * Gets the name text field.
     */
    get nameTextField() {
        return this.field(Controls_1.ResourceGroupDropDownField, { label: rgResources.nameLabel });
    }
    /**
     * Gets the subscription text field.
     */
    get subscriptionField() {
        return this.field(GroupDropDownField_1.default, { label: portalFxResources.subscription });
    }
    /**
     * Gets the location text field.
     */
    get locationField() {
        return this.field(GroupDropDownField_1.default, { label: rgResources.locationLabel });
    }
    /**
     * Gets the tags grid field.
     */
    get tagsGrid() {
        return this.all(Controls_1.TagsByResource).get(0);
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return super.buildLocator({ title: rgResources.createTitle });
    }
    get tags() {
        return this.goToTab("Tags").then(() => {
            return this.tryFindElement(Controls_1.TagsByResource);
        });
    }
    async goToTab(tagKey) {
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const tab = this.element(By_1.default.text(tagKey));
            await tab.click();
            return !!(await tab.getAncestor((el) => new Promise((res, rej) => el.hasClass("azc-br-active").then(res).catch(rej))));
        }, PortalConfigurationManager_1.default.portalContext.timeouts.timeout, "Tab click never activates tab");
    }
    /**
     * Gets the Review + create or Create button on the blade.
     *
     * @returns A promise that resolves with the Create or Review + Create button.
     */
    async createButton() {
        const createButton = this.all(By_1.default.text(rgResources.createButton));
        return createButton.count().then((elementCount) => {
            if (elementCount > 0) {
                return createButton.first();
            }
            return this.all(By_1.default.text(rgResources.reviewCreateButton)).first();
        });
    }
    /**
     * Gets the Next : Review + create > button on the blade.
     *
     * @returns A promise that resolves with the Next : Review + create button.
     */
    async nextReviewCreateButton() {
        const nextReviewCreateButton = this.all(By_1.default.text(rgResources.nextReviewCreateButton));
        return nextReviewCreateButton.first();
    }
    /**
     * Gets the Next : Tags > button on the blade.
     *
     * @returns A promise that resolves with the Next : Tags button.
     */
    async nextTagsButton() {
        const nextTagsButton = this.all(By_1.default.text(rgResources.nextTagsButton));
        return nextTagsButton.first();
    }
    /**
     * Gets the template automation hyperlink on the blade.
     *
     * @returns The template automation hyperlink.
     */
    async templateAutomationHyperlink() {
        const templateAutomationHyperlink = this.all(By_1.default.text(rgResources.templateAutomationLink));
        return templateAutomationHyperlink.first();
    }
    /**
     * Fills out the fields on the create resource group form.
     *
     * @param resourceGroupName The name of the resource group.
     * @param subscription The subscription that the resource group should be created in.
     * @param location The location of the resource group.
     */
    async fillRequiredFields(resourceGroupName, subscription, location) {
        Logger_1.default.information("Filling create resource group required fields...");
        await this.waitUntilLoaded();
        await this.goToTab("Basics");
        Logger_1.default.information(`Selecting subscription with name '${subscription}'`);
        await this.subscriptionField.selectOptionByText(subscription);
        Logger_1.default.information("Waiting for subscription dropdown to be valid...");
        await this.subscriptionField.waitOnValidationState([Constants_1.ControlValidationState.valid, Constants_1.ControlValidationState.none]);
        Logger_1.default.information(`Entering '${resourceGroupName}' in name text field...`);
        await this.nameTextField.setNewResourceGroup(resourceGroupName);
        Logger_1.default.information("Waiting for name text field to be valid...");
        await this.nameTextField.waitOnValidationState(Constants_1.ControlValidationState.valid);
        Logger_1.default.information(`Selecting location with name '${location}'...`);
        await this.locationField.selectOptionByText(location);
        return this;
    }
    /**
     * Fills out the tags field.
     *
     * @param tags The stringmap of tag names and tag values
     * @returns A promise that resolves with filled out tags field.
     */
    async fillTagsField(tags) {
        Logger_1.default.information("Filling create resource group tags...");
        await this.waitUntilLoaded();
        await this.goToTab("Tags");
        for (const tagName in tags) {
            await this.tagsGrid.addTag(tagName, tags[tagName]);
        }
        return this;
    }
    /**
     * Gets the summary item on the review tab.
     *
     * @param className The name of the HTML element class.
     * @param text The text within the HTML element.
     * @returns A promise that resolves with the Tags text.
     */
    async getSummaryItem(className, text) {
        const summaryItem = this.all(By_1.default.classAndText(className, text));
        return summaryItem.first();
    }
}
exports.default = ResourceGroupCreateBlade;
//# sourceMappingURL=ResourceGroupCreateBlade.js.map