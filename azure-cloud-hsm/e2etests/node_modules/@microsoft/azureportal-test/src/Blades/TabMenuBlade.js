"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TabMenu_1 = require("../Controls/TabMenu");
const Utils_1 = require("../Utils");
const PortalFxResources = require("../PortalFxResources");
const PortalShell_1 = require("../PortalShell");
const CompositionBlade_1 = require("./CompositionBlade");
/**
 * Represents a Tab Menu Blade.
 */
class TabMenuBlade extends CompositionBlade_1.default {
    constructor() {
        super(...arguments);
        this.bladeClass = "fxs-tabmenublade";
    }
    /**
     * Gets the specified menu item.
     *
     * @param title The title of the menu item.
     * @param comparer The method used to compare menu items to text, the default behavior is to check whether the menu item text string contains the title string.
     * @returns The menu item.
     */
    async getTabMenuItem(title, comparer = null) {
        await this.waitUntilBladeAndAllTilesLoaded();
        const headerContentElement = await this.headerBladeContent();
        if (await headerContentElement.isDisplayed()) {
            const bladeContent = await this.headerBladeContent();
            await bladeContent.waitForAllTilesLoad();
        }
        const tabMenu = await this.getTabMenu();
        return await tabMenu.getTabMenuItem(title, comparer);
    }
    /**
     * Gets the tab menu of the tab menu blade.
     */
    async getTabMenu() {
        const headerContentElement = await this.headerBladeContent();
        if (await headerContentElement.isDisplayed()) {
            return headerContentElement.element(TabMenu_1.default);
        }
        return null;
    }
    /**
     * Opens a menu item in the right contents.
     *
     * @param menuItemTitle The title for the menu item to open.
     * @param parentBlade The parent blade associated to the tab menu blade.
     * @param waitForTilesToLoad Optional boolean true (default) to wait for the parts to load, else false.
     * @param comparer The method used to compare menu items to text, the default behavior is to check whether the menu item text string contains the title string.
     * @returns the menublade that opens up or null if parentBlade is not provided.
     */
    async openTabMenuItem(menuItemTitle, parentBlade, waitForTilesToLoad = true, comparer = null) {
        await (await this.getTabMenuItem(menuItemTitle, comparer)).click();
        if (parentBlade) {
            const newTitle = Utils_1.String.format(PortalFxResources.bladeTitleFormat, parentBlade, menuItemTitle);
            const newBlade = PortalShell_1.default.blade({ title: newTitle, bladeType: TabMenuBlade });
            if (waitForTilesToLoad) {
                await newBlade.waitUntilBladeAndAllTilesLoaded();
            }
            return newBlade;
        }
        return null;
    }
}
exports.default = TabMenuBlade;
//# sourceMappingURL=TabMenuBlade.js.map