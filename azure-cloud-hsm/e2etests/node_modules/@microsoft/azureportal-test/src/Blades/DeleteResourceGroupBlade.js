"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BrowserAutomation_1 = require("../BrowserAutomation");
const Constants_1 = require("../Constants");
const resources = require("../PortalFxResources");
const By_1 = require("../Locators/By");
const Blade_1 = require("../Blades/Blade");
const TextField_1 = require("../Controls/TextField");
const SimpleButton_1 = require("../Controls/SimpleButton");
/**
 * Represents a Blade used to delete a resource group
 */
class DeleteResourceGroupBlade extends Blade_1.default {
    constructor() {
        super(...arguments);
        this.checkButtonHasTargetText = async (button, targetButtonText) => {
            const buttonText = await button.getText();
            return buttonText === targetButtonText;
        };
    }
    /**
     * Gets the locator for the blade.
     */
    get locator() {
        return By_1.default.content(By_1.default.className(this.bladeClass), By_1.default.xpath(`${By_1.default.currentNodeXPathPrefix()}h2[contains(text(),'${resources.hubsExtension.resourceGroups.deleteConfirmation}')]`));
    }
    /**
     * Confirms the delete given the resource group name.
     *
     * @param resourceGroupName The resource group name for the text editor.
     */
    async confirmDelete(resourceGroupName) {
        const confirmResourceGroupNameTxt = this.element(TextField_1.default);
        await confirmResourceGroupNameTxt.sendKeys(resourceGroupName);
        await confirmResourceGroupNameTxt.waitUntilEnabled();
        await confirmResourceGroupNameTxt.waitOnValidationState(Constants_1.ControlValidationState.valid);
        return await this.delete();
    }
    /**
     * Clicks the delete button on the blade.
     *
     * @returns A promise that resolves with this blade instance when filtered browse results are available.
     */
    delete() {
        return this.getDeleteButton()
            .then((button) => button.click())
            .then(() => this);
    }
    /**
     * Clicks the cancel button on the blade.
     *
     * @returns A promise that resolves with this blade instance when filtered browse results are available.
     */
    cancel() {
        return this.getCancelButton()
            .then((button) => button.click())
            .then(() => this);
    }
    /**
     * Gets the delete button on the blade.
     *
     * @returns A promise that resolves with the delete button.
     */
    async getDeleteButton() {
        return this.getButtonOnDeleteResourceGroupBlade("Delete");
    }
    /**
     * Gets the cancel button on the blade.
     *
     * @returns A promise that resolves with the cancel button.
     */
    async getCancelButton() {
        return this.getButtonOnDeleteResourceGroupBlade("Cancel");
    }
    async getButtonOnDeleteResourceGroupBlade(textOfButtonToRetrieve) {
        const allButtons = this.all(SimpleButton_1.default);
        let targetButtonFilteringResult;
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            targetButtonFilteringResult = allButtons.filter((button) => {
                const promise = this.checkButtonHasTargetText(button, textOfButtonToRetrieve);
                return promise;
            });
            return (await targetButtonFilteringResult.count()) > 0;
        }, null, `No button with text ${textOfButtonToRetrieve} found`);
        const targetButtonFilteringResultAsPortalElements = await targetButtonFilteringResult.asPortalElements();
        return targetButtonFilteringResultAsPortalElements[0];
    }
}
exports.default = DeleteResourceGroupBlade;
//# sourceMappingURL=DeleteResourceGroupBlade.js.map