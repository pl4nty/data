"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Blade_1 = require("../Blades/Blade");
const Locators_1 = require("../Locators");
const BrowserAutomation_1 = require("../BrowserAutomation");
const PortalConfigurationManager_1 = require("../PortalConfigurationManager");
const LogLevel_1 = require("../LogLevel");
/**
 * Represents the deployment overview blade, opened after a template deployment is accepted by ARM.
 * Only use this class if your create flow support customized post-provisioning (Knockout-based create flows).
 * For all other create flows, use the DeploymentOverview class under /Views/.
 */
class DeploymentDetailsOverviewBlade extends Blade_1.default {
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return super.buildLocator({ subTitle: "Deployment" });
    }
    /**
     * Waits for the deployment blade to report it has completed
     *
     * @param timeout The maximum amount of time in milliseconds to wait when trying to locate elements.
     * @returns a promise that resolves when the deployment has reported Completion
     */
    async waitForDeploymentCompletion(timeout) {
        timeout = timeout ?? PortalConfigurationManager_1.default.portalContext.timeouts.extraLongTimeout;
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return await this.isElementDisplayed(Locators_1.By.textContains("Your deployment is complete"));
        }, timeout, "The deployment never completes");
    }
    /**
     * Waits for the deployment blade to report it has failed
     *
     * @param timeout The maximum amount of time in milliseconds to wait when trying to locate elements.
     * @returns a promise that resolves when the deployment has reported failure
     */
    async waitForDeploymentFailure(timeout) {
        timeout = timeout ?? PortalConfigurationManager_1.default.portalContext.timeouts.extraLongTimeout;
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return await this.isElementDisplayed(Locators_1.By.textContains(`Your deployment failed`));
        }, timeout, "The deployment never fails");
    }
    /**
     * Waits for the deployment blade to log details
     *
     * @param timeout The maximum amount of time in milliseconds to wait when trying to locate elements.
     * @returns a promise that resolves with deployment details logged
     */
    async logDeploymentDetails(timeout) {
        timeout = timeout ?? PortalConfigurationManager_1.default.portalContext.timeouts.extraLongTimeout;
        const downloadDeploymentDetailsPixelLocator = Locators_1.By.className("ext-hubs-deploymentdetails-logdep");
        let retries = 3;
        let log = "";
        do {
            if (retries-- < 0) {
                throw new Error("Failed to log deployment details");
            }
        } while (!(log = await (async () => {
            const downloadPixel = await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
                const elements = this.all(downloadDeploymentDetailsPixelLocator);
                if ((await elements.count()) === 1) {
                    return elements.first();
                }
                return null;
            }, timeout);
            if (downloadPixel) {
                await downloadPixel.click();
                const logs = await (0, BrowserAutomation_1.getBrowser)().getBrowserLogs(LogLevel_1.LogLevel.Info);
                const [log] = logs.filter((log) => log.includes("deployment.json")).slice(-1);
                return log;
            }
        })()) ||
            retries > 0);
        return log;
    }
}
exports.default = DeploymentDetailsOverviewBlade;
//# sourceMappingURL=DeploymentDetailsOverviewBlade.js.map