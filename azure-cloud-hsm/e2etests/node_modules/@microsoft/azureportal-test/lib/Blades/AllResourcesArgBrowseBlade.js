"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ArgBrowseBlade_1 = require("./ArgBrowseBlade");
const portalFxResources = require("../PortalFxResources");
/**
 * Represents the ARG browse all resources blade in the portal.
 */
class AllResourcesArgBrowseBlade extends ArgBrowseBlade_1.default {
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return super.buildLocator({ title: portalFxResources.hubsExtension.allResourcesBlade.allResourcesBladeTitle });
    }
    /**
     * Sets the resource types filter to the given resource types. The resource types should be fully qualified
     * resource type with the namespace (provider) ie 'microsoft.sql/server/database'.
     *
     * @param resourceTypes The fully qualified resource types for the resource type filter.
     * @param resourceTypeDisplayNameMap The map from resource type to resource type display names.
     * @returns Promise which resolves when complete.
     */
    async setResourceTypesFilter(resourceTypes, resourceTypeDisplayNameMap) {
        resourceTypeDisplayNameMap = resourceTypeDisplayNameMap || {};
        await this.setFilter("Type", resourceTypes.map((resourceType) => resourceTypeDisplayNameMap[resourceType] || resourceType));
    }
    /**
     * Sets the resource groups filter to the given resource groups. The resource groups should be the name of the
     * resource group.
     *
     * @param resourceGroups The resource group names for the resource group filter.
     * @returns Promise which resolves when complete.
     */
    async setResourceGroupsFilter(resourceGroups) {
        await this.setFilter("Resource group", resourceGroups);
    }
    /**
     * Sets the locations filter to the given locations. The locations should be the ARM ID of the
     * location ie, 'eastus'.
     *
     * @param locations The location IDs for the location filter.
     * @param locationDisplayNameMap The map from location IDs to location display names.
     * @returns Promise which resolves when complete.
     */
    async setLocationsFilter(locations, locationDisplayNameMap) {
        locationDisplayNameMap = locationDisplayNameMap || {};
        await this.setFilter("Location", locations.map((location) => locationDisplayNameMap[location] || location));
    }
}
exports.default = AllResourcesArgBrowseBlade;
//# sourceMappingURL=AllResourcesArgBrowseBlade.js.map