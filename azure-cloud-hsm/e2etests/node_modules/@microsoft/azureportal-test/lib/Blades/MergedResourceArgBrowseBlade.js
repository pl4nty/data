"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ArgBrowseBlade_1 = require("./ArgBrowseBlade");
/**
 * Represents the ARG browse resource blade in the portal for a specific resource type with merged resource types.
 */
class MergedResourceArgBrowseBlade extends ArgBrowseBlade_1.default {
    /**
     * Sets the resource groups filter to the given resource groups. The resource groups should be the name of the
     * resource group.
     *
     * @param resourceGroups The resource group names for the resource group filter.
     * @returns Promise which resolves when complete.
     */
    async setResourceGroupsFilter(resourceGroups) {
        await this.setFilter("Resource group", resourceGroups);
    }
    /**
     * Sets the locations filter to the given locations. The locations should be the ARM ID of the
     * location ie, 'eastus'.
     *
     * @param locations The location IDs for the location filter.
     * @returns Promise which resolves when complete.
     */
    async setLocationsFilter(locations, locationDisplayNameMap) {
        locationDisplayNameMap = locationDisplayNameMap || {};
        await this.setFilter("Location", locations.map((location) => locationDisplayNameMap[location] || location));
    }
    /**
     * Sets the merged resource types filter to the given set of resource type and optional kind values.
     *
     * @param resourceTypes The resource types (type and optional kind) the set as the filter on the blade.
     * @returns Promise which resolves when the filter is set.
     */
    async setMergedResourceTypesFilter(resourceTypes, resourceTypeDisplayNameMap) {
        resourceTypeDisplayNameMap = resourceTypeDisplayNameMap || {};
        await this.setFilter("Type", resourceTypes.map((resourceType) => resourceTypeDisplayNameMap[resourceType.type] || resourceType.type));
    }
}
exports.default = MergedResourceArgBrowseBlade;
//# sourceMappingURL=MergedResourceArgBrowseBlade.js.map