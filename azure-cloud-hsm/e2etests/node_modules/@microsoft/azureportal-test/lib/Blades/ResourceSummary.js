"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const By_1 = require("../Locators/By");
const PortalElement_1 = require("../PortalElement");
const PortalShell_1 = require("../PortalShell");
/**
 * Represents a resource summary element.
 */
class ResourceSummary extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "fxs-blade-summary-container";
        this.tileLoadingClassName = "fxs-tile-progress";
        this.uiBlockingShieldClassName = "fxs-part-blockui-shield";
        this.noDataMessage = "fxs-part-nodatamessage";
        this.collapsedClassName = "fxs-part-resourcesummary-collapsed";
        this.toggleClassName = "fxs-part-resourcesummary-toggle";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(this.rootClassName);
    }
    /**
     * Gets a value indicating whether this resource summary is collapsed.
     *
     * @returns a promise that resolves with a value that indicates whether the element is collapsed or not.
     */
    async isCollapsed() {
        if (await this.all(By_1.default.className(this.collapsedClassName))) {
            return true;
        }
        return false;
    }
    /**
     * Toggles the resource summary.
     */
    async toggle() {
        const portal = PortalShell_1.default.getPortalShell().getPortalElement();
        const toggleButton = portal.element(By_1.default.className(this.toggleClassName));
        await toggleButton.click();
    }
    /**
     * Checks if the resource summary is loaded.
     *
     * @returns a promise that resolves with a value that indicates whether the element is loading or not.
     */
    async isLoading() {
        const tiles = await this.all(By_1.default.className(this.tileLoadingClassName));
        for (const c of tiles) {
            if (await c.isDisplayed()) {
                return true;
            }
        }
        const uiBlockingShields = this.all(By_1.default.className(this.uiBlockingShieldClassName));
        const noData = await this.all(By_1.default.className(this.noDataMessage));
        for (const e of noData) {
            if (uiBlockingShields && !(await e.isDisplayed())) {
                return true;
            }
        }
    }
}
exports.default = ResourceSummary;
//# sourceMappingURL=ResourceSummary.js.map