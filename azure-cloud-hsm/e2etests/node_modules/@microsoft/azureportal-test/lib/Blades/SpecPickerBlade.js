"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BrowserAutomation_1 = require("../BrowserAutomation");
const String = require("../Utils/String");
const Blade_1 = require("./Blade");
const SpecPicker_1 = require("./SpecPicker");
const PickerActionBar_1 = require("../ActionBars/PickerActionBar");
const Logger_1 = require("../Logger");
const By_1 = require("../Locators/By");
/**
 * Represents a SpecPickerBlade.
 */
class SpecPickerBlade extends Blade_1.default {
    constructor() {
        super(...arguments);
        this.specPickerViewOptions = "msportalfx-specpicker-viewOptions";
        /**
         * The collection of specs in this blade.
         */
        this.specs = this.all(SpecPicker_1.default);
        /**
         * The action bar contained in this blade.
         */
        this.actionBar = this.element(PickerActionBar_1.default);
        /**
         * Gets all the SpecPicker view Options.
         */
        this.allViewOptions = this.all(By_1.default.className(this.specPickerViewOptions));
    }
    /**
     * Picks the spec that corresponds to the specified code.
     *
     * @param {string} specCode The code associated to the spec to pick.
     * @returns A promise that resolves when the spec has been picked.
     */
    async pickSpec(specCode) {
        Logger_1.default.information(String.format("Selecting the {0} spec...", specCode));
        await this.element(new SpecPicker_1.default().buildLocator({ code: specCode })).click();
        await (0, BrowserAutomation_1.getBrowser)().wait(() => this.actionBar.selectButton.isEnabled().then((isEnabled) => (isEnabled ? true : null)));
        return await this.actionBar.selectButton.click();
    }
}
exports.default = SpecPickerBlade;
//# sourceMappingURL=SpecPickerBlade.js.map