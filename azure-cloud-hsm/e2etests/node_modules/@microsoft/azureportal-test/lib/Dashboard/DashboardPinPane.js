"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PortalElement_1 = require("../PortalElement");
const BrowserAutomation_1 = require("../BrowserAutomation");
const portalFxResources = require("../PortalFxResources");
const Controls_1 = require("../Controls");
const By_1 = require("../Locators/By");
const TabListItem_1 = require("../Controls/TabListItem");
class DashboardPinPane extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "fxs-pintodashboardpane";
        this.bodyClassName = "fxs-pintodashboardpane-body";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(this.rootClassName);
    }
    /**
     * Waits until DashboardPinPane is ready.
     */
    async waitUntilReady() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return await this.isDisplayed();
        }, null, "The dashboard share/unshare is expected to be visible.");
    }
    /**
     * Returns the body container of the pin pane.
     */
    async bodyContainer() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return this.element(By_1.default.className(this.bodyClassName));
        }, null, "Could not find the body of the pin pane.");
    }
    /**
     * Opens createNew tab and clicks Shared radio button.
     */
    async createNewShared() {
        const createNew = await this.createNewTab();
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            await createNew.click();
            const radioButtons = await this.all(By_1.default.className("azc-optionPicker-item"));
            return radioButtons[3] !== undefined;
        });
        const filteredItems = this.all(By_1.default.className("azc-optionPicker-item")).filter(async (item) => {
            const val = await Promise.all([item.getText(), item.isDisplayed()]);
            return val[1] && val[0] === portalFxResources.dashboard.pinPane.sharedRadioBtnTxt;
        });
        console.log(filteredItems.count());
        const radioButtons = await this.all(By_1.default.className("azc-optionPicker-item"));
        await radioButtons[3].click();
    }
    /**
     * Returns subscription dropdown field.
     */
    async subscriptionDropDown() {
        let subscriptionDropDown = null;
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const dropDowns = await this.all(Controls_1.GroupDropDownField);
            dropDowns.forEach(async (dropDown) => {
                if ((await dropDown.label.getText()) === portalFxResources.dashboard.pinPane.subscriptionLbl) {
                    subscriptionDropDown = dropDown;
                    return;
                }
            });
            return subscriptionDropDown !== null;
        }, null, "Could not find the subscription dropdown.");
        return subscriptionDropDown;
    }
    /**
     * Returns resourceGroup dropdown field.
     */
    async resourceGroupDropDown() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return this.element(Controls_1.ResourceGroupDropDownField);
        }, null, "Could not find the resourceGroup dropdown.");
    }
    /**
     * Returns default resourceGroup checkbox field.
     */
    async resourceGroupCheckBox() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return this.element(Controls_1.CheckBoxField);
        }, null, "Could not find the default resourceGroup checkbox.");
    }
    /**
     * Returns dashboard name text field.
     */
    dashboardNameTextBox() {
        return this.element(Controls_1.TextField, { label: portalFxResources.dashboard.pinPane.dashboardNameLbl });
    }
    /**
     * Returns the "Create and pin" button.
     */
    async getPinCreateNewButton() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const btn = await this.all(Controls_1.SimpleButton)
                .filter(async (button) => (await button.getText()) === portalFxResources.dashboard.pinPane.createAndPin)
                .singleOrDefault();
            return (await btn?.isEnabled()) && btn;
        }, null, "Could not find the 'Create and pin' button in pin to dashboard pane.");
    }
    /**
     * Gets the "Pin" button in existing tab.
     */
    async getPinButton() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const btn = await this.all(Controls_1.SimpleButton)
                .filter(async (button) => (await button.getText()) === portalFxResources.dashboard.pinPane.pin)
                .singleOrDefault();
            return (await btn?.isDisplayed()) && btn;
        }, null, "Could not find the pin button in pin to dashboard pane.");
    }
    /**
     * Pins the selected dashboard.
     */
    async pin() {
        const pinButton = await this.getPinButton();
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => await pinButton.isEnabled(), null, "Pin button in the dashboard pane did not become enabled.");
        await pinButton.click();
    }
    /**
     * Gets the create new tab.
     */
    async createNewTab() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const el = await this.all(TabListItem_1.default)
                .filter(async (el) => (await el.getText()) === portalFxResources.dashboard.pinPane.createNew)
                .singleOrDefault();
            return (await el?.isDisplayed()) && el;
        }, null, "Could not find create new tab in pin to dashboard pane.");
    }
}
exports.default = DashboardPinPane;
//# sourceMappingURL=DashboardPinPane.js.map