"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PortalElement_1 = require("../PortalElement");
const By_1 = require("../Locators/By");
const BrowserAutomation_1 = require("../BrowserAutomation");
const CommandBar_1 = require("../Controls/CommandBar");
const PortalFxResources = require("../PortalFxResources");
const DashboardPicker_1 = require("./DashboardPicker");
const ExpectedConditions = require("../ExpectedConditions");
const PortalConfigurationManager_1 = require("../PortalConfigurationManager");
const Logger_1 = require("../Logger");
const Portal_1 = require("../Portal");
class DashboardHeader extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "fxs-startboard-header";
        this.titleInputClassName = "fxs-startboard-title-edit";
        this.dashboardTempBladeTitle = "Create a dashboard";
        this.templateAreaClass = "ext-card-inline";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(this.rootClassName);
    }
    /**
     * Waits until DashboardHeader is ready.
     */
    async waitUntilReady() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return await this.isDisplayed();
        }, null, "The dashboard header is expected to be visible.");
    }
    /**
     * Starts new Dashboard.
     */
    async startNewDashboard() {
        Logger_1.default.information("Starting dashboard creation");
        const cmdBar = await this.waitTillDashboardCommandBarReady();
        Logger_1.default.information("Clicking new dashboard button");
        // Create button for dashboard is hidden under a feature flag, hence fallback to old behavior if it's not enabled.
        const isTemplatesFeatureEnabled = true;
        if (isTemplatesFeatureEnabled) {
            //Clicks on Create button
            await cmdBar.clickCommandBarItem(PortalFxResources.dashboard.create);
            Logger_1.default.information("Waiting for dashboard template blade to appear");
            await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
                const allBlades = await Portal_1.portal.getAllBlades();
                for (const blade of allBlades) {
                    if ((await blade.titleAsync()) === this.dashboardTempBladeTitle) {
                        return true;
                    }
                }
                return false;
            }, 30000, `Blade with title ${this.dashboardTempBladeTitle} not found.`);
            const blade = Portal_1.portal.blade({ title: this.dashboardTempBladeTitle });
            Logger_1.default.information("Waiting for blank dashboard template item to appear");
            //Wait for first template to become available
            let firstTemplateItem = null;
            await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
                firstTemplateItem = await blade.findAll(By_1.default.className(this.templateAreaClass));
                return firstTemplateItem.length;
            }, 30000, `Blank Dashboard template item not found.`);
            Logger_1.default.information("Clicking on first dashboard template item.");
            await firstTemplateItem[0].click();
        }
        else {
            const newDashboardMenuButton = await cmdBar.findCommandBarMenuButton(PortalFxResources.dashboard.create);
            const commandBarMenuItem = await newDashboardMenuButton.findCommandBarMenuItem(PortalFxResources.dashboard.blank);
            await commandBarMenuItem.click();
        }
    }
    /**
     * Deletes the Dashboard.
     */
    async deleteDashboard() {
        const cmdBar = await this.waitTillDashboardCommandBarReady();
        await cmdBar.clickCommandBarItem(PortalFxResources.dashboard.delete);
    }
    /**
     * Changes the Dashboard title.
     */
    async changeDashboardTitle(title) {
        const startBoard = await Portal_1.portal.getDashboard();
        const titleInput = startBoard
            .element(By_1.default.className(this.titleInputClassName))
            .asType(PortalElement_1.default);
        await titleInput.click();
        const Key = (0, BrowserAutomation_1.getBrowser)().Key;
        // Clear the input value without blur
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            await titleInput.clear();
            const value = await titleInput.getAttribute("value");
            return value.length === 0;
        }, null, "The title input value is expected to be empty.");
        await titleInput.sendKeys(title);
        // Wait a short time before pressing the Tab key
        await (0, PortalElement_1.delay)(100);
        await titleInput.sendKeys(Key.TAB);
    }
    /**
     * Clicks share dashboard command.
     */
    async shareDashboard() {
        const cmdBar = await this.waitTillDashboardCommandBarReady();
        await cmdBar.clickCommandBarItem(PortalFxResources.dashboard.share);
    }
    /**
     * Clicks the unshare dashboard command.
     */
    async unshareDashboard() {
        const cmdBar = await this.waitTillDashboardCommandBarReady();
        const manageSharing = await cmdBar.findCommandBarMenuButton(PortalFxResources.dashboard.manageSharing);
        await (await manageSharing.findCommandBarMenuItem(PortalFxResources.dashboard.unshare)).click();
    }
    /**
     * Clicks edit dashboard command.
     */
    async editDashboard() {
        const cmdBar = await this.waitTillDashboardCommandBarReady();
        await cmdBar.clickCommandBarItem(PortalFxResources.dashboard.edit);
    }
    /**
     * Gets the DashboardPicker.
     */
    async getDashboardPicker(timeout = PortalConfigurationManager_1.default.portalContext.timeouts.timeout) {
        const dashboardPicker = this.element(DashboardPicker_1.default);
        await (0, BrowserAutomation_1.getBrowser)().wait(ExpectedConditions.isPresent(dashboardPicker), timeout, "DashboardPicker not found.");
        await dashboardPicker.waitUntilReady();
        return dashboardPicker;
    }
    /**
     * Clone the Dashboard.
     */
    async cloneDashboard() {
        const cmdBar = await this.waitTillDashboardCommandBarReady();
        await cmdBar.clickCommandBarItem(PortalFxResources.dashboard.clone);
    }
    /**
     * Wait till dashboard command bar is ready.
     *
     * @returns Promise which resolves to return command bar when ready.
     */
    async waitTillDashboardCommandBarReady() {
        let cmdBar = null;
        const startBoard = await Portal_1.portal.getDashboard();
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            cmdBar = startBoard.element(CommandBar_1.default);
            return await cmdBar.isDisplayed();
        }, null, "The dashboard command bar is expected to be visible.");
        return cmdBar;
    }
    /**
     * Download dashboard.
     *
     * @returns Promise which resolves when dashboard download done.
     */
    async downloadDashboard() {
        const cmdBar = await this.waitTillDashboardCommandBarReady();
        // Export command menu contains Download and Print, but it is hidden under a feature flag, hence fallback to old behavior.
        // Remove fallback when the feature flag is enabled/removed: Task 9528480: Enable Print Feature Flag in Prod
        try {
            const exportDashboardMenuButton = await cmdBar.findCommandBarMenuButton(PortalFxResources.dashboard.export);
            const downloadButton = await exportDashboardMenuButton.findCommandBarMenuItem(PortalFxResources.dashboard.download);
            await downloadButton.click();
        }
        catch {
            const downloadButton = await cmdBar.findCommandBarItem(PortalFxResources.dashboard.download);
            await downloadButton.click();
        }
    }
    /**
     * Get upload dashboard button.
     *
     * @returns Promise which resolves to upload dashboard button.
     */
    async uploadDashboardBtn() {
        const cmdBar = await this.waitTillDashboardCommandBarReady();
        return await cmdBar.findCommandBarItem(PortalFxResources.dashboard.upload);
    }
}
exports.default = DashboardHeader;
//# sourceMappingURL=DashboardHeader.js.map