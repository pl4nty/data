"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const By_1 = require("./Locators/By");
const PortalElement_1 = require("./PortalElement");
const BrowserAutomation_1 = require("./BrowserAutomation");
/**
 * Represents a Lens.
 */
class Lens extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.titleClassName = "fxs-lens-title";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className("fxs-lens");
    }
    async title() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const title = this.element(By_1.default.className(this.titleClassName));
            const titleDisplayed = await title.isDisplayed();
            if (title !== null && titleDisplayed) {
                return await title.getText();
            }
            return null;
        }, null, "Could not find the lens title.");
    }
    /**
     * Gets the Part by provided title and type.
     *
     * @param {string} elementType The type of the part that is expected to open.
     * @param {string} title the title of part.
     * @returns A part if a single part is found or undefined if no part is found
     * @throws Error if more then one part is found
     */
    async findSinglePartByTitle(elementType, title) {
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const allParts = this.all(elementType);
            const filteredElements = allParts.filter((part) => {
                const promise = satisfiesTitle(part, title);
                return promise;
            });
            const filterElementArray = await filteredElements.asPortalElements();
            if (filterElementArray.length > 1) {
                throw new Error("More than one elements found.");
            }
            return filterElementArray && filterElementArray[0];
        }, null, 
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        `Could not find a part of type ${elementType} with title ${title} in this blade.`);
        async function satisfiesTitle(part, title) {
            const partTitle = await part.getPartTitle();
            return partTitle.toLocaleUpperCase() === title.toLocaleUpperCase();
        }
    }
}
exports.default = Lens;
//# sourceMappingURL=Lens.js.map