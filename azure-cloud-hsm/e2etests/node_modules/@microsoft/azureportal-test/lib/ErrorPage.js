"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const By_1 = require("./Locators/By");
const PortalElement_1 = require("./PortalElement");
const uriBuilder = require("./Utils/UriBuilder");
const BrowserAutomation_1 = require("./BrowserAutomation");
const PortalShell_1 = require("./PortalShell");
const RunScripts_1 = require("./Utils/RunScripts");
/**
 * Represents the Portal ErrorPage.
 */
class ErrorPage extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "error-page";
        this.tryAgainClassName = "error-page-content-tryagain";
        this.signOutClassName = "error-page-content-signout";
        this.showDirectoriesClassName = "error-page-content-showdirs";
        this.messageClassName = "error-page-messagedetails";
        this.aadCodeClassName = "error-page-aadcode";
        this.aadMessageClassName = "error-page-aadmessage";
        this.learnMoreLinkClassName = "error-page-content-learnmore";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(this.rootClassName);
    }
    /**
     * Gets the Try again link.
     */
    async getTryAgainLink() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(() => {
            return this.element(By_1.default.className(this.tryAgainClassName));
        }, null, "Could not find the Try Again link.");
    }
    /**
     * Gets the Sign out link.
     */
    async getSignOutLink() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(() => {
            return this.element(By_1.default.className(this.signOutClassName));
        }, null, "Could not find the Sign out link.");
    }
    /**
     * Gets the Show directories link.
     */
    async showDirectoriesLink() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(() => {
            return this.element(By_1.default.className(this.showDirectoriesClassName));
        }, null, "Could not find the Show directories link.");
    }
    /**
     * Gets the error message.
     */
    async getMessage() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(() => {
            return this.element(By_1.default.className(this.messageClassName));
        }, null, "Could not find the error message.");
    }
    /**
     * Gets the AAD error code.
     */
    async getAadCode() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(() => {
            return this.element(By_1.default.className(this.aadCodeClassName));
        }, null, "Could not find the AAD code.");
    }
    /**
     * Gets the AAD error message.
     */
    async getAadMessage() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(() => {
            return this.element(By_1.default.className(this.aadMessageClassName));
        }, null, "Could not find the AAD message.");
    }
    /**
     * Gets the Learn More link.
     */
    async getLearnMoreLink() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(() => {
            return this.element(By_1.default.className(this.learnMoreLinkClassName));
        }, null, "Could not find the Learn More link.");
    }
    /**
     * Waits for the portal signout sequence to complete
     */
    async waitForSignOut() {
        // wait until the uri in the browser changes, which means the browser was redirected to the sign in page
        return await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return (await (0, BrowserAutomation_1.getBrowser)().getCurrentUrl()).endsWith("/SignOut");
        }, null, "User was not signed out");
    }
    /**
     * Navigates to the error page
     *
     * @param webDriver The web driver.
     * @param portalUrl The url to the portal
     * @returns The error page
     */
    static async navigateToErrorPage(portalUrl, errorAction = null) {
        const shellUri = new uriBuilder.UriBuilder(portalUrl);
        errorAction = ["/Error", errorAction ?? ""].join("/");
        const errorPageUri = new uriBuilder.UriBuilder(shellUri.toString() + errorAction.toString());
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        await (0, RunScripts_1.runScript)(`window.location='${errorPageUri}'`);
        return await (0, BrowserAutomation_1.getBrowser)().wait(() => {
            return PortalShell_1.default.getPortalShell().element(ErrorPage);
        }, 3000, "Expected to find the error page.");
    }
}
exports.default = ErrorPage;
//# sourceMappingURL=ErrorPage.js.map