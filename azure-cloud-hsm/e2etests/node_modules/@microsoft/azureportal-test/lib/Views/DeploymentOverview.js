"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ReactView_1 = require("./ReactView");
const Locators_1 = require("../Locators");
const BrowserAutomation_1 = require("../BrowserAutomation");
const Utils = require("../Utils");
const LogLevel_1 = require("../LogLevel");
const PortalConfigurationManager_1 = require("../PortalConfigurationManager");
/**
 * Represents a deployment overview blade based on `deploymentOverviewBuilder`.
 */
class DeploymentOverview extends ReactView_1.default {
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return super.buildLocator({ subTitle: "Deployment" });
    }
    /**
     * Waits for the deployment blade to report it has completed
     *
     * @param timeout The maximum amount of time in milliseconds to wait when trying to locate elements.
     * @returns a promise that resolves when the deployment has reported Completion
     */
    async waitForDeploymentCompletion(timeout) {
        timeout = timeout ?? PortalConfigurationManager_1.default.portalContext.timeouts.extraLongTimeout;
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const deployComplete = await this.findAll(Locators_1.By.textContains("Your deployment is complete"));
            return deployComplete.length > 0;
        }, timeout, "The deployment never completed");
    }
    /**
     * Waits for the deployment blade to report it has failed
     *
     * @param timeout The maximum amount of time in milliseconds to wait when trying to locate elements.
     * @returns a promise that resolves when the deployment has reported failure
     */
    async waitForDeploymentFailure(timeout) {
        timeout = timeout ?? PortalConfigurationManager_1.default.portalContext.timeouts.extraLongTimeout;
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const deployComplete = await this.findAll(Locators_1.By.textContains(`Your deployment failed`));
            return deployComplete.length > 0;
        }, timeout, "The deployment never failed");
    }
    /**
     * Waits for the deployment blade to log details
     *
     * @param timeout The maximum amount of time in milliseconds to wait when trying to locate elements.
     * @returns a promise that resolves with deployment details logged
     */
    async logDeploymentDetails(timeout) {
        timeout = timeout ?? PortalConfigurationManager_1.default.portalContext.timeouts.extraLongTimeout;
        const downloadDeploymentDetailsPixelLocator = Locators_1.By.css("[data-testid='deploymentoverview-logdeployment']");
        const deploymentName = (await this.getTitle()).split("|")[0].trim();
        let retries = 3;
        let log = "";
        do {
            if (retries-- < 0) {
                throw new Error(`Unable to locate console log containing ${deploymentName}`);
            }
        } while (!(log = await (async () => {
            const downloadPixel = await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
                const elements = await this.findAll(downloadDeploymentDetailsPixelLocator);
                if (elements.length === 1) {
                    return elements[0];
                }
                return null;
            }, timeout, "Unable to locate element to log deployment details");
            if (downloadPixel) {
                await Utils.ReactView.executeInActiveReactView(() => downloadPixel.click());
                const logs = await (0, BrowserAutomation_1.getBrowser)().getBrowserLogs(LogLevel_1.LogLevel.Info);
                const [log] = logs.filter((log) => log.includes(deploymentName)).slice(-1);
                return log;
            }
        })()) ||
            retries > 0);
        return log;
    }
}
exports.default = DeploymentOverview;
//# sourceMappingURL=DeploymentOverview.js.map