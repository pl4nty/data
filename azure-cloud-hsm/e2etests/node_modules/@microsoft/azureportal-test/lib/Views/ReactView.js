"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ElementArrayFinder_1 = require("../ElementArrayFinder");
const By_1 = require("../Locators/By");
const View_1 = require("./View");
/**
 * Represents a ReactView.
 */
class ReactView extends View_1.default {
    constructor() {
        super(...arguments);
        this.reactFramePartClass = "fxs-part-reactframe";
        this.reactIdAttributeName = "data-react-id";
    }
    /**
     * Gets all PortalElements that match the specified locator in ReactView frame.
     *
     * @deprecated Use .findAll()
     * @param locator The locator.
     * @returns All PortalElements that match the specified locator in ReactView frame.
     */
    async findAllReactElements(locator) {
        return this.findAll(locator);
    }
    /**
     * Gets a PortalElement that matches the specified locator in ReactView frame.
     *
     * @deprecated Use .find()
     * @param locator The locator.
     * @returns A PortalElement that matches the specified locator in ReactView frame.
     */
    async findReactElement(locator) {
        return this.find(locator);
    }
    // Doc same as PortalElement
    // {@link ../PortalElement.ts}
    async find(subLocatorOrElementType, locatorOptions) {
        await this.populateFrameId();
        return new ElementArrayFinder_1.default({ frameId: this.reactFrameId })
            .all(subLocatorOrElementType, locatorOptions)
            .toPortalElement();
    }
    // Doc same as PortalElement
    // {@link ../PortalElement.ts}
    async findAll(subLocatorOrElementType, locatorOptions) {
        await this.populateFrameId();
        return await new ElementArrayFinder_1.default({ frameId: this.reactFrameId })
            .all(subLocatorOrElementType, locatorOptions)
            .asPortalElements();
    }
    async populateFrameId() {
        if (!this.reactFrameId) {
            await this.waitUntilLoaded();
            this.reactFrameId = await this.element(By_1.default.className(this.reactFramePartClass)).getAttribute(this.reactIdAttributeName);
        }
    }
}
exports.default = ReactView;
//# sourceMappingURL=ReactView.js.map