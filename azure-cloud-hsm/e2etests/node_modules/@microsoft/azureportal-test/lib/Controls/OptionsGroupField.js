"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const By_1 = require("../Locators/By");
const FormElement_1 = require("./FormElement");
const OptionsGroupFieldOption_1 = require("./OptionsGroupFieldOption");
const Constants = require("../Constants");
/**
 * Represents an OptionsGroup (picker) field.
 */
class OptionsGroupField extends FormElement_1.default {
    constructor() {
        super(...arguments);
        this.optionsGroupFieldClass = Constants.CssClassNames.Controls.optionsGroupField;
        /**
         * The collection of options that belong to this option picker field.
         */
        this.options = this.all(OptionsGroupFieldOption_1.default);
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(this.optionsGroupFieldClass);
    }
    /**
     * Gets the first selected option's text
     *
     * @returns a promise that resolves with the selected option's text
     */
    async getTextForSelectedOption() {
        const ops = await this.options.filter((op) => {
            return op.isSelected().then((val) => {
                return val;
            });
        });
        if (ops.length > 0) {
            return ops[0].getText();
        }
        return null;
    }
    /**
     * Clicks the specified option.
     *
     * @param {string} optionText The text of the option to select.
     * @returns A promise that resolves when the option has been selected.
     */
    async clickOption(optionText) {
        const ops = await this.options.filter((op) => {
            return op.getText().then((opText) => {
                return opText === optionText;
            });
        });
        if (ops.length > 0) {
            return ops[0].click();
        }
        return null;
    }
}
exports.default = OptionsGroupField;
//# sourceMappingURL=OptionsGroupField.js.map