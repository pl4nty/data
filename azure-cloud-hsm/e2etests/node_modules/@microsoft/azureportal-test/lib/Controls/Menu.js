"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PortalElement_1 = require("../PortalElement");
const BrowserAutomation_1 = require("../BrowserAutomation");
const Locators_1 = require("../Locators");
const MenuBladeItem_1 = require("./MenuBlade/MenuBladeItem");
const String = require("../Utils/String");
class Menu extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "fxc-menu";
        this.menuGridClassName = "fxc-menu-grid";
        this.listViewClassName = "azc-listView";
        this.collapsibleMenuClassName = "fxc-collapsible-menu";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return Locators_1.By.className(this.rootClassName);
    }
    /**
     * Gets the collection of menu items.
     *
     * @returns an array of menu items.
     */
    async getMenuItems() {
        const gridMenuItems = this.all(MenuBladeItem_1.MenuGridItem);
        const gridMenuItemsAsPortalElements = await gridMenuItems.asPortalElements();
        return gridMenuItemsAsPortalElements;
    }
    /**
     * Gets the specified menu item.
     *
     * @param title The title of the menu item.
     * @param comparer The method used to compare menu items to text, the default behavior is to check whether the menu item text string contains the title string.
     * @returns The menu item.
     */
    async getMenuItem(title, comparer = null) {
        // default method to find the item in the menu is if that item "contains" the title
        if (comparer === null) {
            comparer = async (menuItem, value) => {
                const menuItemText = await menuItem.getText();
                return menuItemText.includes(value);
            };
        }
        return (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const overviewItem = this.element(MenuBladeItem_1.OverviewMenuItem);
            if (overviewItem && (await overviewItem.getText()).toLowerCase() === title.toLowerCase()) {
                return overviewItem;
            }
            const menuGrid = await this.getMenuGrid();
            if (await menuGrid.hasClass(this.listViewClassName)) {
                // Expand all menu headers to make sure that the menu item is visible.
                await this.expandAllMenuHeaders();
                const filteredList = menuGrid.all(MenuBladeItem_1.MenuGridItem).filter((menuGridItem) => {
                    return comparer(menuGridItem, title);
                });
                if ((await filteredList.count()) > 0) {
                    return (await filteredList.asPortalElements())[0];
                }
                else {
                    return false;
                }
            }
            else {
                // In this case we will get the menu item from ObsoleteGridMenuItem class, which is a private class in Menu.cs in c# and can be implemented here if
                // required in future. Currently not implementing it because we are not aware of the scenario that uses it, so we won't be able to test it.
                throw new Error("ObsoleteGridMenuItem class not implemented.");
            }
        }, null, String.format("Could not find the menu item with the title <{0}>", title));
    }
    async expandAllMenuHeaders() {
        if (await this.hasClass(this.collapsibleMenuClassName)) {
            // Menu is collapsible, therefore try to expand all headers.
            const collapseExpandAllButton = await this.find(Locators_1.By.className("fxc-menu-collapseexpandall"));
            if (await collapseExpandAllButton.hasClass("fxc-menu-expandall")) {
                await collapseExpandAllButton.click();
            }
        }
    }
    /**
     * Gets the menu grid.
     *
     * @returns the menu grid elemennt.
     */
    async getMenuGrid() {
        return await (0, BrowserAutomation_1.getBrowser)().wait(() => this.element(Locators_1.By.className(this.menuGridClassName)), null, "Menu Grid not found.");
    }
}
exports.default = Menu;
//# sourceMappingURL=Menu.js.map