"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const By_1 = require("../Locators/By");
const FormElement_1 = require("./FormElement");
const BrowserAutomation_1 = require("../BrowserAutomation");
/**
 * Represents a slider.
 */
class RangeSlider extends FormElement_1.default {
    constructor() {
        super(...arguments);
        this.RootClassName = "azc-rangeSliderField";
        this.sliderEndHandleClassName = "azc-rangeSlider-end-handle";
        this.sliderHandleClassName = "azc-slider-handle";
        this.sliderBarClassName = "azc-slider-slider";
        this.sliderMarkerClassName = "azc-slider-marker";
        this.sliderBar = this.element(By_1.default.className(this.sliderBarClassName));
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(this.RootClassName);
    }
    /**
     * Drags the start handle to a marker on the slider
     *
     *  @param position the position to drag the start handle to.
     */
    async dragEndHandleToPosition(position) {
        await this.dragHandleToPosition(this.sliderEndHandle(), position);
    }
    sliderEndHandle() {
        return this.element(By_1.default.className(this.sliderEndHandleClassName)).element(By_1.default.className(this.sliderHandleClassName));
    }
    async dragHandleToPosition(handle, position) {
        // sliders use events that Selenium does not mimic in drag drop.  Use javascript to mimic these events instead.
        // Determine the distance between positions.
        // Note: There are 2 more positions than there are markers as the first and last position are simply the edges of the slider.
        const size = await this.sliderBar.getSize();
        const distanceBetweenPositions = size.width / ((await this.sliderMarkers()).length + 1);
        // The x value of the drop target.
        const x = (await this.sliderBar.getLocation()).x + position * distanceBetweenPositions;
        await this.dragHandle(handle, x);
    }
    async dragHandle(handle, x) {
        // The y value of the drop target.  This is constant.
        const y = (await this.sliderBar.getLocation()).y;
        await this.createMouseDownEvent(handle, x, y);
        await this.createMouseUpEvent(this.sliderBar);
    }
    async createMouseUpEvent(handle) {
        await (0, BrowserAutomation_1.runAutomation)(async (wd) => await wd.executeScript("$(arguments[0]).trigger('mouseup');", handle), async () => await (await handle.getWebElements())[0].executeScript("(htmlElem) => htmlElem.trigger('mouseup')"));
    }
    async createMouseDownEvent(handle, x, y) {
        await (0, BrowserAutomation_1.runAutomation)(async (wd) => await wd.executeScript("$(arguments[0]).trigger({type: 'mousedown', which: 1, pageX: arguments[1], pageY: arguments[2]})", handle, x, y), async () => await (await handle.getWebElements())[0].executeScript(`(htmlElem) => htmlElem.trigger({type: 'mousedown', which: 1, pageX: ${x}, pageY: ${y}})`));
    }
    async sliderMarkers() {
        return await this.all(By_1.default.className(this.sliderMarkerClassName)).asPortalElements();
    }
}
exports.default = RangeSlider;
//# sourceMappingURL=RangeSlider.js.map