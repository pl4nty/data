"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BrowserAutomation_1 = require("../BrowserAutomation");
const PortalElement_1 = require("../PortalElement");
const By_1 = require("../Locators/By");
/**
 * Represents a Pill List Item.
 */
class Pill extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "fxc-pill-collection-item";
        this.editModeClass = "fxc-pill-edit-mode";
        this.closeButtonClass = "fxc-pill-close";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(this.rootClassName);
    }
    /**
     *  Enters the pill's edit mode.
     */
    async enterEditMode() {
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            await this.click();
            return await this.isInEditMode();
        }, null, `Unable to enter pill edit mode.`);
    }
    /**
     * Returns true if the pill is in edit mode.
     */
    async isInEditMode() {
        // Element was found, means that the pill is in edit mode.
        const editModeElement = this.element(By_1.default.className(this.editModeClass));
        return await editModeElement.isPresent();
    }
    /**
     * Returns the pill's delete button.
     */
    deleteButton() {
        // Note: because pills can opt into having the delete button displayed,
        // make this call non-breaking if the element is not found.
        return this.element(By_1.default.className(this.closeButtonClass));
    }
}
exports.default = Pill;
//# sourceMappingURL=Pill.js.map