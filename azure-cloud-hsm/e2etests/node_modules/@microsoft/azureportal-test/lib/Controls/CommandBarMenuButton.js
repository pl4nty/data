"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CommandBarItem_1 = require("../Commands/CommandBarItem");
const By_1 = require("../Locators/By");
const BrowserAutomation_1 = require("../BrowserAutomation");
const CommandBarMenuPopup_1 = require("./CommandBarMenuPopup");
const CommandBarMenuItem_1 = require("../Commands/CommandBarMenuItem");
/**
 * Driver class for the toolbar menu button in toolbar portal control.
 */
class CommandBarMenuButton extends CommandBarItem_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "azc-toolbarMenuButton";
        this.toolbarButtonContainer = "azc-toolbarButton-container";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(this.rootClassName);
    }
    /**
     * Gets the collection of toolbar menu items.
     */
    async getItems() {
        const menuPopup = await this.getMenuPopup();
        return menuPopup.all(CommandBarMenuItem_1.default);
    }
    /**
     * Finds the toolbar menu item with the specified command label.
     *
     * @param {string} commandLabel Text of the command to click.
     */
    async findCommandBarMenuItem(commandLabel) {
        await this.expandMenuPopup();
        const commandBarMenuButton = await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const menuPopup = await this.getMenuPopup();
            const items = menuPopup.all(CommandBarMenuItem_1.default);
            const filteredCommandBarMenuButtons = items.filter((button) => {
                const promise = checkCommandBarMenuButtonHasExpectedText(button, commandLabel);
                return promise;
            });
            const filteredCommandBarMenuButtonsAsPortalElements = await filteredCommandBarMenuButtons.asPortalElements();
            if (filteredCommandBarMenuButtonsAsPortalElements.length === 1) {
                return filteredCommandBarMenuButtonsAsPortalElements[0];
            }
            if (filteredCommandBarMenuButtonsAsPortalElements.length === 0) {
                return null;
            }
            if (filteredCommandBarMenuButtonsAsPortalElements.length > 1) {
                throw new Error("More than one buttons found.");
            }
            async function checkCommandBarMenuButtonHasExpectedText(button, commandLabel) {
                return (await button.getText()).toLowerCase() === commandLabel.toLowerCase();
            }
        });
        return commandBarMenuButton;
    }
    /**
     * Returns the menu popup container for the menu button.
     */
    async getMenuPopup() {
        const checkCommandBarMenuPopHasExpectedId = async (cmdBarMenuPopup) => {
            return (await cmdBarMenuPopup.getId()) === (await this.menuId());
        };
        const commandBarMenuPop = this.all(CommandBarMenuPopup_1.default);
        const filteredCommandBarMenuButtons = commandBarMenuPop.filter((cmdBarMenuPopup) => {
            const promise = checkCommandBarMenuPopHasExpectedId(cmdBarMenuPopup);
            return promise;
        });
        const filteredCommandBarMenuButtonsAsPortalElements = await filteredCommandBarMenuButtons.asPortalElements();
        return filteredCommandBarMenuButtonsAsPortalElements[0];
    }
    /**
     * Unique id used for menu popup containing the menu items.
     */
    async menuId() {
        const buttonContainer = await this.getItemButtonContainer();
        return await (0, BrowserAutomation_1.runAutomation)(async (wd) => await wd.executeScript("return ko.unwrap((weaveDebug.getElementData(arguments[0]) || ko.dataFor(arguments[0])).menuId)", buttonContainer), async () => await (await buttonContainer.getWebElements())[0].executeScript("(htmlElem) => ko.unwrap((weaveDebug.getElementData(htmlElem) || ko.dataFor(htmlElem)).menuId)"));
    }
    async getItemButtonContainer() {
        if (await this.hasClass(this.toolbarButtonContainer)) {
            return this;
        }
        else {
            return this.tryFindElement(By_1.default.className(this.toolbarButtonContainer));
        }
    }
    /**
     *  Open the menu popup.
     */
    async expandMenuPopup() {
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const commandBarMenuPopup = await this.getMenuPopup();
            if (!(await commandBarMenuPopup.isDisplayed())) {
                await this.click();
            }
            return await commandBarMenuPopup.isDisplayed();
        }, null, "Open menu popup");
    }
}
exports.default = CommandBarMenuButton;
//# sourceMappingURL=CommandBarMenuButton.js.map