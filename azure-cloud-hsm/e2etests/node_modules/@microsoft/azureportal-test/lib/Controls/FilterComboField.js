"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BrowserAutomation_1 = require("../BrowserAutomation");
const By_1 = require("../Locators/By");
const Constants = require("../Constants");
const FormElement_1 = require("../Controls/FormElement");
const Grid_1 = require("../Controls/Grid");
/**
 * Represents a FilterCombo field.
 */
class FilterComboField extends FormElement_1.default {
    constructor() {
        super(...arguments);
        this.buttonElement = this.element(By_1.default.className(Constants.CssClassNames.Controls.editableComboDropImage));
        this.inputElement = this.element(By_1.default.className(Constants.CssClassNames.Controls.inputField));
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(Constants.CssClassNames.Controls.filterComboField);
    }
    /**
     * Waits for the form element to be enabled.
     *
     * @param timeout The amount of time to wait before failing
     * @returns A promise that resolves when the form element is enabled
     */
    async waitUntilEnabled(timeout) {
        const disabledElement = this.element(By_1.default.css(`.${Constants.CssClassNames.Controls.editableCombo}.${Constants.CssClassNames.Forms.disabledState}`));
        await (0, BrowserAutomation_1.getBrowser)().wait(() => {
            return disabledElement.isNotPresent();
        }, timeout, "Timed out waiting for the form element to be enabled");
        return;
    }
    /**
     * Sets the specified option by typing in the text.
     *
     * @param {string} optionText The text of the option to set.
     * @returns A promise that resolves when the option has been set.
     */
    async setOption(optionText) {
        await this.waitUntilEnabled();
        await this.inputElement.clear();
        return await this.inputElement.sendKeys(optionText);
    }
    /**
     * Selects the specified option.
     *
     * @param {string} optionText The text of the option to select.
     * @returns A promise that resolves when the option has been selected.
     */
    async selectOption(optionText) {
        await this.waitUntilEnabled();
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            await this.buttonElement.click();
            return this.element(Grid_1.default).isDisplayed() || null;
        });
        return await this.element(Grid_1.default).clickRow({ text: optionText });
    }
}
exports.default = FilterComboField;
//# sourceMappingURL=FilterComboField.js.map