"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const By_1 = require("../Locators/By");
const Grid2Base = require("./Grid2Base");
const BrowserAutomation_1 = require("../BrowserAutomation");
const Constants_1 = require("../Constants");
const Logger_1 = require("../Logger");
/**
 * Represents an EditableGrid control.
 */
class EditableGrid extends Grid2Base.BaseGrid {
    constructor(elementArrayFinder) {
        super(EditableGrid.Row, EditableGrid.Cell, EditableGrid.ColumnHeader, elementArrayFinder);
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.css(".fxc-gc-editableGrid");
    }
}
(function (EditableGrid) {
    /**
     * Represents an EditableGrid column header.
     */
    class ColumnHeader extends Grid2Base.BaseColumnHeader {
    }
    EditableGrid.ColumnHeader = ColumnHeader;
    /**
     * Represents an EditableGrid cell.
     */
    class Cell extends Grid2Base.BaseCell {
        /**
         * Gets the value of the first input in the cell.
         */
        async getInputValue() {
            return await this.element(By_1.default.tagName("input")).getAttribute("value");
        }
        /**
         * Sets the value of the first input in the cell.
         */
        async setInputValue(value) {
            return await this.element(By_1.default.tagName("input")).sendKeys(value);
        }
        /**
         * Waits until the cell has been focused on.
         */
        async waitUntilActive(timeout) {
            await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
                Logger_1.default.information("Waiting for cell to be active...");
                return await this.element(By_1.default.css(Constants_1.CssClassNames.Forms.dropDownFocusClass)).isPresent();
            }, timeout, "Cell was not ready for input within the specified timeout.");
            Logger_1.default.information("Cell is active!");
            return;
        }
    }
    EditableGrid.Cell = Cell;
    /**
     * Represents an EditableGrid row.
     */
    class Row extends Grid2Base.BaseRow {
        constructor(elementArrayFinder) {
            super(EditableGrid.Cell, elementArrayFinder);
        }
        /**
         * Gets the text of the EditableGrid row validation footer.
         */
        async validationErrors() {
            return await this.footer.getText();
        }
    }
    EditableGrid.Row = Row;
})(EditableGrid || (EditableGrid = {}));
exports.default = EditableGrid;
//# sourceMappingURL=EditableGrid.js.map