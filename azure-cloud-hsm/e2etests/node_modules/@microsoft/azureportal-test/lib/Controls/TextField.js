"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const By_1 = require("../Locators/By");
const FormElement_1 = require("./FormElement");
const PortalElement_1 = require("../PortalElement");
const Logger_1 = require("../Logger");
const BrowserAutomation_1 = require("../BrowserAutomation");
/**
 * Represents a TextField.
 */
class TextField extends FormElement_1.default {
    constructor() {
        super(...arguments);
        /**
         * Root class name for the TextField.
         */
        this.rootClassName = "azc-textField";
        /**
         * The input element.
         */
        this.input = this.element(By_1.default.tagName("input"));
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(this.rootClassName);
    }
    /**
     * Gets the current input value of the TextField
     *
     * @returns A promise that will resolve with the current value of the TextField
     */
    async value() {
        return await this.input.getInputValue();
    }
    /**
     * Gets the placeholder value of the textbox
     */
    async placeholderValue() {
        return await this.input.getAttribute("placeholder");
    }
    /**
     * Enters the specified text in the TextField.
     *
     * @param var_args The text to enter.
     * @returns A promise that resolves when the text has been entered.
     */
    async sendKeys(...var_args) {
        // eslint-disable-next-line prefer-spread
        return await this.input.sendKeys.apply(this.input, var_args);
    }
    /**
     * Enters the specified text in the TextField, and validates that it has been set.
     *
     * @param text The text to enter.
     * @returns A promise that resolves when the text has been entered.
     */
    async setText(text) {
        const maxAttempts = 5;
        let currentIteration = 0;
        while (currentIteration++ < maxAttempts) {
            const currentVal = await this.value();
            if (currentVal === text) {
                return;
            }
            Logger_1.default.diagnostics(`Current value '${currentVal} is not equal to input '${text}'`);
            await this.clear();
            await this.sendKeys(text);
            await this.blur();
            await (0, PortalElement_1.delay)(500);
        }
        throw Error(`Unable to set text ${text} on text field ${this.locator?.toString()}`);
    }
    /**
     * Schedules a command to clear the value of this element.
     *
     * @returns A promise that will be resolved when the element has been cleared.
     */
    async clear() {
        return await this.input.clear.apply(this.input);
    }
    /**
     * Sends a blur event to the textbox.
     */
    async blur() {
        return await (0, BrowserAutomation_1.runAutomation)(async (wd) => await wd.executeScript(`$(arguments[0]).blur()`, this.input), async () => await (await this.input.getWebElements())[0].executeScript("(htmlElem) => htmlElem.blur()"));
    }
}
exports.default = TextField;
//# sourceMappingURL=TextField.js.map