"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PortalElement_1 = require("../../PortalElement");
const By_1 = require("../../Locators/By");
const ListViewItem_1 = require("./ListViewItem");
const ListViewGroup_1 = require("./ListViewGroup");
const BrowserAutomation_1 = require("../../BrowserAutomation");
/**
 * Driver class for the ListView portal control
 */
class ListView extends PortalElement_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "azc-listView";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(this.rootClassName);
    }
    /**
     * Gets all of the rows of the group.
     */
    get groups() {
        return this.all(ListViewGroup_1.default);
    }
    /**
     * Gets all of the rows of the group.
     */
    get items() {
        return this.all(ListViewItem_1.default);
    }
    /**
     * Gets the specified item.
     *
     * @param identifier Specified identifier
     */
    async getListViewItem(identifier) {
        const listViewItems = await this.all(ListViewItem_1.default);
        const results = await Promise.all(listViewItems.map((listViewItem) => {
            return listViewItem.getText().then((value) => {
                return value.localeCompare(identifier) === 0;
            });
        }));
        const index = results.indexOf(true);
        if (index < 0) {
            throw `Could not find list view item ${identifier}`;
        }
        return listViewItems[index];
    }
    /**
     * Checks if the specified menu item is present in menu.
     *
     * @param identifier Specified identifier
     */
    async hasListViewItem(identifier) {
        let listViewItems;
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            listViewItems = this.all(ListViewItem_1.default);
            if (listViewItems) {
                return true;
            }
        }, null, "Could not find list view items.");
        let filteredListViewItem = null;
        await listViewItems.each(async (listViewItem) => {
            const listViewItemText = await listViewItem.getText();
            if (listViewItemText.toLocaleUpperCase() === identifier.toLocaleUpperCase().toLocaleUpperCase()) {
                filteredListViewItem = listViewItem;
            }
        });
        if (filteredListViewItem === null || filteredListViewItem === undefined) {
            return false;
        }
        return true;
    }
}
exports.default = ListView;
//# sourceMappingURL=ListView.js.map