"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FormElement_1 = require("./FormElement");
const By_1 = require("../Locators/By");
const BrowserAutomation_1 = require("../BrowserAutomation");
/**
 * Driver class for the TextBox portal control
 */
class TextBox extends FormElement_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "azc-textBox";
    }
    /**
     * Gets the locator associated to this element.
     *
     * @returns A Locator instance.
     */
    get locator() {
        return By_1.default.className(this.rootClassName);
    }
    /**
     * Gets the current value of the TextField
     *
     * @returns A promise that will resolve with the current value of the TextField
     */
    async value() {
        return await this.getInputElement().getAttribute("value");
    }
    /**
     * Gets the placeholder value of the textbox
     *
     * @returns A promise that will resolve with the placeholder value of the TextField
     */
    async placeholderValue() {
        return await this.getInputElement().getAttribute("placeholder");
    }
    /**
     * Enters the specified text in the TextField.
     *
     * @param var_args The text to enter.
     * @returns A promise that resolves when the text has been entered.
     */
    async sendKeys(...var_args) {
        return await this.getInputElement().sendKeys(...var_args);
    }
    /**
     * Schedules a command to clear the value of this element.
     *
     * @returns A promise that will be resolved when the element has been cleared.
     */
    async clear() {
        return await this.getInputElement().clear();
    }
    getInputElement() {
        return this.element(By_1.default.tagName("input"));
    }
    /**
     * Sends a blur event to the textbox.
     */
    async blur() {
        return await (0, BrowserAutomation_1.runAutomation)(async (wd) => await wd.executeScript(`$(arguments[0]).blur()`, this.getInputElement()), async () => await (await this.getInputElement().getWebElements())[0].executeScript("(htmlElem) => htmlElem.blur()"));
    }
    /**
     * Gets the placeholder value of the TextBox
     *
     * @returns A promise that will resolve with the placeholder value of the TextBox
     */
    async placeholder() {
        return await this.getInputElement().getAttribute("placeholder");
    }
}
exports.default = TextBox;
//# sourceMappingURL=TextBox.js.map