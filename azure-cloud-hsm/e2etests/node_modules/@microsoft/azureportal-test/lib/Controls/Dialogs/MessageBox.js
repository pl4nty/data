"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const By_1 = require("../../Locators/By");
const BrowserAutomation_1 = require("../../BrowserAutomation");
const Button_1 = require("../Button");
const CheckBoxField_1 = require("../CheckBoxField");
const DialogBase_1 = require("./DialogBase");
/**
 *  Represents a balloon.
 */
class MessageBox extends DialogBase_1.default {
    constructor() {
        super(...arguments);
        this.rootClassName = "fxs-messagebox";
        this.confirmationClassName = "fxs-messagebox-confirmation";
        this.titleViewModelProperty = "title";
    }
    /**
     *  By locator used to identify elements of this class.
     *
     * @returns {Locator} A Locator instance.
     */
    get locator() {
        return By_1.default.className(this.rootClassName);
    }
    /**
     * Gets the message box title.
     */
    async getTitle() {
        const selector = `[data-bind*=${this.titleViewModelProperty}]`;
        return await this.element(By_1.default.css(selector)).getText();
    }
    /**
     * Clicks the message box button with the specified command text.
     *
     * @param {string} buttonText The text of the message box button to click.
     */
    async clickButton(buttonText) {
        const button = await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const allButtons = this.all(Button_1.default);
            const filteredButtons = allButtons.filter((button) => {
                const promise = checkButtonHasExpectedText(button, buttonText);
                return promise;
            });
            const filteredButtonsAsPortalElements = await filteredButtons.asPortalElements();
            if (filteredButtonsAsPortalElements.length === 1) {
                return filteredButtonsAsPortalElements[0];
            }
            if (filteredButtonsAsPortalElements.length === 0) {
                return null;
            }
            if (filteredButtonsAsPortalElements.length > 1) {
                throw new Error("More than one buttons found.");
            }
        }, null, `Could not find the "${buttonText}" button in the active message box.`);
        await button.click();
        async function checkButtonHasExpectedText(button, title) {
            return (await button.getText()).toLowerCase() === title.toLowerCase();
        }
    }
    /**
     * Verifies button count.
     *
     * @param {number} count Expected button count.
     * @param filterFn filter function.
     */
    async verifyButtonCount(count, filterFn) {
        await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            const filteredButtons = await this.all(Button_1.default).filter((button) => {
                const promise = filterFn(button);
                return promise;
            });
            return filteredButtons.length === count;
        }, null, `There is expected to be "${count}" visible buttons`);
    }
    /**
     * Gets a checkbox of message box confirmation secion.
     */
    async clickConfirmation() {
        const checkbox = await (0, BrowserAutomation_1.getBrowser)().wait(async () => {
            return this.element(By_1.default.className(this.confirmationClassName)).element(CheckBoxField_1.default);
        }, null, `A checkbox is expected to be found in message box confirmation section`);
        await checkbox.click();
    }
}
exports.default = MessageBox;
//# sourceMappingURL=MessageBox.js.map