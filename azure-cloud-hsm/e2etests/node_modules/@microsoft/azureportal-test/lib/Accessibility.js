"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureAccessibilityIsAxeCoreClean = exports.AxeAnalysis = void 0;
const Logger_1 = require("./Logger");
const playwright_1 = require("@axe-core/playwright");
const AxeCore = require("axe-core");
const BrowserAutomation_1 = require("./BrowserAutomation");
const accessibilityLogger = Logger_1.default.diagnostics.extend("Accessibility");
const accessibilityWarning = Logger_1.default.warning.extend("Accessibility");
var AxeAnalysis = AxeCore.AxeResults;
exports.AxeAnalysis = AxeAnalysis;
/*
 * Ensure an element is accessible according to automated rule checking (via axe-core library). An assertion is made that the number of violations is 0.
 * See: https://github.com/dequelabs/axe-core, andhttps://github.com/dequelabs/axe-core-npm, a wrapper for axe-core for ease of use with Selenium and Playwright.
 */
async function ensureAccessibilityIsAxeCoreClean(element, options) {
    return await _ensureAccessibilityIsAxeCoreClean(element, options);
}
exports.ensureAccessibilityIsAxeCoreClean = ensureAccessibilityIsAxeCoreClean;
async function _ensureAccessibilityIsAxeCoreClean(element, options) {
    const disableRuleIds = options?.disableRuleIds ?? undefined;
    const verboseLogging = options?.verboseLogging ?? true;
    const locator = element.locator?.value ?? element.locator?.locator?.value ?? ".fxs-blade-content-wrapper";
    let analyzeResult;
    try {
        // eslint-disable-next-line @typescript-eslint/no-require-imports
        const AxeBuilder = require("axe-webdriverjs");
        let builder = (0, BrowserAutomation_1.runAutomationSync)((wd) => {
            return new AxeBuilder(wd.driver);
        }, (pw) => new playwright_1.default({ page: pw.page }));
        builder = builder.include(locator);
        if (disableRuleIds?.length > 0) {
            builder = builder.disableRules(disableRuleIds);
        }
        accessibilityLogger(`Running accessibility check on element with locator: ${locator}`);
        analyzeResult = await builder.analyze();
    }
    catch (e) {
        throw Error(`Accessibility.ensureAccessibilityIsAxeCoreClean: Error encountered while testing accessibility:\n${JSON.stringify(e)}`);
    }
    if (analyzeResult) {
        const violationCount = analyzeResult.violations.length;
        if (violationCount > 0) {
            accessibilityWarning(`There were ${violationCount} accessibility violation(s).${verboseLogging ? ` The violation(s) were:\n ${JSON.stringify(analyzeResult.violations)}` : ""}`);
        }
        else {
            accessibilityLogger("No violations found!");
        }
        return analyzeResult;
    }
    else {
        throw Error("Accessibility.ensureAccessibilityIsAxeCoreClean(): The result from AxeBuilder.analyze() was null or undefined. This could imply a problem with AxeBuilder.analyze().");
    }
}
//# sourceMappingURL=Accessibility.js.map