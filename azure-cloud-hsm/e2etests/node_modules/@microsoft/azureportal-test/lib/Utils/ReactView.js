"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.switchToDefaultContent = exports.executeInReactViewIframe = exports.executeInActiveReactView = void 0;
const Logger_1 = require("../Logger");
const ElementArrayFinder_1 = require("../ElementArrayFinder");
const By_1 = require("../Locators/By");
const Locator_1 = require("../Locators/Locator");
const BrowserAutomation_1 = require("../BrowserAutomation");
const reactViewDiagnostics = Logger_1.default.diagnostics.extend("reactview");
/**
 * Execute function within the active ReactView iframe.
 *
 * @param fn Async function to be executed.
 */
async function executeInActiveReactView(fn) {
    return await executeInReactViewIframe(By_1.default.className("fxs-reactview-frame-active"), fn);
}
exports.executeInActiveReactView = executeInActiveReactView;
/**
 * Execute function within the ReactView iframe located by frameLocator.
 *
 * @param frameLocator Locator or IBrowserElement for ReactView iframe.
 * @param fn Async function to be executed.
 */
async function executeInReactViewIframe(frameLocator, fn) {
    await (0, BrowserAutomation_1.runAutomation)(async (wd) => {
        await wd.driver.switchTo().defaultContent();
        try {
            const frame = frameLocator instanceof Locator_1.default
                ? (await ElementArrayFinder_1.default.element(frameLocator).getWebElements())[0]
                : frameLocator;
            Logger_1.default.information(`Switching to ReactView iframe`);
            await wd.driver.switchTo().frame(frame.element);
        }
        catch {
            throw new Error(`Could not locate ReactView iframe`);
        }
    }, async (pw) => {
        pw._switchCurrentFrame(null);
        const frameElement = frameLocator instanceof Locator_1.default
            ? await pw.wait(async () => (await frameLocator.findElements(pw))[0], null, `Could not locate ReactView iframe`, `Looking for ReactView iframe`)
            : frameLocator;
        const frame = await frameElement.element.contentFrame();
        pw._switchCurrentFrame(frame);
    });
    try {
        return await fn();
    }
    catch (error) {
        reactViewDiagnostics(error);
        throw error;
    }
    finally {
        reactViewDiagnostics("Switching back to default frame...");
        await switchToDefaultContent();
    }
}
exports.executeInReactViewIframe = executeInReactViewIframe;
async function switchToDefaultContent() {
    await (0, BrowserAutomation_1.runAutomation)(async (wd) => await wd.driver.switchTo().defaultContent(), async (pw) => await Promise.resolve(pw._switchCurrentFrame(null)));
}
exports.switchToDefaultContent = switchToDefaultContent;
//# sourceMappingURL=ReactView.js.map