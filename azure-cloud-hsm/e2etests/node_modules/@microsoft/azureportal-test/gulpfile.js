var gulp = require("gulp");
var Gitdown = require("gitdown");
var fs = require("fs");
var path = require("path");
var yargs = require("yargs");

//this code is used to generate the README.md file from the TEMPLATE.md file and the source code comments
//it is called from the npm scripts section in the package.json file
var { argv } = yargs.usage("Usage: --out [out folder]").demand([]);
const output = argv.out === true ? "" : argv.out;
console.log("logging output");
console.log(output);
gulp.task("readme", function () {
    var gitdown = Gitdown.readFile(__dirname + "/docs/TEMPLATE.md");

    gitdown.resolveURLs = (markdown) => {
        return Promise.resolve([]);
    };

    //register custom helper include-section to inject sections from a file into the docs
    gitdown.registerHelper("include-section", {
        weight: 10,
        compile: function (config, context) {
            if (!config.file) {
                throw new Error("config.file must be provided");
            }

            if (!config.section) {
                throw new Error("config.section must be provided");
            }

            config.file = path.resolve(context.gitdown.getConfig().baseDirectory, config.file);

            if (!fs.existsSync(config.file)) {
                throw new Error("Input file does not exist: " + config.file);
            }

            var content = fs.readFileSync(config.file, {
                encoding: "utf8",
            });

            var sectionPattern = "\\/\\/" + config.section + "([^]+?)\\/\\/" + config.section;
            var sectionRegEx = new RegExp(sectionPattern, "gmi");

            var result = sectionRegEx.exec(content);
            if (!result) {
                throw new Error("could not find section: " + sectionPattern + " in " + config.file);
            }
            return result.pop();
        },
    });
    return gitdown.writeFile(`${__dirname}\\${output === "readme" ? "" : output}README.md`);
});
