// Copyright (C) Microsoft Corporation. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package edge_continuity.proto;

option optimize_for = LITE_RUNTIME;

enum RTCMessageType {
  RTC_UNKNOWN = 0;
  RTC_REQUEST_SELECTOR_REQUIREMENT = 1;
  RTC_RESPONSE_SELECTOR_REQUIREMENT = 2;
  RTC_SEND_FILE_REQUEST = 3;
  RTC_SEND_FILE_RESPONSE = 4;
  RTC_SEND_FILE = 5;
  RTC_RECEIVE_FILE = 6;
  RTC_ACTION = 7;
  RTC_PEND_FILE = 8;
  RTC_RECEIVE_FILE_COMPLETED = 9;
  RTC_CHANGE_TO_EDGE_MOBILE = 10;
}
enum RTCAction {
  RTC_ACTION_UNKNOWN = 0;
  RTC_ACTION_TERMINAL = 1;
  RTC_ACTION_TIMEOUT = 2;
}

message SelectorRequirement {
  bool multiple = 1;
  string accept = 2;
  bool use_media_capture = 3;
  uint32 remaining_times = 4;
  string host_name = 5;
}

message EdgeBrowserEvidence {
  bool is_edge = 1;
  string evidence = 2;
}

// Declares the file information to be sent when RTCMessage.type is
// RTC_SEND_FILE_REQUEST. Declares the file information to be receive when
// RTCMessage.type is RTC_SEND_FILE_RESPONSE.
message RTCFileInfo {
  uint32 file_id = 1;
  string file_name = 2;
  uint64 file_size = 3;
  string file_type = 4;
}
message RTCFiles {
  uint32 count = 1;
  repeated RTCFileInfo files = 2;
}

// Declares the file staus and the content part to be sent when RTCMessage.type
// is RTC_SEND_FILE. Declares the file staus and the content part to be receive
// when RTCMessage.type is RTC_RECEIVE_FILE (buffer is empty in this case).
message FilePayload {
  uint32 file_id = 1;
  string file_name = 2;
  uint64 file_size = 3;
  uint64 file_offset = 4;
  uint64 slice_size = 5;
  bytes buffer = 6;
}

message RTCMessage {
  RTCMessageType type = 1;
  SelectorRequirement selector_requirement = 2;
  RTCFiles files = 3;
  FilePayload file_payload = 4;
  RTCAction action = 5;
  EdgeBrowserEvidence edge_browser_evidence = 6;
}
