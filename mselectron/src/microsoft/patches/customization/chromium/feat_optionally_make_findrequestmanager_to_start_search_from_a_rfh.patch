From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: deepak1556 <hop2deep@gmail.com>
Date: Wed, 17 Mar 2021 23:49:04 -0700
Subject: feat: Optionally make FindRequestManager to start search from a RFH

This patch adds the ability to search within a subtree of frames,
rather than always starting from the top-level WebContents.

diff --git a/chrome/browser/ui/browser.cc b/chrome/browser/ui/browser.cc
index e0582db3e8e88bbafeeb9f1aa9bd0bbbeb265a17..d45b1d2ca1912064a85d999c20c5ea1ba6772685 100644
--- a/chrome/browser/ui/browser.cc
+++ b/chrome/browser/ui/browser.cc
@@ -2575,7 +2575,8 @@ void Browser::FindReply(WebContents* web_contents,
                         int number_of_matches,
                         const gfx::Rect& selection_rect,
                         int active_match_ordinal,
-                        bool final_update) {
+                        bool final_update,
+                        content::RenderFrameHost* target_rfh) {
   find_in_page::FindTabHelper* find_tab_helper =
       find_in_page::FindTabHelper::FromWebContents(web_contents);
   if (!find_tab_helper) {
diff --git a/chrome/browser/ui/browser.h b/chrome/browser/ui/browser.h
index 0ee8fee2166f023f1fedc5ea9733ed2d37acd8d1..be7637400cad432580a82eba78626a01f2f8dc1d 100644
--- a/chrome/browser/ui/browser.h
+++ b/chrome/browser/ui/browser.h
@@ -1044,7 +1044,8 @@ class Browser : public TabStripModelObserver,
                  int number_of_matches,
                  const gfx::Rect& selection_rect,
                  int active_match_ordinal,
-                 bool final_update) override;
+                 bool final_update,
+                 content::RenderFrameHost* target_rfh) override;
   void RequestPointerLock(content::WebContents* web_contents,
                           bool user_gesture,
                           bool last_unlocked_by_target) override;
diff --git a/content/browser/find_request_manager.cc b/content/browser/find_request_manager.cc
index 739efc0cd793125ce9f1fe9b21f7c0d3cdc6b4a6..39a6d55d46ba17135279a0c9aa8ad0ca110a1765 100644
--- a/content/browser/find_request_manager.cc
+++ b/content/browser/find_request_manager.cc
@@ -210,6 +210,9 @@ class FindRequestManager::FrameObserver : public WebContentsObserver {
 
   void RenderFrameDeleted(RenderFrameHost* rfh) override {
     manager_->RemoveFrame(rfh);
+    if (manager_->GetTargetRenderFrameHost() == rfh) {
+      manager_->SetTargetRenderFrameHost(nullptr);
+    }
   }
 
   void RenderFrameHostStateChanged(
@@ -310,6 +313,10 @@ const int FindRequestManager::kInvalidId = -1;
 FindRequestManager::FindRequestManager(WebContentsImpl* web_contents)
     : contents_(web_contents) {}
 
+FindRequestManager::FindRequestManager(WebContentsImpl* web_contents,
+                                       RenderFrameHostImpl* rfh)
+    : contents_(web_contents), target_rfh_(rfh), target_rfh_assigned_(rfh != nullptr) {}
+
 FindRequestManager::~FindRequestManager() = default;
 
 void FindRequestManager::Find(int request_id,
@@ -503,8 +510,9 @@ void FindRequestManager::RemoveFrame(RenderFrameHost* rfh) {
   // is removed, we can target any queued requests to the focused frame or
   // primary main frame. However, if the primary main frame is removed we will
   // not have a valid RenderFrameHost to target for the request queue.
-  if (rfh->IsInPrimaryMainFrame())
+  if (rfh->IsInPrimaryMainFrame() || target_rfh_ == rfh) {
     find_request_queue_ = base::queue<FindRequest>();
+  }
 
   // Update the active match ordinal, since it may have changed.
   if (active_frame_ == rfh) {
@@ -695,6 +703,15 @@ void FindRequestManager::FindInternal(const FindRequest& request) {
   // This is an initial find operation.
   Reset(request);
 
+  if (target_rfh_) {
+    frame_observers_.push_back(
+        std::make_unique<FrameObserver>(contents_, this));
+    target_rfh_->ForEachRenderFrameHost([this](content::RenderFrameHost* rfh) {
+      AddFrame(rfh, false /* force */);
+    });
+    return;
+  }
+
   // Add and observe eligible RFHs in the WebContents. And, use
   // ForEachRenderFrameHostImpl instead of ForEachAddedFindInPageRenderFrameHost
   // because that calls CheckFrame() which will only be true if we've called
@@ -751,13 +768,20 @@ void FindRequestManager::NotifyFindReply(int request_id, bool final_update) {
   else
     last_reported_id_ = request_id;
 
-  contents_->NotifyFindReply(request_id, number_of_matches_, selection_rect_,
-                             active_match_ordinal_, final_update);
+  if (target_rfh_assigned_ && CheckFrame(target_rfh_)) {
+    contents_->NotifyFindReply(request_id, number_of_matches_, selection_rect_,
+                               active_match_ordinal_, final_update, target_rfh_);
+  } else if (!target_rfh_assigned_) {
+    contents_->NotifyFindReply(request_id, number_of_matches_, selection_rect_,
+                               active_match_ordinal_, final_update, nullptr);
+  }
 }
 
 RenderFrameHost* FindRequestManager::GetInitialFrame(bool forward) const {
   RenderFrameHost* rfh =
-      contents_->GetPrimaryFrameTree().root()->current_frame_host();
+      target_rfh_
+          ? target_rfh_.get()
+          : contents_->GetPrimaryFrameTree().root()->current_frame_host();
   if (!forward)
     rfh = GetDeepestLastChild(static_cast<RenderFrameHostImpl*>(rfh));
 
@@ -927,6 +951,14 @@ std::unique_ptr<FindInPageClient> FindRequestManager::CreateFindInPageClient(
   return std::make_unique<FindInPageClient>(this, rfh);
 }
 
+raw_ptr<RenderFrameHost> FindRequestManager::GetTargetRenderFrameHost() {
+  return target_rfh_;
+}
+
+void FindRequestManager::SetTargetRenderFrameHost(RenderFrameHost* rfh) {
+  target_rfh_ = static_cast<RenderFrameHostImpl*>(rfh);
+}
+
 #if BUILDFLAG(IS_ANDROID)
 void FindRequestManager::RemoveNearestFindResultPendingReply(
     RenderFrameHost* rfh) {
diff --git a/content/browser/find_request_manager.h b/content/browser/find_request_manager.h
index ba7ded2901c097cc0f027d6ac6494e5268b93757..96aff0403645dd151ca1640b6e2ea1d43a75cfc0 100644
--- a/content/browser/find_request_manager.h
+++ b/content/browser/find_request_manager.h
@@ -38,10 +38,10 @@ class WebContentsImpl;
 class FindRequestManager {
  public:
   explicit FindRequestManager(WebContentsImpl* web_contents);
-
+  FindRequestManager(WebContentsImpl* web_contents,
+                     RenderFrameHostImpl* target_rfh);
   FindRequestManager(const FindRequestManager&) = delete;
   FindRequestManager& operator=(const FindRequestManager&) = delete;
-
   ~FindRequestManager();
 
   // Initiates a find operation for |search_text| with the options specified in
@@ -128,6 +128,9 @@ class FindRequestManager {
     create_find_in_page_client_for_testing_ = create_func;
   }
 
+  raw_ptr<RenderFrameHost> GetTargetRenderFrameHost();
+  void SetTargetRenderFrameHost(RenderFrameHost* target_rfh);
+
  private:
   friend class FindRequestManagerFencedFrameTest;
 
@@ -309,6 +312,10 @@ class FindRequestManager {
   // WebContentses within it will be searched.
   const raw_ptr<WebContentsImpl> contents_;
 
+  // When provided only frames in |target_rfh_| will be searched.
+  raw_ptr<RenderFrameHostImpl> target_rfh_ = nullptr;
+  bool target_rfh_assigned_ = false;
+
   // The request ID of the initial find request in the current find-in-page
   // session, which uniquely identifies this session. Request IDs are included
   // in all find-related IPCs, which allows reply IPCs containing results from
diff --git a/content/browser/web_contents/web_contents_impl.cc b/content/browser/web_contents/web_contents_impl.cc
index e131c77f42a7f5183319ff41ec57118981fe76f7..c0b2ed0c06de0099069b1d37d2318a256d35bc34 100644
--- a/content/browser/web_contents/web_contents_impl.cc
+++ b/content/browser/web_contents/web_contents_impl.cc
@@ -10261,12 +10261,13 @@ void WebContentsImpl::NotifyFindReply(int request_id,
                                       int number_of_matches,
                                       const gfx::Rect& selection_rect,
                                       int active_match_ordinal,
-                                      bool final_update) {
+                                      bool final_update,
+                                      RenderFrameHost* target_rfh) {
   OPTIONAL_TRACE_EVENT0("content", "WebContentsImpl::NotifyFindReply");
   if (delegate_ && !IsBeingDestroyed() &&
       !GetPrimaryMainFrame()->GetProcess()->FastShutdownStarted()) {
     delegate_->FindReply(this, request_id, number_of_matches, selection_rect,
-                         active_match_ordinal, final_update);
+                         active_match_ordinal, final_update, target_rfh);
   }
 }
 
diff --git a/content/browser/web_contents/web_contents_impl.h b/content/browser/web_contents/web_contents_impl.h
index 22d9e6831439563320bc6f8d924afcc208273557..776056824311c97682f42fbcaf2c72663018c7dd 100644
--- a/content/browser/web_contents/web_contents_impl.h
+++ b/content/browser/web_contents/web_contents_impl.h
@@ -1321,7 +1321,8 @@ class CONTENT_EXPORT WebContentsImpl
                        int number_of_matches,
                        const gfx::Rect& selection_rect,
                        int active_match_ordinal,
-                       bool final_update);
+                       bool final_update,
+                       RenderFrameHost* target_rfh);
 
   // Modify the counter of connected devices for this WebContents.
   void IncrementBluetoothConnectedDeviceCount();
diff --git a/content/public/browser/web_contents_delegate.h b/content/public/browser/web_contents_delegate.h
index 0bab4dd08a28dd572c9cac00c337672af6aee352..406b28b7a8fb3019711341f4c4e89f898923446a 100644
--- a/content/public/browser/web_contents_delegate.h
+++ b/content/public/browser/web_contents_delegate.h
@@ -545,7 +545,8 @@ class CONTENT_EXPORT WebContentsDelegate {
                          int number_of_matches,
                          const gfx::Rect& selection_rect,
                          int active_match_ordinal,
-                         bool final_update) {}
+                         bool final_update,
+                         RenderFrameHost* target_rfh) {}
 
 #if BUILDFLAG(IS_ANDROID)
   // Provides the rects of the current find-in-page matches.
diff --git a/extensions/browser/guest_view/web_view/web_view_guest.cc b/extensions/browser/guest_view/web_view/web_view_guest.cc
index c8776e74a4d9f7ef33d59571c419d7c34d7aa9af..b5e4c4f3d2780fc4f0faf4a8f50db6b02fdf1765 100644
--- a/extensions/browser/guest_view/web_view/web_view_guest.cc
+++ b/extensions/browser/guest_view/web_view/web_view_guest.cc
@@ -761,9 +761,11 @@ void WebViewGuest::FindReply(WebContents* source,
                              int number_of_matches,
                              const gfx::Rect& selection_rect,
                              int active_match_ordinal,
-                             bool final_update) {
+                             bool final_update,
+                             content::RenderFrameHost* target_rfh) {
   GuestViewBase::FindReply(source, request_id, number_of_matches,
-                           selection_rect, active_match_ordinal, final_update);
+                           selection_rect, active_match_ordinal, final_update,
+                           target_rfh);
   find_helper_.FindReply(request_id, number_of_matches, selection_rect,
                          active_match_ordinal, final_update);
 }
diff --git a/extensions/browser/guest_view/web_view/web_view_guest.h b/extensions/browser/guest_view/web_view/web_view_guest.h
index 24d6bada16772d331753430c9a83c10ad37814f5..2e793338e9ccc7432aa5f52e69044fd5def7a6bc 100644
--- a/extensions/browser/guest_view/web_view/web_view_guest.h
+++ b/extensions/browser/guest_view/web_view/web_view_guest.h
@@ -207,7 +207,8 @@ class WebViewGuest : public guest_view::GuestView<WebViewGuest> {
                  int number_of_matches,
                  const gfx::Rect& selection_rect,
                  int active_match_ordinal,
-                 bool final_update) final;
+                 bool final_update,
+                 content::RenderFrameHost* target_rfh) final;
   bool ZoomPropagatesFromEmbedderToGuest() const final;
   const char* GetAPINamespace() const final;
   int GetTaskPrefix() const final;
