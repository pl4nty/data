import os
import sys
from urllib.request import urlretrieve

from .filesystem import mkdir_p
from .project_paths import SRC_DIR


# Hashes of a downloadable Windows toolchain.
# https://chromium.googlesource.com/chromium/src.git/+/HEAD/docs/win_cross.md
# Both the Chromium (expected) toolchain hash and the Microsoft (actual) one
# are hardcoded here to make sure they are updated in sync should one of them
# change. Chromium toolchain hash is set in "TOOLCHAIN_HASH" in
# "src/build/vs_toolchain.py". Do not reuse it from there, copy it here instead.
# When the Chromium hash changes we have to regenerate our toolchain too.
CHROMIUM_TOOLCHAIN_HASH = '68a20d6dee'
# Generated by
# https://devdiv.visualstudio.com/DevDiv/_build?definitionId=19585
MICROSOFT_TOOLCHAIN_HASH = '68a20d6dee'


def _get_vs_toolchain_url():
    return "https://msftelectronbuild.z5.web.core.windows.net/" \
        f"windows-toolchain/{MICROSOFT_TOOLCHAIN_HASH}.zip"


def download(download_dir):
    url = _get_vs_toolchain_url()
    download_path = os.path.join(
        download_dir, f"{MICROSOFT_TOOLCHAIN_HASH}.zip")
    mkdir_p(download_dir)
    urlretrieve(url, download_path)


def override_toolchain_hash_in_environment(env):
    env[f'GYP_MSVS_HASH_{CHROMIUM_TOOLCHAIN_HASH}'] = MICROSOFT_TOOLCHAIN_HASH


def get_visual_studio_path():
    # Importing "vs_toolchain" from Chromium here to be able
    # to use this file outside of a Chromium checkout.
    src_build_dir = os.path.join(SRC_DIR, 'build')
    sys.path.append(src_build_dir)
    # pylint: disable=C0415
    from vs_toolchain import SetEnvironmentAndGetRuntimeDllDirs
    # pylint: enable=C0415

    # Should be set to make detection of a locally installed
    # Visual Studio work properly.
    if 'DEPOT_TOOLS_WIN_TOOLCHAIN' not in os.environ:
        os.environ['DEPOT_TOOLS_WIN_TOOLCHAIN'] = '0'
    SetEnvironmentAndGetRuntimeDllDirs()

    assert ('GYP_MSVS_OVERRIDE_PATH' in os.environ)
    return os.environ['GYP_MSVS_OVERRIDE_PATH']
