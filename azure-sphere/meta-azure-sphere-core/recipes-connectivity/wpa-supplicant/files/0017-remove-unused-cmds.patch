diff --git a/wpa_supplicant/ctrl_iface.c b/wpa_supplicant/ctrl_iface.c
index 30e7d0c..c93cfb4 100644
--- a/wpa_supplicant/ctrl_iface.c
+++ b/wpa_supplicant/ctrl_iface.c
@@ -9987,6 +9987,7 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 	if (os_strcmp(buf, "PING") == 0) {
 		os_memcpy(reply, "PONG\n", 5);
 		reply_len = 5;
+#ifndef CONFIG_REMOVE_UNUSED_CMDS		
 	} else if (os_strcmp(buf, "IFNAME") == 0) {
 		reply_len = os_strlen(wpa_s->ifname);
 		os_memcpy(reply, wpa_s->ifname, reply_len);
@@ -10007,9 +10008,11 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 				reply_size - reply_len);
 #endif /* CONFIG_MACSEC */
 		}
+#endif /* CONFIG_REMOVE_UNUSED_CMDS */
 	} else if (os_strncmp(buf, "STATUS", 6) == 0) {
 		reply_len = wpa_supplicant_ctrl_iface_status(
 			wpa_s, buf + 6, reply, reply_size);
+#ifndef CONFIG_REMOVE_UNUSED_CMDS		
 	} else if (os_strcmp(buf, "PMKSA") == 0) {
 		reply_len = wpas_ctrl_iface_pmksa(wpa_s, reply, reply_size);
 	} else if (os_strcmp(buf, "PMKSA_FLUSH") == 0) {
@@ -10030,6 +10033,7 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 			reply_len = -1;
 #endif /* CONFIG_MESH */
 #endif /* CONFIG_PMKSA_CACHE_EXTERNAL */
+#endif /* CONFIG_REMOVE_UNUSED_CMDS */	
 	} else if (os_strncmp(buf, "SET ", 4) == 0) {
 		if (wpa_supplicant_ctrl_iface_set(wpa_s, buf + 4))
 			reply_len = -1;
@@ -10039,15 +10043,18 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 	} else if (os_strncmp(buf, "GET ", 4) == 0) {
 		reply_len = wpa_supplicant_ctrl_iface_get(wpa_s, buf + 4,
 							  reply, reply_size);
+#ifndef CONFIG_REMOVE_UNUSED_CMDS									  
 	} else if (os_strcmp(buf, "LOGON") == 0) {
 		eapol_sm_notify_logoff(wpa_s->eapol, FALSE);
 	} else if (os_strcmp(buf, "LOGOFF") == 0) {
 		eapol_sm_notify_logoff(wpa_s->eapol, TRUE);
+#endif /* CONFIG_REMOVE_UNUSED_CMDS */		
 	} else if (os_strcmp(buf, "REASSOCIATE") == 0) {
 		if (wpa_s->wpa_state == WPA_INTERFACE_DISABLED)
 			reply_len = -1;
 		else
 			wpas_request_connection(wpa_s);
+#ifndef CONFIG_REMOVE_UNUSED_CMDS									  
 	} else if (os_strcmp(buf, "REATTACH") == 0) {
 		if (wpa_s->wpa_state == WPA_INTERFACE_DISABLED ||
 		    !wpa_s->current_ssid)
@@ -10381,6 +10388,8 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 	} else if (os_strcmp(buf, "CANCEL_FETCH_OSU") == 0) {
 		hs20_cancel_fetch_osu(wpa_s);
 #endif /* CONFIG_HS20 */
+#endif /* CONFIG_REMOVE_UNUSED_CMDS */		
+
 	} else if (os_strncmp(buf, WPA_CTRL_RSP, os_strlen(WPA_CTRL_RSP)) == 0)
 	{
 		if (wpa_supplicant_ctrl_iface_ctrl_rsp(
@@ -10397,6 +10406,7 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 	} else if (os_strcmp(buf, "RECONFIGURE") == 0) {
 		if (wpa_supplicant_reload_configuration(wpa_s))
 			reply_len = -1;
+#ifndef CONFIG_REMOVE_UNUSED_CMDS							
 	} else if (os_strcmp(buf, "TERMINATE") == 0) {
 		wpa_supplicant_terminate_proc(wpa_s->global);
 	} else if (os_strncmp(buf, "BSSID ", 6) == 0) {
@@ -10408,6 +10418,7 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 	} else if (os_strncmp(buf, "LOG_LEVEL", 9) == 0) {
 		reply_len = wpa_supplicant_ctrl_iface_log_level(
 			wpa_s, buf + 9, reply, reply_size);
+#endif /* CONFIG_REMOVE_UNUSED_CMDS */		
 	} else if (os_strncmp(buf, "LIST_NETWORKS ", 14) == 0) {
 		reply_len = wpa_supplicant_ctrl_iface_list_networks(
 			wpa_s, buf + 14, reply, reply_size);
@@ -10426,9 +10437,11 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 	} else if (os_strcmp(buf, "ABORT_SCAN") == 0) {
 		if (wpas_abort_ongoing_scan(wpa_s) < 0)
 			reply_len = -1;
+#ifndef CONFIG_REMOVE_UNUSED_CMDS			
 	} else if (os_strncmp(buf, "SELECT_NETWORK ", 15) == 0) {
 		if (wpa_supplicant_ctrl_iface_select_network(wpa_s, buf + 15))
 			reply_len = -1;
+#endif /* CONFIG_REMOVE_UNUSED_CMDS */					
 	} else if (os_strncmp(buf, "ENABLE_NETWORK ", 15) == 0) {
 		if (wpa_supplicant_ctrl_iface_enable_network(wpa_s, buf + 15))
 			reply_len = -1;
@@ -10464,6 +10477,7 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 				reply_len = ret;
 			}
 		}
+#ifndef CONFIG_REMOVE_UNUSED_CMDS			
 	} else if (os_strcmp(buf, "LIST_CREDS") == 0) {
 		reply_len = wpa_supplicant_ctrl_iface_list_creds(
 			wpa_s, reply, reply_size);
@@ -10480,6 +10494,7 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 		reply_len = wpa_supplicant_ctrl_iface_get_cred(wpa_s, buf + 9,
 							       reply,
 							       reply_size);
+#endif /* CONFIG_REMOVE_UNUSED_CMDS */								   
 #ifndef CONFIG_NO_CONFIG_WRITE
 	} else if (os_strcmp(buf, "SAVE_CONFIG") == 0) {
 		int ret = wpa_supplicant_ctrl_iface_save_config(wpa_s);
@@ -10492,6 +10507,7 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 			}
 		}
 #endif /* CONFIG_NO_CONFIG_WRITE */
+#ifndef CONFIG_REMOVE_UNUSED_CMDS			
 	} else if (os_strncmp(buf, "GET_CAPABILITY ", 15) == 0) {
 		reply_len = wpa_supplicant_ctrl_iface_get_capability(
 			wpa_s, buf + 15, reply, reply_size);
@@ -10584,9 +10600,11 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 	} else if (os_strncmp(buf, "WMM_AC_DELTS ", 13) == 0) {
 		if (wmm_ac_ctrl_delts(wpa_s, buf + 13))
 			reply_len = -1;
+#endif /* CONFIG_REMOVE_UNUSED_CMDS */								   
 	} else if (os_strncmp(buf, "SIGNAL_POLL", 11) == 0) {
 		reply_len = wpa_supplicant_signal_poll(wpa_s, reply,
 						       reply_size);
+#ifndef CONFIG_REMOVE_UNUSED_CMDS			
 	} else if (os_strncmp(buf, "SIGNAL_MONITOR", 14) == 0) {
 		if (wpas_ctrl_iface_signal_monitor(wpa_s, buf + 14))
 			reply_len = -1;
@@ -10606,9 +10624,11 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 		reply_len = wpa_supplicant_driver_cmd(wpa_s, buf + 7, reply,
 						      reply_size);
 #endif /* ANDROID */
+#endif /* CONFIG_REMOVE_UNUSED_CMDS */								   
 	} else if (os_strncmp(buf, "VENDOR ", 7) == 0) {
 		reply_len = wpa_supplicant_vendor_cmd(wpa_s, buf + 7, reply,
 						      reply_size);
+#ifndef CONFIG_REMOVE_UNUSED_CMDS										  
 	} else if (os_strcmp(buf, "REAUTHENTICATE") == 0) {
 		pmksa_cache_clear_current(wpa_s->wpa);
 		eapol_sm_request_reauth(wpa_s->eapol);
@@ -10806,6 +10826,7 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 		dpp_controller_stop(wpa_s->dpp);
 #endif /* CONFIG_DPP2 */
 #endif /* CONFIG_DPP */
+#endif /* CONFIG_REMOVE_UNUSED_CMDS */					
 	} else {
 		os_memcpy(reply, "UNKNOWN COMMAND\n", 16);
 		reply_len = 16;
