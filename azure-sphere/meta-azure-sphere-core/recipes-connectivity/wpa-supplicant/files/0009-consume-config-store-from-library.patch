From 1f07ce482f4a3972f5116df64341a037bd2d9a1e Mon Sep 17 00:00:00 2001
From: Thales Carvalho <thalesc@microsoft.com>
Date: Wed, 11 Dec 2019 10:00:00 -0800
Subject: [PATCH] consume config store from library

---
 wpa_supplicant/Makefile       |   3 +-
 wpa_supplicant/config_store.c | 605 ----------------------------------
 wpa_supplicant/config_store.h | 211 ------------
 3 files changed, 1 insertion(+), 818 deletions(-)
 delete mode 100644 wpa_supplicant/config_store.c
 delete mode 100644 wpa_supplicant/config_store.h

diff --git a/wpa_supplicant/Makefile b/wpa_supplicant/Makefile
index a891e82..95bdf5e 100644
--- a/wpa_supplicant/Makefile
+++ b/wpa_supplicant/Makefile
@@ -215,9 +215,8 @@ endif
 ifeq ($(CONFIG_BACKEND), azsphere)
 OBJS += config_file.o
 OBJS += config_azsphere.o
-OBJS += config_store.o
+LIBS += -lazscfgsto
 NEED_BASE64=y
-NEED_JSON=y
 CFLAGS += -DCONFIG_BACKEND_FILE
 LDFLAGS += -Wl,--wrap=wpa_config_read -Wl,--wrap=wpa_config_write
 endif
diff --git a/wpa_supplicant/config_store.c b/wpa_supplicant/config_store.c
deleted file mode 100644
index 37af299..0000000
--- a/wpa_supplicant/config_store.c
+++ /dev/null
@@ -1,605 +0,0 @@
-#include "config_store.h"
-
-#include <errno.h>
-#include <fcntl.h>
-#include <stddef.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include <sys/file.h>
-#include <sys/stat.h>
-#include <sys/types.h>
-#include <unistd.h>
-#include <unistd.h>
-
-static char *AppendString(const char *front, const char *back)
-{
-    size_t front_len = strlen(front);
-    size_t back_len = strlen(back);
-    char *dst = malloc(front_len + back_len + sizeof('\0'));
-    if (dst != NULL) {
-        strncpy(&dst[0], front, front_len);
-        strncpy(&dst[front_len], back, back_len);
-        dst[front_len + back_len] = '\0';
-    }
-
-    return dst;
-}
-
-static size_t GetDistance(const ConfigStoreKvpHeader *p, const ConfigStoreKvpHeader *pEnd)
-{
-    return (ptrdiff_t)pEnd - (ptrdiff_t)p;
-}
-
-size_t ConfigStore_GetKvpFullSize(const ConfigStoreKvpHeader *p, const ConfigStoreKvpHeader *pEnd)
-{
-    if (!p) {
-        return 0;
-    }
-
-    size_t avail_size = GetDistance(p, pEnd);
-
-    if (p->size <= avail_size) {
-        return p->size;
-    } else {
-        return avail_size;
-    }
-}
-
-bool ConfigStore_CanDereferenceKvp(const ConfigStoreKvpHeader *p, const ConfigStoreKvpHeader *pEnd)
-{
-    return p && (sizeof(*p) <= p->size) && (p->size <= GetDistance(p, pEnd));
-}
-
-ConfigStoreKvpHeader *ConfigStore_GetNextKvp(const ConfigStoreKvpHeader *p,
-                                             const ConfigStoreKvpHeader *pEnd)
-{
-    size_t dist;
-    if (!p) {
-        dist = 0;
-    } else if (ConfigStore_CanDereferenceKvp(p, pEnd)) {
-        dist = p->size;
-    } else {
-        dist = GetDistance(p, pEnd);
-    }
-    return (ConfigStoreKvpHeader *)((ptrdiff_t)p + dist);
-}
-
-uint32_t ConfigStore_AddCrc(uint32_t init, const uint8_t *data, size_t size)
-{
-    uint32_t crc = init;
-    const uint8_t *last = data + size;
-    while (data != last) {
-        crc = crc ^ *data++;
-        for (int j = 7; j >= 0; --j) {
-            uint32_t mask = -(crc & 1);
-            crc = (crc >> 1) ^ (0xEDB88320 & mask);
-        }
-    }
-    return crc;
-}
-
-void ConfigStore_Init(ConfigStore *p)
-{
-    memset(p, 0, sizeof(*p));
-    p->_fd = -1;
-}
-
-void ConfigStore_Close(ConfigStore *p)
-{
-    if (p->_fd >= 0) {
-        close(p->_fd);
-    }
-    free(p->_primary_path);
-    free(p->_replica_path);
-    free(p->_begin);
-    ConfigStore_Init(p);
-}
-
-void ConfigStore_Move(ConfigStore *pDst, ConfigStore *pSrc)
-{
-    if (pDst != pSrc) {
-        ConfigStore_Close(pDst);
-        memcpy(pDst, pSrc, sizeof(*pDst));
-        ConfigStore_Init(pSrc);
-    }
-}
-
-int ConfigStore_ReserveCapacity(ConfigStore *p, size_t capacity)
-{
-    if (capacity > p->_max_size) {
-        // Can't grow the file beyond max size.
-        errno = E2BIG;
-        return -1;
-    }
-
-    size_t current_capacity = p->_capacity - p->_begin;
-
-    if (capacity > current_capacity) {
-        uint8_t *new_begin = realloc(p->_begin, capacity);
-        if (new_begin == NULL) {
-            return -1;
-        }
-
-        p->_capacity = &new_begin[capacity];
-        p->_end = &new_begin[p->_end - p->_begin];
-        p->_begin = new_begin;
-    }
-
-    return 0;
-}
-
-static bool ConfigStore_InvariantsCheck(const ConfigStore *p)
-{
-    bool ok = (p) && (p->_fd >= 0) && (p->_begin + sizeof(ConfigStoreFileHeader) <= p->_end) &&
-              (p->_end <= p->_capacity);
-    return ok;
-}
-
-static bool ReplicaTypeIsValid(ConfigStoreReplicaType rtype)
-{
-    switch (rtype) {
-    case ConfigStoreReplica_None ... ConfigStoreReplica_Swap:
-        return true;
-    default:
-        return false;
-    }
-}
-
-static int Impl_Open(ConfigStore *p, const char *base_filepath, size_t max_size, int flags,
-                     ConfigStoreReplicaType rtype)
-{
-    if (!ReplicaTypeIsValid(rtype)) {
-        errno = EINVAL;
-        return -1;
-    }
-
-    p->_replica_type = rtype;
-    p->_max_size = max_size;
-
-    p->_primary_path = strdup(base_filepath);
-    if (p->_primary_path == NULL) {
-        return -1;
-    }
-
-    if (p->_replica_type == ConfigStoreReplica_Swap) {
-        p->_replica_path = AppendString(base_filepath, ".tmp");
-        if (p->_replica_path == NULL) {
-            return -1;
-        }
-
-        // For swap mode, remove the swap file preemptively, even for readers.
-        // If the swap exists on open, that means it's a leftover from a previous run that
-        // crashed/exited before swaping it with the primary file.
-        remove(p->_replica_path);
-    }
-
-    flags |= O_CLOEXEC;
-
-    p->_fd = open(p->_primary_path, flags, S_IRUSR | S_IWUSR);
-    if (p->_fd < 0) {
-        return -1;
-    }
-
-    bool read_only = ((flags & (O_WRONLY | O_RDWR)) == 0);
-
-    int lockmode = read_only ? (LOCK_SH | LOCK_NB) : (LOCK_EX | LOCK_NB);
-
-    if (flock(p->_fd, lockmode) < 0) {
-        return -1;
-    }
-
-    bool ok = false;
-    off_t ssize = lseek(p->_fd, 0, SEEK_END);
-    ok = (ssize >= 0) && (lseek(p->_fd, 0, SEEK_SET) == 0);
-    if (!ok) {
-        return -1;
-    }
-
-    size_t size = ssize;
-    bool is_new = (size == 0);
-    bool expects_new = (flags & (O_CREAT | O_TRUNC));
-
-    if (is_new) {
-        if (!expects_new) {
-            errno = ENOENT;
-            return -1;
-        }
-        size = sizeof(ConfigStoreFileHeader);
-    }
-
-    if (size < sizeof(ConfigStoreFileHeader)) {
-        errno = ERANGE;
-        return -1;
-    }
-
-    if (ConfigStore_ReserveCapacity(p, size)) {
-        return -1;
-    }
-
-    ConfigStoreFileHeader *header = (ConfigStoreFileHeader *)(p->_begin);
-
-    if (is_new) {
-        // For new files, start with a basic header.
-        header->header.size = sizeof(ConfigStoreFileHeader);
-        header->header.key = ConfigStoreFileHeaderKey;
-        header->signature = ConfigStoreFileSignature;
-        header->version = ConfigStoreFileVersion;
-        p->_end += sizeof(ConfigStoreFileHeader);
-    } else {
-        // For existing files, try to the store from them.
-        if (read(p->_fd, p->_begin, size) != ssize) {
-            return -1;
-        }
-
-        size_t content_size = ConfigStore_ValidateFormat(p->_begin, size);
-        if (content_size == 0) {
-            // Invalid content.
-            errno = EINVAL;
-            return -1;
-        }
-
-        bool must_truncate =
-            !read_only && (content_size < size) && (p->_replica_type != ConfigStoreReplica_Swap);
-
-        if (must_truncate) {
-            // The content is valid, but it's shorter than the file. The previous writer may have
-            // crashed after it wrote the content but before it truncated the file, so truncate it
-            // now.
-
-            if (ftruncate(p->_fd, content_size) != 0) {
-                return -1;
-            }
-
-            fsync(p->_fd);
-        }
-
-        p->_end += content_size;
-    }
-
-    return 0;
-}
-
-int ConfigStore_Open(ConfigStore *p, const char *base_filepath, size_t max_size, int flags,
-                     ConfigStoreReplicaType rtype)
-{
-    if (p->_fd >= 0) {
-        errno = EALREADY;
-        return -1;
-    }
-
-    ConfigStore temp;
-    ConfigStore_Init(&temp);
-
-    int res = Impl_Open(&temp, base_filepath, max_size, flags, rtype);
-
-    if (res == 0) {
-        ConfigStore_Move(p, &temp);
-    }
-
-    ConfigStore_Close(&temp);
-
-    return res;
-}
-
-static int Impl_WriteToFile(int fd, ConfigStore *p)
-{
-    if (lseek(fd, 0, SEEK_SET) < 0) {
-        return -1;
-    }
-
-    ssize_t total_size = p->_end - p->_begin;
-
-    if (write(fd, p->_begin, total_size) != total_size) {
-        return -1;
-    }
-
-    if (ftruncate(fd, total_size) != 0) {
-        return -1;
-    }
-
-    fsync(fd);
-
-    return 0;
-}
-
-int ConfigStore_Commit(ConfigStore *p)
-{
-    if (!ConfigStore_InvariantsCheck(p)) {
-        errno = EINVAL;
-        return -1;
-    }
-
-    uint32_t crc =
-        ConfigStore_AddCrc(ConfigStoreCrcInitValue, p->_begin + sizeof(ConfigStoreFileHeader),
-                           p->_end - p->_begin - sizeof(ConfigStoreFileHeader));
-
-    ConfigStoreKvpHeader *first = (ConfigStoreKvpHeader *)p->_begin;
-    ConfigStoreKvpHeader *last = (ConfigStoreKvpHeader *)p->_end;
-
-    if ((first != last) && (first->key == ConfigStoreFileHeaderKey)) {
-        ConfigStoreFileHeader *header = (ConfigStoreFileHeader *)(first);
-        header->file_size = (p->_end - p->_begin);
-        header->crc = crc;
-    }
-
-    if (p->_replica_type == ConfigStoreReplica_Swap) {
-        // Create the swap file always.
-        int fd = open(p->_replica_path, O_RDWR | O_CREAT | O_CLOEXEC | O_TRUNC, S_IRUSR | S_IWUSR);
-        if (fd < 0) {
-            return -1;
-        }
-        int res = Impl_WriteToFile(fd, p);
-        close(fd);
-        if (res < 0) {
-            return -1;
-        }
-        res = rename(p->_replica_path, p->_primary_path);
-        if (res < 0) {
-            return -1;
-        }
-
-        ConfigStore_Close(p);
-    } else {
-        return Impl_WriteToFile(p->_fd, p);
-    }
-
-    return 0;
-}
-
-ConfigStoreKvpHeader *ConfigStore_BeginKvp(const ConfigStore *p)
-{
-    return ConfigStore_GetNextKvp((ConfigStoreKvpHeader *)p->_begin,
-                                  (ConfigStoreKvpHeader *)p->_end);
-}
-
-ConfigStoreKvpHeader *ConfigStore_EndKvp(const ConfigStore *p)
-{
-    return (ConfigStoreKvpHeader *)p->_end;
-}
-
-ConfigStoreKvpHeader *ConfigStore_InsertKvp(ConfigStore *p, const ConfigStoreKvpHeader *pos,
-                                            ConfigStoreKey key, size_t size)
-{
-    uint16_t kvp_size;
-    if (__builtin_add_overflow(size, sizeof(ConfigStoreKvpHeader), &kvp_size)) {
-        return NULL;
-    }
-
-    size_t in_offset = (ptrdiff_t)pos - (ptrdiff_t)p->_begin;
-    size_t current_size = p->_end - p->_begin;
-
-    if (ConfigStore_ReserveCapacity(p, current_size + kvp_size)) {
-        return NULL;
-    }
-
-    uint8_t *in_pos = &p->_begin[in_offset];
-
-    memmove(&in_pos[kvp_size], in_pos, current_size - in_offset);
-
-    ConfigStoreKvpHeader *pKvp = (ConfigStoreKvpHeader *)(in_pos);
-    pKvp->size = kvp_size;
-    pKvp->key = key;
-
-    p->_end += kvp_size;
-
-    return pKvp;
-}
-
-static ConfigStoreKvpHeader *Impl_FindKey(ConfigStoreKey key, ConfigStoreKvpHeader *pFirst,
-                                          ConfigStoreKvpHeader *pLast)
-{
-    while ((pFirst != pLast) && (pFirst->key != key)) {
-        pFirst = ConfigStore_GetNextKvp(pFirst, pLast);
-    }
-
-    return pFirst;
-}
-
-ConfigStoreKvpHeader *ConfigStore_TryGetKey(const ConfigStore *p, ConfigStoreKey key)
-{
-    ConfigStoreKvpHeader *it = ConfigStore_BeginKvp(p);
-    ConfigStoreKvpHeader *it_end = ConfigStore_EndKvp(p);
-    it = Impl_FindKey(key, it, it_end);
-    return (it != it_end) ? it : NULL;
-}
-
-ConfigStoreKvpHeader *ConfigStore_PutUniqueKey(ConfigStore *p, ConfigStoreKey key,
-                                               const uint8_t *optional_data, size_t value_size)
-{
-    ConfigStoreKvpHeader *it = ConfigStore_BeginKvp(p);
-    ConfigStoreKvpHeader *it_end = NULL;
-
-    // For all matching keys.
-    while (it_end = ConfigStore_EndKvp(p), it = Impl_FindKey(key, it, it_end), it != it_end) {
-        if (it->size != value_size) {
-            // Not same size. Erase KVP and continue with next.
-            it = ConfigStore_EraseKvp(p, it);
-            continue;
-        }
-
-        // Found KVP with same size. Reuse it and erase any other occurrences of the same
-        // key after it, just in case.
-        ConfigStoreKvpHeader *it_erase = ConfigStore_GetNextKvp(it, it_end);
-        while (it_end = ConfigStore_EndKvp(p), it_erase = Impl_FindKey(key, it_erase, it_end),
-               it_erase != it_end) {
-            it_erase = ConfigStore_EraseKvp(p, it_erase);
-        }
-        break;
-    }
-
-    it_end = ConfigStore_EndKvp(p);
-    if (it == it_end) {
-        it = ConfigStore_InsertKvp(p, it_end, key, value_size);
-        if (it == ConfigStore_EndKvp(p)) {
-            // Space exhaustion.
-            return NULL;
-        }
-    }
-
-    if (optional_data != NULL) {
-        ConfigStore_WriteValue(it, 0, optional_data, value_size);
-    }
-
-    return it;
-}
-
-ConfigStoreKvpHeader *ConfigStore_EraseKvp(ConfigStore *p, const ConfigStoreKvpHeader *pos)
-{
-    size_t size = pos->size;
-    ptrdiff_t offset = (ptrdiff_t)pos - (ptrdiff_t)p->_begin;
-    uint8_t *out_pos = &p->_begin[offset];
-    memmove(&out_pos[0], &out_pos[size], p->_end - &out_pos[size]);
-    p->_end -= size;
-
-    return (ConfigStoreKvpHeader *)out_pos;
-}
-
-ConfigStoreKvpHeader *ConfigStore_AllocUniqueKvp(ConfigStore *p, ConfigStoreKey first_key,
-                                                 ConfigStoreKey last_key, size_t value_size,
-                                                 ConfigStoreKey key_increment)
-{
-    while (first_key < last_key) {
-
-        bool found = false;
-
-        ConfigStoreKvpHeader *kvp = ConfigStore_BeginKvp(p);
-        while (kvp != ConfigStore_EndKvp(p)) {
-            found = (kvp->key == first_key);
-            if (found) {
-                break;
-            }
-            kvp = ConfigStore_GetNextKvp(kvp, ConfigStore_EndKvp(p));
-        }
-
-        if (!found) {
-            break;
-        }
-
-        if (__builtin_add_overflow(first_key, key_increment, &first_key)) {
-            errno = ENOENT;
-            return NULL;
-        }
-    }
-
-    if (first_key >= last_key) {
-        errno = ENOENT;
-        return NULL;
-    }
-
-    return ConfigStore_InsertKvp(p, ConfigStore_EndKvp(p), first_key, value_size);
-}
-
-int ConfigStore_EraseKeysInRange(ConfigStore *p, ConfigStoreKey first_key, ConfigStoreKey last_key,
-                                 ConfigStoreKey key_increment)
-{
-    bool good_args = (p) && (first_key <= last_key) && (1 <= key_increment);
-    if (!good_args) {
-        errno = EINVAL;
-        return -1;
-    }
-
-    ConfigStoreKvpHeader *kvp = ConfigStore_BeginKvp(p);
-    while (kvp != ConfigStore_EndKvp(p)) {
-        bool match = (first_key <= kvp->key) && (kvp->key < last_key) &&
-                     (((kvp->key - first_key) % key_increment) == 0);
-        if (match) {
-            kvp = ConfigStore_EraseKvp(p, kvp);
-        } else {
-            kvp = ConfigStore_GetNextKvp(kvp, ConfigStore_EndKvp(p));
-        }
-    }
-
-    return 0;
-}
-
-ConfigStoreKvpHeader *ConfigStore_GetNextKvpInRange(ConfigStore *p, const ConfigStoreKvpHeader *pos,
-                                                    ConfigStoreKey first_key,
-                                                    ConfigStoreKey last_key,
-                                                    ConfigStoreKey key_increment)
-{
-    ConfigStoreKvpHeader *end_pos = ConfigStore_EndKvp(p);
-
-    pos = pos ? ConfigStore_GetNextKvp(pos, end_pos) : ConfigStore_BeginKvp(p);
-
-    while (pos != end_pos) {
-        bool match = (first_key <= pos->key) && (pos->key < last_key) &&
-                     (((pos->key - first_key) % key_increment) == 0);
-        if (match) {
-            break;
-        }
-        pos = ConfigStore_GetNextKvp(pos, end_pos);
-    }
-
-    return (ConfigStoreKvpHeader *)pos;
-}
-
-int ConfigStore_WriteValue(ConfigStoreKvpHeader *pos, size_t offset, const void *data, size_t size)
-{
-    size_t hdr_size = pos ? sizeof(*pos) : 0;
-    size_t dst_size = (pos && (pos->size > sizeof(*pos))) ? (pos->size - sizeof(*pos)) : 0;
-
-    uint8_t *dst_data = (uint8_t *)pos + hdr_size + offset;
-
-    size_t last_offset = offset + size;
-    if (dst_size < last_offset) {
-        errno = E2BIG;
-        return -1;
-    }
-
-    memcpy(dst_data, (uint8_t *)data, size);
-    memset(dst_data + last_offset, 0, dst_size - last_offset);
-
-    return 0;
-}
-
-size_t ConfigStore_ValidateFormat(const uint8_t *data, size_t size)
-{
-    const ConfigStoreKvpHeader *first = (const ConfigStoreKvpHeader *)data;
-    const ConfigStoreKvpHeader *last = (const ConfigStoreKvpHeader *)(data + size);
-
-    bool has_header = (first != NULL) && (first != last) &&
-                      (first->key == ConfigStoreFileHeaderKey) &&
-                      (first->size >= sizeof(ConfigStoreFileHeader));
-
-    if (!has_header) {
-        return 0;
-    }
-
-    const ConfigStoreFileHeader *header = (const ConfigStoreFileHeader *)first;
-
-    bool ok = (header->signature == ConfigStoreFileSignature) &&
-              (header->version == ConfigStoreFileVersion) &&
-              (header->header.size <= header->file_size) && (header->file_size <= size);
-    if (!ok) {
-        return 0;
-    }
-
-    size = header->file_size;
-
-    data += sizeof(ConfigStoreFileHeader);
-    size -= sizeof(ConfigStoreFileHeader);
-
-    uint32_t crc = ConfigStore_AddCrc(ConfigStoreCrcInitValue, data, size);
-
-    if (crc != header->crc) {
-        return 0;
-    }
-
-    ++first;
-
-    while ((first != NULL) && (first != last)) {
-        if (first->key == ConfigStoreFileHeaderKey) {
-            // The header key must only be used in the beginning of the file.
-            break;
-        }
-
-        first = ConfigStore_GetNextKvp(first, last);
-    }
-
-    if (first != last) {
-        // Didn't get to the end of the file.
-        return 0;
-    }
-
-    return header->file_size;
-}
\ No newline at end of file
diff --git a/wpa_supplicant/config_store.h b/wpa_supplicant/config_store.h
deleted file mode 100644
index 2862153..0000000
--- a/wpa_supplicant/config_store.h
+++ /dev/null
@@ -1,211 +0,0 @@
-#pragma once
-
-#include <stdbool.h>
-#include <stdint.h>
-#include <string.h>
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/// <summary> The key type. </summary>
-typedef uint16_t ConfigStoreKey;
-
-/// <summary> The serialized header of a key-value pair. </summary>
-typedef struct ConfigStoreKvpHeader {
-    ConfigStoreKey key; // The key of this KVP.
-    uint16_t size;      // The size of the key-value pair (including this header).
-} __attribute__((packed)) ConfigStoreKvpHeader;
-
-/// <summary> The serialized header of the store file. </summary>
-typedef struct ConfigStoreFileHeader {
-    ConfigStoreKvpHeader header; // Header
-    uint8_t signature;           // File signature.
-    uint8_t version;             // File version.
-    uint32_t file_size;          // The size of the file (including this header).
-    uint32_t crc;                // The CRC of the portion of the file after this field.
-} __attribute__((packed)) ConfigStoreFileHeader;
-
-/// <summary> Range of keys reserved for the store itself. </summary>
-static const uint16_t ConfigStoreMinKey = 0x0000;
-static const uint16_t ConfigStoreMaxKey = 0xFFFA;
-static const uint16_t ConfigStoreMinReservedKey = 0xFFFB;
-static const uint16_t ConfigStoreMaxReservedKey = 0xFFFF;
-static const uint16_t ConfigStoreInvalidKey = 0xFFFF;
-static const uint16_t ConfigStoreFileHeaderKey = 0xFFFB;
-static const uint32_t ConfigStoreCrcInitValue = 0xFFFFFFFF;
-
-static const uint8_t ConfigStoreFileSignature = 0xC6;
-static const uint8_t ConfigStoreFileVersion = 0;
-
-/// <summary>
-/// The type of replica to use.
-/// </summary>
-typedef enum ConfigStoreReplicaType {
-    /// <summary> Don't use replicas. The store file is overwritten in place. </summary>
-    ConfigStoreReplica_None = 0,
-    /// <summary> Use a swap file. The file is swapped atomically with a temp file. </summary>
-    ConfigStoreReplica_Swap = 1,
-} ConfigStoreReplicaType;
-
-/// <summary> Gets the full size of the KVP given the header. </summary>
-/// <returns> The full size of the KVP, or 0 if the KVP is invalid. </returns>
-size_t ConfigStore_GetKvpFullSize(const ConfigStoreKvpHeader *p, const ConfigStoreKvpHeader *pEnd);
-
-/// <summary> Checks if the KVP header is defined within the given size. </summary>
-/// <returns> true if the KVP can be dereferenced within the range; false otherwise. </summary>
-bool ConfigStore_CanDereferenceKvp(const ConfigStoreKvpHeader *p, const ConfigStoreKvpHeader *pEnd);
-
-/// <summary> Increments the pointer to the next KVP given the current and the "guard". </summary>
-/// <returns> The next KVP or <paramref name="pEnd" /> if at the end of the range. </summary>
-ConfigStoreKvpHeader *ConfigStore_GetNextKvp(const ConfigStoreKvpHeader *p,
-                                             const ConfigStoreKvpHeader *pEnd);
-
-/// <summary> The Config Store State. </summary>
-typedef struct ConfigStore {
-    int _fd;
-    uint8_t *_begin;
-    uint8_t *_end;
-    uint8_t *_capacity;
-    size_t _max_size;
-    ConfigStoreReplicaType _replica_type;
-    char *_primary_path;
-    char *_replica_path;
-} ConfigStore;
-
-/// <summary>
-/// Initializes the memory of a ConfigStore for usage. Equivalent to the constructor.
-/// </summary>
-void ConfigStore_Init(ConfigStore *p);
-
-/// <summary>
-/// Resets the memory of a ConfigStore. Disposes of any allocated resources. Equivalent to a
-/// destructor, but puts the store back into a initialized state.
-/// </summary>
-void ConfigStore_Close(ConfigStore *p);
-
-/// <summary>
-/// Transfers the resources of a ConfigStore to another.
-/// </summary>
-void ConfigStore_Move(ConfigStore *pDst, ConfigStore *pSrc);
-
-/// <summary>
-/// Reserves space to add one or more KVP. It's not necessary to call this before
-/// inserting a key, but it can help reduce memory fragmentation and re-allocation to pre-reserve
-/// space.
-/// </summary>
-/// <returns> 0 on success; -1 on failure with error indication in errno. </returns>
-int ConfigStore_ReserveCapacity(ConfigStore *p, size_t capacity);
-
-/// <summary>
-/// Opens the store for writing. If the file doesn't exist, the function creates one anew.
-/// </summary>
-/// <returns> 0 on success; -1 on failure with error indication in errno. </returns>
-int ConfigStore_Open(ConfigStore *p, const char *base_filepath, size_t max_size, int flags,
-                     ConfigStoreReplicaType rtype);
-
-/// <summary>
-/// Commits the in-memory changes back to persistent storage.
-/// Note:
-/// If the file was opened in ConfigStoreReplica_Swap replica mode, this call will also close the
-/// object. This is because the object can't re-acquire its lock on the file without re-opening it,
-/// which temporarily allows for other objects to open and lock it. In this case the object may as
-/// well close the file on commit.
-/// </summary>
-/// <returns> 0 on success; -1 on failure with error indication in errno. </returns>
-int ConfigStore_Commit(ConfigStore *p);
-
-/// <summary> Gets a pointer to the first KVP in the store. </summary>
-/// <param name="p"> Required pointer to the store. </param>
-/// <returns> A pointer for the KVP. </returns>
-ConfigStoreKvpHeader *ConfigStore_BeginKvp(const ConfigStore *p);
-
-/// <summary> Gets a pointer to the "guard" KVP of the store. </summary>
-/// <returns> A pointer for the guard KVP. </returns>
-ConfigStoreKvpHeader *ConfigStore_EndKvp(const ConfigStore *p);
-
-/// <summary> Inserts a KVP of a given size and at a given position. </summary>
-/// <returns> A pointer for the inserted KVP or the guard KVP on memory exhaustion. </returns>
-ConfigStoreKvpHeader *ConfigStore_InsertKvp(ConfigStore *p, const ConfigStoreKvpHeader *pos,
-                                            ConfigStoreKey key, size_t size);
-
-/// <summary> Erases a KVP in a given position. </summary>
-/// <returns> A pointer for the KVP following the one that was removed. </returns>
-ConfigStoreKvpHeader *ConfigStore_EraseKvp(ConfigStore *p, const ConfigStoreKvpHeader *pos);
-
-/// <summary>
-/// Allocates a KVP with a key that is unique in a given range and key-increment.
-/// </summary>
-/// <param name="first_key"> The first key in the searchable range. </param>
-/// <param name="last_key"> The last key (exclusive) in the searchable range. </param>
-/// <param name="value_size"> The size to reserve for the value. </param>
-/// <param name="key_increment"> The increment for each step. </param>
-/// <returns> The new KVP with a unique key or nullptr on failure. </returns>
-/// <remarks>
-/// On success, the key of the returned KVP will have the following invariants.
-///     first_key <= kvp->key() < last_key
-///     (kvp->key() - first_key) % key_increment == 0
-///     kvp->size() == value_size
-/// </remarks>
-/// <returns>
-/// Pointer to the inserted KVP on success; NULL on failure with error indication in errno.
-/// - ENOENT: no unique key could be allocated in the specified range.
-/// - ENOMEM: no space available to insert the KVP.
-/// </returns>
-ConfigStoreKvpHeader *ConfigStore_AllocUniqueKvp(ConfigStore *p, ConfigStoreKey first_key,
-                                                 ConfigStoreKey last_key, size_t value_size,
-                                                 ConfigStoreKey key_increment);
-
-/// <summary>
-/// Erases all KVP that match a key in the given range.
-/// Note the end of the range is **EXCLUSIVE**.
-/// </summary>
-/// <param name="first_key"> The first key in the range. </param>
-/// <param name="last_key"> The last key (exclusive) in the range. </param>
-/// <param name="key_increment"> The increment for each step. </param>
-/// <returns> 0 on success; -1 on failure with error indication in errno. </returns>
-int ConfigStore_EraseKeysInRange(ConfigStore *p, ConfigStoreKey first_key, ConfigStoreKey last_key,
-                                 ConfigStoreKey key_increment);
-
-/// <summary>
-/// Gets the next KVP in a range of keys.
-/// Note the end of the range is **EXCLUSIVE**.
-/// </summary>
-/// <param name="p"> The store. </param>
-/// <param name="pos"> The current KVP. If null, will return the first that matches the key range.
-/// </param>
-/// <param name="first_key"> The first key in the range. </param>
-/// <param name="last_key"> The last key (exclusive) in the range. </param>
-/// <param name="key_increment"> The increment for each step. </param>
-/// <returns> The next KVP that matches the criteria or ConfigStore_EndKvp at the end. </returns>
-ConfigStoreKvpHeader *ConfigStore_GetNextKvpInRange(ConfigStore *p, const ConfigStoreKvpHeader *pos,
-                                                    ConfigStoreKey first_key,
-                                                    ConfigStoreKey last_key,
-                                                    ConfigStoreKey key_increment);
-
-/// <summary> Attempts to get the first match of a key. </summary>
-/// <returns> Pointer to the KVP or null if the key is not found. </returns>
-ConfigStoreKvpHeader *ConfigStore_TryGetKey(const ConfigStore *p, ConfigStoreKey key);
-
-/// <summary>
-/// Puts a KVP in the store and ensures its key is unique by erasing any other KVP of same key.
-/// Optionally the function also copies a value to the KVP's value.
-/// </summary>
-ConfigStoreKvpHeader *ConfigStore_PutUniqueKey(ConfigStore *p, ConfigStoreKey key,
-                                               const uint8_t *optional_data, size_t value_size);
-
-/// <summary> Helper to write to a value of a KVP. </summary>
-/// <returns> 0 on success; -1 on failure with error indication in errno. </returns>
-int ConfigStore_WriteValue(ConfigStoreKvpHeader *pos, size_t offset, const void *data, size_t size);
-
-/// <summary> Checks if the contents of a buffer are a valid configuration store. </summary>
-/// <returns> 0 if the contents are invalid; the valid size if the contents are valid. </returns>
-size_t ConfigStore_ValidateFormat(const uint8_t *data, size_t size);
-
-/// <summary> Helper to compute CRC. </summary>
-/// <returns> The CRC value. </returns>
-uint32_t ConfigStore_AddCrc(uint32_t init, const uint8_t *data, size_t size);
-
-#ifdef __cplusplus
-}
-#endif
\ No newline at end of file
